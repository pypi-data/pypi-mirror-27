# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImageToImageMetricPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkImageToImageMetricPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkImageToImageMetricPython')
    _itkImageToImageMetricPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImageToImageMetricPython', [dirname(__file__)])
        except ImportError:
            import _itkImageToImageMetricPython
            return _itkImageToImageMetricPython
        try:
            _mod = imp.load_module('_itkImageToImageMetricPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkImageToImageMetricPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImageToImageMetricPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkCovariantVectorPython
import vnl_vector_refPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
import ITKCostFunctionsPython
import vnl_cost_functionPython
import vnl_unary_functionPython
import vnl_least_squares_functionPython
import itkArray2DPython
import ITKCommonBasePython
import itkArrayPython
import itkOptimizerParametersPython
import itkCostFunctionPython
import itkImagePython
import itkOffsetPython
import itkSizePython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkIndexPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkImageRegionPython
import itkSpatialObjectBasePython
import itkSpatialObjectPropertyPython
import itkScalableAffineTransformPython
import itkTransformBasePython
import itkDiffusionTensor3DPython
import itkVariableLengthVectorPython
import itkAffineTransformPython
import itkMatrixOffsetTransformBasePython
import itkAffineGeometryFramePython
import itkBoundingBoxPython
import itkVectorContainerPython
import itkContinuousIndexPython
import itkMapContainerPython
import itkInterpolateImageFunctionPython
import itkImageFunctionBasePython
import itkFunctionBasePython

def itkImageToImageMetricIF3IF3_New():
  return itkImageToImageMetricIF3IF3.New()


def itkImageToImageMetricIF2IF2_New():
  return itkImageToImageMetricIF2IF2.New()


def itkImageToImageMetricIUC3IUC3_New():
  return itkImageToImageMetricIUC3IUC3.New()


def itkImageToImageMetricIUC2IUC2_New():
  return itkImageToImageMetricIUC2IUC2.New()


def itkImageToImageMetricISS3ISS3_New():
  return itkImageToImageMetricISS3ISS3.New()


def itkImageToImageMetricISS2ISS2_New():
  return itkImageToImageMetricISS2ISS2.New()

class itkImageToImageMetricIF2IF2(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """


    Computes similarity between regions of two images.

    This Class is templated over the type of the two input images. It
    expects a Transform and an Interpolator to be plugged in. This
    particular class is the base class for a hierarchy of similarity
    metrics.

    This class computes a value that measures the similarity between the
    Fixed image and the transformed Moving image. The Interpolator is used
    to compute intensity values on non-grid positions resulting from
    mapping points through the Transform.

    C++ includes: itkImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg: 'itkImageF2') -> "void":
        """
        SetFixedImage(itkImageToImageMetricIF2IF2 self, itkImageF2 _arg)

        Get/Set the Fixed
        Image. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageF2 const *":
        """GetFixedImage(itkImageToImageMetricIF2IF2 self) -> itkImageF2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageF2') -> "void":
        """
        SetMovingImage(itkImageToImageMetricIF2IF2 self, itkImageF2 _arg)

        Get/Set the Moving
        Image. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageF2 const *":
        """GetMovingImage(itkImageToImageMetricIF2IF2 self) -> itkImageF2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetMovingImage(self)


    def SetTransform(self, _arg: 'itkTransformD22') -> "void":
        """
        SetTransform(itkImageToImageMetricIF2IF2 self, itkTransformD22 _arg)

        Connect the Transform.

        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD22 *":
        """GetModifiableTransform(itkImageToImageMetricIF2IF2 self) -> itkTransformD22"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD22 *":
        """
        GetTransform(itkImageToImageMetricIF2IF2 self) -> itkTransformD22
        GetTransform(itkImageToImageMetricIF2IF2 self) -> itkTransformD22
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIF2D') -> "void":
        """
        SetInterpolator(itkImageToImageMetricIF2IF2 self, itkInterpolateImageFunctionIF2D _arg)

        Connect the
        Interpolator. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIF2D *":
        """GetModifiableInterpolator(itkImageToImageMetricIF2IF2 self) -> itkInterpolateImageFunctionIF2D"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIF2D *":
        """
        GetInterpolator(itkImageToImageMetricIF2IF2 self) -> itkInterpolateImageFunctionIF2D
        GetInterpolator(itkImageToImageMetricIF2IF2 self) -> itkInterpolateImageFunctionIF2D
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetInterpolator(self, *args)


    def GetNumberOfMovingImageSamples(self) -> "unsigned long long":
        """
        GetNumberOfMovingImageSamples(itkImageToImageMetricIF2IF2 self) -> unsigned long long

        Get
        the number of pixels considered in the computation. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetNumberOfMovingImageSamples(self)


    def GetNumberOfPixelsCounted(self) -> "unsigned long long const &":
        """GetNumberOfPixelsCounted(itkImageToImageMetricIF2IF2 self) -> unsigned long long const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetNumberOfPixelsCounted(self)


    def SetFixedImageRegion(self, reg: 'itkImageRegion2') -> "void":
        """
        SetFixedImageRegion(itkImageToImageMetricIF2IF2 self, itkImageRegion2 reg)

        Set the region
        over which the metric will be computed 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetFixedImageRegion(self, reg)


    def GetFixedImageRegion(self) -> "itkImageRegion2 const &":
        """
        GetFixedImageRegion(itkImageToImageMetricIF2IF2 self) -> itkImageRegion2

        Get the region
        over which the metric will be computed 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetFixedImageRegion(self)


    def SetMovingImageMask(self, *args) -> "void":
        """
        SetMovingImageMask(itkImageToImageMetricIF2IF2 self, itkSpatialObject2 _arg)
        SetMovingImageMask(itkImageToImageMetricIF2IF2 self, itkSpatialObject2 _arg)

        Set/Get the
        moving image mask. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetMovingImageMask(self, *args)


    def GetMovingImageMask(self) -> "itkSpatialObject2 const *":
        """GetMovingImageMask(itkImageToImageMetricIF2IF2 self) -> itkSpatialObject2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetMovingImageMask(self)


    def SetFixedImageMask(self, *args) -> "void":
        """
        SetFixedImageMask(itkImageToImageMetricIF2IF2 self, itkSpatialObject2 _arg)
        SetFixedImageMask(itkImageToImageMetricIF2IF2 self, itkSpatialObject2 _arg)

        Set/Get the fixed
        image mask. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetFixedImageMask(self, *args)


    def GetFixedImageMask(self) -> "itkSpatialObject2 const *":
        """GetFixedImageMask(itkImageToImageMetricIF2IF2 self) -> itkSpatialObject2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetFixedImageMask(self)


    def SetFixedImageIndexes(self, indexes: 'std::vector< itkIndex2,std::allocator< itkIndex2 > > const &') -> "void":
        """
        SetFixedImageIndexes(itkImageToImageMetricIF2IF2 self, std::vector< itkIndex2,std::allocator< itkIndex2 > > const & indexes)

        Set the fixed
        image indexes to be used as the samples when computing the match
        metric 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetFixedImageIndexes(self, indexes)


    def SetUseFixedImageIndexes(self, useIndex: 'bool') -> "void":
        """SetUseFixedImageIndexes(itkImageToImageMetricIF2IF2 self, bool useIndex)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetUseFixedImageIndexes(self, useIndex)


    def GetUseFixedImageIndexes(self) -> "bool const &":
        """GetUseFixedImageIndexes(itkImageToImageMetricIF2IF2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetUseFixedImageIndexes(self)


    def SetNumberOfThreads(self, numberOfThreads: 'unsigned int') -> "void":
        """
        SetNumberOfThreads(itkImageToImageMetricIF2IF2 self, unsigned int numberOfThreads)

        Set/Get number
        of threads to use for computations. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetNumberOfThreads(self, numberOfThreads)


    def GetNumberOfThreads(self) -> "unsigned int const &":
        """GetNumberOfThreads(itkImageToImageMetricIF2IF2 self) -> unsigned int const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetNumberOfThreads(self)


    def SetComputeGradient(self, _arg: 'bool const') -> "void":
        """
        SetComputeGradient(itkImageToImageMetricIF2IF2 self, bool const _arg)

        Set/Get gradient
        computation. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetComputeGradient(self, _arg)


    def GetComputeGradient(self) -> "bool const &":
        """GetComputeGradient(itkImageToImageMetricIF2IF2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetComputeGradient(self)


    def ComputeGradientOn(self) -> "void":
        """ComputeGradientOn(itkImageToImageMetricIF2IF2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_ComputeGradientOn(self)


    def ComputeGradientOff(self) -> "void":
        """ComputeGradientOff(itkImageToImageMetricIF2IF2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_ComputeGradientOff(self)


    def ComputeGradient(self) -> "void":
        """
        ComputeGradient(itkImageToImageMetricIF2IF2 self)

        Computes the
        gradient image and assigns it to m_GradientImage 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_ComputeGradient(self)


    def GetModifiableGradientImage(self) -> "itkImageCVD22 *":
        """GetModifiableGradientImage(itkImageToImageMetricIF2IF2 self) -> itkImageCVD22"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetModifiableGradientImage(self)


    def GetGradientImage(self, *args) -> "itkImageCVD22 *":
        """
        GetGradientImage(itkImageToImageMetricIF2IF2 self) -> itkImageCVD22
        GetGradientImage(itkImageToImageMetricIF2IF2 self) -> itkImageCVD22
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetGradientImage(self, *args)


    def SetTransformParameters(self, parameters: 'itkOptimizerParametersD') -> "void":
        """
        SetTransformParameters(itkImageToImageMetricIF2IF2 self, itkOptimizerParametersD parameters)

        Set the
        parameters defining the Transform. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetTransformParameters(self, parameters)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageToImageMetricIF2IF2 self)

        Initialize the Metric by
        making sure that all the components are present and plugged together
        correctly 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_Initialize(self)


    def MultiThreadingInitialize(self) -> "void":
        """
        MultiThreadingInitialize(itkImageToImageMetricIF2IF2 self)

        Initialize
        the components related to supporting multiple threads 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_MultiThreadingInitialize(self)


    def SetNumberOfFixedImageSamples(self, numSamples: 'unsigned long long') -> "void":
        """
        SetNumberOfFixedImageSamples(itkImageToImageMetricIF2IF2 self, unsigned long long numSamples)

        Number
        of spatial samples to used to compute metric This sets the number of
        samples. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetNumberOfFixedImageSamples(self, numSamples)


    def GetNumberOfFixedImageSamples(self) -> "unsigned long long const &":
        """GetNumberOfFixedImageSamples(itkImageToImageMetricIF2IF2 self) -> unsigned long long const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetNumberOfFixedImageSamples(self)


    def SetNumberOfSpatialSamples(self, num: 'unsigned long long') -> "void":
        """
        SetNumberOfSpatialSamples(itkImageToImageMetricIF2IF2 self, unsigned long long num)

        Number of
        spatial samples to used to compute metric This sets the number of
        samples. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetNumberOfSpatialSamples(self, num)


    def GetNumberOfSpatialSamples(self) -> "unsigned long long":
        """GetNumberOfSpatialSamples(itkImageToImageMetricIF2IF2 self) -> unsigned long long"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetNumberOfSpatialSamples(self)


    def SetFixedImageSamplesIntensityThreshold(self, thresh: 'float const &') -> "void":
        """
        SetFixedImageSamplesIntensityThreshold(itkImageToImageMetricIF2IF2 self, float const & thresh)

        Minimum fixed-image
        intensity needed for a sample to be used in the metric computation 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetFixedImageSamplesIntensityThreshold(self, thresh)


    def GetFixedImageSamplesIntensityThreshold(self) -> "float const &":
        """GetFixedImageSamplesIntensityThreshold(itkImageToImageMetricIF2IF2 self) -> float const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetFixedImageSamplesIntensityThreshold(self)


    def SetUseFixedImageSamplesIntensityThreshold(self, useThresh: 'bool') -> "void":
        """SetUseFixedImageSamplesIntensityThreshold(itkImageToImageMetricIF2IF2 self, bool useThresh)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetUseFixedImageSamplesIntensityThreshold(self, useThresh)


    def GetUseFixedImageSamplesIntensityThreshold(self) -> "bool const &":
        """GetUseFixedImageSamplesIntensityThreshold(itkImageToImageMetricIF2IF2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetUseFixedImageSamplesIntensityThreshold(self)


    def SetUseAllPixels(self, useAllPixels: 'bool') -> "void":
        """
        SetUseAllPixels(itkImageToImageMetricIF2IF2 self, bool useAllPixels)

        Select whether the
        metric will be computed using all the pixels on the fixed image
        region, or only using a set of randomly selected pixels. This value
        override IntensityThreshold, Masks, and SequentialSampling. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetUseAllPixels(self, useAllPixels)


    def UseAllPixelsOn(self) -> "void":
        """UseAllPixelsOn(itkImageToImageMetricIF2IF2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_UseAllPixelsOn(self)


    def UseAllPixelsOff(self) -> "void":
        """UseAllPixelsOff(itkImageToImageMetricIF2IF2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_UseAllPixelsOff(self)


    def GetUseAllPixels(self) -> "bool const &":
        """GetUseAllPixels(itkImageToImageMetricIF2IF2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetUseAllPixels(self)


    def SetUseSequentialSampling(self, sequentialSampling: 'bool') -> "void":
        """
        SetUseSequentialSampling(itkImageToImageMetricIF2IF2 self, bool sequentialSampling)

        If set to
        true, then every pixel in the fixed image will be scanned to determine
        if it should be used in registration metric computation. A pixel will
        be chosen if it meets any mask or threshold limits set. If set to
        false, then UseAllPixels will be set to false. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetUseSequentialSampling(self, sequentialSampling)


    def GetUseSequentialSampling(self) -> "bool const &":
        """GetUseSequentialSampling(itkImageToImageMetricIF2IF2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetUseSequentialSampling(self)


    def ReinitializeSeed(self, *args) -> "void":
        """
        ReinitializeSeed(itkImageToImageMetricIF2IF2 self)
        ReinitializeSeed(itkImageToImageMetricIF2IF2 self, int seed)

        Reinitialize the
        seed of the random number generator that selects the sample of pixels
        used for estimating the image histograms and the joint histogram. By
        nature, this metric is not deterministic, since at each run it may
        select a different set of pixels. By initializing the random number
        generator seed to the same value you can restore determinism. On the
        other hand, calling the method ReinitializeSeed() without arguments
        will use the clock from your machine in order to have a very random
        initialization of the seed. This will indeed increase the non-
        deterministic behavior of the metric. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_ReinitializeSeed(self, *args)


    def SetUseCachingOfBSplineWeights(self, _arg: 'bool const') -> "void":
        """
        SetUseCachingOfBSplineWeights(itkImageToImageMetricIF2IF2 self, bool const _arg)

        This
        boolean flag is only relevant when this metric is used along with a
        BSplineBaseTransform. The flag enables/disables the caching of values
        computed when a physical point is mapped through the
        BSplineBaseTransform. In particular it will cache the values of the
        BSpline weights for that points, and the indexes indicating what
        BSpline-grid nodes are relevant for that specific point. This caching
        is made optional due to the fact that the memory arrays used for the
        caching can reach large sizes even for moderate image size problems.
        For example, for a 3D image of 256^3, using 20% of pixels, these
        arrays will take about 1 Gigabyte of RAM for storage. The ratio of
        computing time between using the cache or not using the cache can
        reach 1:5, meaning that using the caching can provide a five times
        speed up. It is therefore, interesting to enable the caching, if
        enough memory is available for it. The caching is enabled by default,
        in order to preserve backward compatibility with previous versions of
        ITK. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetUseCachingOfBSplineWeights(self, _arg)


    def GetUseCachingOfBSplineWeights(self) -> "bool const &":
        """GetUseCachingOfBSplineWeights(itkImageToImageMetricIF2IF2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetUseCachingOfBSplineWeights(self)


    def UseCachingOfBSplineWeightsOn(self) -> "void":
        """UseCachingOfBSplineWeightsOn(itkImageToImageMetricIF2IF2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_UseCachingOfBSplineWeightsOn(self)


    def UseCachingOfBSplineWeightsOff(self) -> "void":
        """UseCachingOfBSplineWeightsOff(itkImageToImageMetricIF2IF2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_UseCachingOfBSplineWeightsOff(self)


    def GetModifiableThreader(self) -> "itkMultiThreader *":
        """GetModifiableThreader(itkImageToImageMetricIF2IF2 self) -> itkMultiThreader"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetModifiableThreader(self)


    def GetThreader(self, *args) -> "itkMultiThreader *":
        """
        GetThreader(itkImageToImageMetricIF2IF2 self) -> itkMultiThreader
        GetThreader(itkImageToImageMetricIF2IF2 self) -> itkMultiThreader
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetThreader(self, *args)


    def GetThreaderTransform(self) -> "itkTransformD22_Pointer const *":
        """GetThreaderTransform(itkImageToImageMetricIF2IF2 self) -> itkTransformD22_Pointer const *"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetThreaderTransform(self)

    __swig_destroy__ = _itkImageToImageMetricPython.delete_itkImageToImageMetricIF2IF2

    def cast(obj: 'itkLightObject') -> "itkImageToImageMetricIF2IF2 *":
        """cast(itkLightObject obj) -> itkImageToImageMetricIF2IF2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageToImageMetricIF2IF2 *":
        """GetPointer(itkImageToImageMetricIF2IF2 self) -> itkImageToImageMetricIF2IF2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageToImageMetricIF2IF2

        Create a new object of the class itkImageToImageMetricIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageMetricIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageMetricIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageMetricIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageMetricIF2IF2.SetFixedImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetFixedImage, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetFixedImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetFixedImage, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetMovingImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetMovingImage, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetMovingImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetMovingImage, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetTransform, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetModifiableTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetModifiableTransform, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetTransform, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetInterpolator, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetModifiableInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetModifiableInterpolator, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetInterpolator, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetNumberOfMovingImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetNumberOfMovingImageSamples, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetNumberOfPixelsCounted = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetNumberOfPixelsCounted, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetFixedImageRegion = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetFixedImageRegion, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetFixedImageRegion = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetFixedImageRegion, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetMovingImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetMovingImageMask, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetMovingImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetMovingImageMask, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetFixedImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetFixedImageMask, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetFixedImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetFixedImageMask, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetFixedImageIndexes, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetUseFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetUseFixedImageIndexes, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetUseFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetUseFixedImageIndexes, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetNumberOfThreads = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetNumberOfThreads, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetNumberOfThreads = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetNumberOfThreads, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetComputeGradient, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetComputeGradient, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.ComputeGradientOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_ComputeGradientOn, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.ComputeGradientOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_ComputeGradientOff, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.ComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_ComputeGradient, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetModifiableGradientImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetModifiableGradientImage, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetGradientImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetGradientImage, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetTransformParameters = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetTransformParameters, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.Initialize = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_Initialize, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.MultiThreadingInitialize = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_MultiThreadingInitialize, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetNumberOfFixedImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetNumberOfFixedImageSamples, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetNumberOfFixedImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetNumberOfFixedImageSamples, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetNumberOfSpatialSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetNumberOfSpatialSamples, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetNumberOfSpatialSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetNumberOfSpatialSamples, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetUseFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetUseFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetUseFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetUseFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetUseAllPixels = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetUseAllPixels, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.UseAllPixelsOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_UseAllPixelsOn, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.UseAllPixelsOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_UseAllPixelsOff, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetUseAllPixels = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetUseAllPixels, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetUseSequentialSampling = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetUseSequentialSampling, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetUseSequentialSampling = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetUseSequentialSampling, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.ReinitializeSeed = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_ReinitializeSeed, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.SetUseCachingOfBSplineWeights = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_SetUseCachingOfBSplineWeights, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetUseCachingOfBSplineWeights = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetUseCachingOfBSplineWeights, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.UseCachingOfBSplineWeightsOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_UseCachingOfBSplineWeightsOn, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.UseCachingOfBSplineWeightsOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_UseCachingOfBSplineWeightsOff, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetModifiableThreader = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetModifiableThreader, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetThreader = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetThreader, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetThreaderTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetThreaderTransform, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2.GetPointer = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_GetPointer, None, itkImageToImageMetricIF2IF2)
itkImageToImageMetricIF2IF2_swigregister = _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_swigregister
itkImageToImageMetricIF2IF2_swigregister(itkImageToImageMetricIF2IF2)

def itkImageToImageMetricIF2IF2_cast(obj: 'itkLightObject') -> "itkImageToImageMetricIF2IF2 *":
    """itkImageToImageMetricIF2IF2_cast(itkLightObject obj) -> itkImageToImageMetricIF2IF2"""
    return _itkImageToImageMetricPython.itkImageToImageMetricIF2IF2_cast(obj)

class itkImageToImageMetricIF3IF3(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """


    Computes similarity between regions of two images.

    This Class is templated over the type of the two input images. It
    expects a Transform and an Interpolator to be plugged in. This
    particular class is the base class for a hierarchy of similarity
    metrics.

    This class computes a value that measures the similarity between the
    Fixed image and the transformed Moving image. The Interpolator is used
    to compute intensity values on non-grid positions resulting from
    mapping points through the Transform.

    C++ includes: itkImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg: 'itkImageF3') -> "void":
        """
        SetFixedImage(itkImageToImageMetricIF3IF3 self, itkImageF3 _arg)

        Get/Set the Fixed
        Image. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageF3 const *":
        """GetFixedImage(itkImageToImageMetricIF3IF3 self) -> itkImageF3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageF3') -> "void":
        """
        SetMovingImage(itkImageToImageMetricIF3IF3 self, itkImageF3 _arg)

        Get/Set the Moving
        Image. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageF3 const *":
        """GetMovingImage(itkImageToImageMetricIF3IF3 self) -> itkImageF3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetMovingImage(self)


    def SetTransform(self, _arg: 'itkTransformD33') -> "void":
        """
        SetTransform(itkImageToImageMetricIF3IF3 self, itkTransformD33 _arg)

        Connect the Transform.

        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD33 *":
        """GetModifiableTransform(itkImageToImageMetricIF3IF3 self) -> itkTransformD33"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD33 *":
        """
        GetTransform(itkImageToImageMetricIF3IF3 self) -> itkTransformD33
        GetTransform(itkImageToImageMetricIF3IF3 self) -> itkTransformD33
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIF3D') -> "void":
        """
        SetInterpolator(itkImageToImageMetricIF3IF3 self, itkInterpolateImageFunctionIF3D _arg)

        Connect the
        Interpolator. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIF3D *":
        """GetModifiableInterpolator(itkImageToImageMetricIF3IF3 self) -> itkInterpolateImageFunctionIF3D"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIF3D *":
        """
        GetInterpolator(itkImageToImageMetricIF3IF3 self) -> itkInterpolateImageFunctionIF3D
        GetInterpolator(itkImageToImageMetricIF3IF3 self) -> itkInterpolateImageFunctionIF3D
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetInterpolator(self, *args)


    def GetNumberOfMovingImageSamples(self) -> "unsigned long long":
        """
        GetNumberOfMovingImageSamples(itkImageToImageMetricIF3IF3 self) -> unsigned long long

        Get
        the number of pixels considered in the computation. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetNumberOfMovingImageSamples(self)


    def GetNumberOfPixelsCounted(self) -> "unsigned long long const &":
        """GetNumberOfPixelsCounted(itkImageToImageMetricIF3IF3 self) -> unsigned long long const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetNumberOfPixelsCounted(self)


    def SetFixedImageRegion(self, reg: 'itkImageRegion3') -> "void":
        """
        SetFixedImageRegion(itkImageToImageMetricIF3IF3 self, itkImageRegion3 reg)

        Set the region
        over which the metric will be computed 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetFixedImageRegion(self, reg)


    def GetFixedImageRegion(self) -> "itkImageRegion3 const &":
        """
        GetFixedImageRegion(itkImageToImageMetricIF3IF3 self) -> itkImageRegion3

        Get the region
        over which the metric will be computed 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetFixedImageRegion(self)


    def SetMovingImageMask(self, *args) -> "void":
        """
        SetMovingImageMask(itkImageToImageMetricIF3IF3 self, itkSpatialObject3 _arg)
        SetMovingImageMask(itkImageToImageMetricIF3IF3 self, itkSpatialObject3 _arg)

        Set/Get the
        moving image mask. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetMovingImageMask(self, *args)


    def GetMovingImageMask(self) -> "itkSpatialObject3 const *":
        """GetMovingImageMask(itkImageToImageMetricIF3IF3 self) -> itkSpatialObject3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetMovingImageMask(self)


    def SetFixedImageMask(self, *args) -> "void":
        """
        SetFixedImageMask(itkImageToImageMetricIF3IF3 self, itkSpatialObject3 _arg)
        SetFixedImageMask(itkImageToImageMetricIF3IF3 self, itkSpatialObject3 _arg)

        Set/Get the fixed
        image mask. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetFixedImageMask(self, *args)


    def GetFixedImageMask(self) -> "itkSpatialObject3 const *":
        """GetFixedImageMask(itkImageToImageMetricIF3IF3 self) -> itkSpatialObject3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetFixedImageMask(self)


    def SetFixedImageIndexes(self, indexes: 'std::vector< itkIndex3,std::allocator< itkIndex3 > > const &') -> "void":
        """
        SetFixedImageIndexes(itkImageToImageMetricIF3IF3 self, std::vector< itkIndex3,std::allocator< itkIndex3 > > const & indexes)

        Set the fixed
        image indexes to be used as the samples when computing the match
        metric 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetFixedImageIndexes(self, indexes)


    def SetUseFixedImageIndexes(self, useIndex: 'bool') -> "void":
        """SetUseFixedImageIndexes(itkImageToImageMetricIF3IF3 self, bool useIndex)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetUseFixedImageIndexes(self, useIndex)


    def GetUseFixedImageIndexes(self) -> "bool const &":
        """GetUseFixedImageIndexes(itkImageToImageMetricIF3IF3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetUseFixedImageIndexes(self)


    def SetNumberOfThreads(self, numberOfThreads: 'unsigned int') -> "void":
        """
        SetNumberOfThreads(itkImageToImageMetricIF3IF3 self, unsigned int numberOfThreads)

        Set/Get number
        of threads to use for computations. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetNumberOfThreads(self, numberOfThreads)


    def GetNumberOfThreads(self) -> "unsigned int const &":
        """GetNumberOfThreads(itkImageToImageMetricIF3IF3 self) -> unsigned int const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetNumberOfThreads(self)


    def SetComputeGradient(self, _arg: 'bool const') -> "void":
        """
        SetComputeGradient(itkImageToImageMetricIF3IF3 self, bool const _arg)

        Set/Get gradient
        computation. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetComputeGradient(self, _arg)


    def GetComputeGradient(self) -> "bool const &":
        """GetComputeGradient(itkImageToImageMetricIF3IF3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetComputeGradient(self)


    def ComputeGradientOn(self) -> "void":
        """ComputeGradientOn(itkImageToImageMetricIF3IF3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_ComputeGradientOn(self)


    def ComputeGradientOff(self) -> "void":
        """ComputeGradientOff(itkImageToImageMetricIF3IF3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_ComputeGradientOff(self)


    def ComputeGradient(self) -> "void":
        """
        ComputeGradient(itkImageToImageMetricIF3IF3 self)

        Computes the
        gradient image and assigns it to m_GradientImage 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_ComputeGradient(self)


    def GetModifiableGradientImage(self) -> "itkImageCVD33 *":
        """GetModifiableGradientImage(itkImageToImageMetricIF3IF3 self) -> itkImageCVD33"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetModifiableGradientImage(self)


    def GetGradientImage(self, *args) -> "itkImageCVD33 *":
        """
        GetGradientImage(itkImageToImageMetricIF3IF3 self) -> itkImageCVD33
        GetGradientImage(itkImageToImageMetricIF3IF3 self) -> itkImageCVD33
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetGradientImage(self, *args)


    def SetTransformParameters(self, parameters: 'itkOptimizerParametersD') -> "void":
        """
        SetTransformParameters(itkImageToImageMetricIF3IF3 self, itkOptimizerParametersD parameters)

        Set the
        parameters defining the Transform. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetTransformParameters(self, parameters)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageToImageMetricIF3IF3 self)

        Initialize the Metric by
        making sure that all the components are present and plugged together
        correctly 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_Initialize(self)


    def MultiThreadingInitialize(self) -> "void":
        """
        MultiThreadingInitialize(itkImageToImageMetricIF3IF3 self)

        Initialize
        the components related to supporting multiple threads 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_MultiThreadingInitialize(self)


    def SetNumberOfFixedImageSamples(self, numSamples: 'unsigned long long') -> "void":
        """
        SetNumberOfFixedImageSamples(itkImageToImageMetricIF3IF3 self, unsigned long long numSamples)

        Number
        of spatial samples to used to compute metric This sets the number of
        samples. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetNumberOfFixedImageSamples(self, numSamples)


    def GetNumberOfFixedImageSamples(self) -> "unsigned long long const &":
        """GetNumberOfFixedImageSamples(itkImageToImageMetricIF3IF3 self) -> unsigned long long const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetNumberOfFixedImageSamples(self)


    def SetNumberOfSpatialSamples(self, num: 'unsigned long long') -> "void":
        """
        SetNumberOfSpatialSamples(itkImageToImageMetricIF3IF3 self, unsigned long long num)

        Number of
        spatial samples to used to compute metric This sets the number of
        samples. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetNumberOfSpatialSamples(self, num)


    def GetNumberOfSpatialSamples(self) -> "unsigned long long":
        """GetNumberOfSpatialSamples(itkImageToImageMetricIF3IF3 self) -> unsigned long long"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetNumberOfSpatialSamples(self)


    def SetFixedImageSamplesIntensityThreshold(self, thresh: 'float const &') -> "void":
        """
        SetFixedImageSamplesIntensityThreshold(itkImageToImageMetricIF3IF3 self, float const & thresh)

        Minimum fixed-image
        intensity needed for a sample to be used in the metric computation 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetFixedImageSamplesIntensityThreshold(self, thresh)


    def GetFixedImageSamplesIntensityThreshold(self) -> "float const &":
        """GetFixedImageSamplesIntensityThreshold(itkImageToImageMetricIF3IF3 self) -> float const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetFixedImageSamplesIntensityThreshold(self)


    def SetUseFixedImageSamplesIntensityThreshold(self, useThresh: 'bool') -> "void":
        """SetUseFixedImageSamplesIntensityThreshold(itkImageToImageMetricIF3IF3 self, bool useThresh)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetUseFixedImageSamplesIntensityThreshold(self, useThresh)


    def GetUseFixedImageSamplesIntensityThreshold(self) -> "bool const &":
        """GetUseFixedImageSamplesIntensityThreshold(itkImageToImageMetricIF3IF3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetUseFixedImageSamplesIntensityThreshold(self)


    def SetUseAllPixels(self, useAllPixels: 'bool') -> "void":
        """
        SetUseAllPixels(itkImageToImageMetricIF3IF3 self, bool useAllPixels)

        Select whether the
        metric will be computed using all the pixels on the fixed image
        region, or only using a set of randomly selected pixels. This value
        override IntensityThreshold, Masks, and SequentialSampling. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetUseAllPixels(self, useAllPixels)


    def UseAllPixelsOn(self) -> "void":
        """UseAllPixelsOn(itkImageToImageMetricIF3IF3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_UseAllPixelsOn(self)


    def UseAllPixelsOff(self) -> "void":
        """UseAllPixelsOff(itkImageToImageMetricIF3IF3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_UseAllPixelsOff(self)


    def GetUseAllPixels(self) -> "bool const &":
        """GetUseAllPixels(itkImageToImageMetricIF3IF3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetUseAllPixels(self)


    def SetUseSequentialSampling(self, sequentialSampling: 'bool') -> "void":
        """
        SetUseSequentialSampling(itkImageToImageMetricIF3IF3 self, bool sequentialSampling)

        If set to
        true, then every pixel in the fixed image will be scanned to determine
        if it should be used in registration metric computation. A pixel will
        be chosen if it meets any mask or threshold limits set. If set to
        false, then UseAllPixels will be set to false. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetUseSequentialSampling(self, sequentialSampling)


    def GetUseSequentialSampling(self) -> "bool const &":
        """GetUseSequentialSampling(itkImageToImageMetricIF3IF3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetUseSequentialSampling(self)


    def ReinitializeSeed(self, *args) -> "void":
        """
        ReinitializeSeed(itkImageToImageMetricIF3IF3 self)
        ReinitializeSeed(itkImageToImageMetricIF3IF3 self, int seed)

        Reinitialize the
        seed of the random number generator that selects the sample of pixels
        used for estimating the image histograms and the joint histogram. By
        nature, this metric is not deterministic, since at each run it may
        select a different set of pixels. By initializing the random number
        generator seed to the same value you can restore determinism. On the
        other hand, calling the method ReinitializeSeed() without arguments
        will use the clock from your machine in order to have a very random
        initialization of the seed. This will indeed increase the non-
        deterministic behavior of the metric. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_ReinitializeSeed(self, *args)


    def SetUseCachingOfBSplineWeights(self, _arg: 'bool const') -> "void":
        """
        SetUseCachingOfBSplineWeights(itkImageToImageMetricIF3IF3 self, bool const _arg)

        This
        boolean flag is only relevant when this metric is used along with a
        BSplineBaseTransform. The flag enables/disables the caching of values
        computed when a physical point is mapped through the
        BSplineBaseTransform. In particular it will cache the values of the
        BSpline weights for that points, and the indexes indicating what
        BSpline-grid nodes are relevant for that specific point. This caching
        is made optional due to the fact that the memory arrays used for the
        caching can reach large sizes even for moderate image size problems.
        For example, for a 3D image of 256^3, using 20% of pixels, these
        arrays will take about 1 Gigabyte of RAM for storage. The ratio of
        computing time between using the cache or not using the cache can
        reach 1:5, meaning that using the caching can provide a five times
        speed up. It is therefore, interesting to enable the caching, if
        enough memory is available for it. The caching is enabled by default,
        in order to preserve backward compatibility with previous versions of
        ITK. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetUseCachingOfBSplineWeights(self, _arg)


    def GetUseCachingOfBSplineWeights(self) -> "bool const &":
        """GetUseCachingOfBSplineWeights(itkImageToImageMetricIF3IF3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetUseCachingOfBSplineWeights(self)


    def UseCachingOfBSplineWeightsOn(self) -> "void":
        """UseCachingOfBSplineWeightsOn(itkImageToImageMetricIF3IF3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_UseCachingOfBSplineWeightsOn(self)


    def UseCachingOfBSplineWeightsOff(self) -> "void":
        """UseCachingOfBSplineWeightsOff(itkImageToImageMetricIF3IF3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_UseCachingOfBSplineWeightsOff(self)


    def GetModifiableThreader(self) -> "itkMultiThreader *":
        """GetModifiableThreader(itkImageToImageMetricIF3IF3 self) -> itkMultiThreader"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetModifiableThreader(self)


    def GetThreader(self, *args) -> "itkMultiThreader *":
        """
        GetThreader(itkImageToImageMetricIF3IF3 self) -> itkMultiThreader
        GetThreader(itkImageToImageMetricIF3IF3 self) -> itkMultiThreader
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetThreader(self, *args)


    def GetThreaderTransform(self) -> "itkTransformD33_Pointer const *":
        """GetThreaderTransform(itkImageToImageMetricIF3IF3 self) -> itkTransformD33_Pointer const *"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetThreaderTransform(self)

    __swig_destroy__ = _itkImageToImageMetricPython.delete_itkImageToImageMetricIF3IF3

    def cast(obj: 'itkLightObject') -> "itkImageToImageMetricIF3IF3 *":
        """cast(itkLightObject obj) -> itkImageToImageMetricIF3IF3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageToImageMetricIF3IF3 *":
        """GetPointer(itkImageToImageMetricIF3IF3 self) -> itkImageToImageMetricIF3IF3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageToImageMetricIF3IF3

        Create a new object of the class itkImageToImageMetricIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageMetricIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageMetricIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageMetricIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageMetricIF3IF3.SetFixedImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetFixedImage, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetFixedImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetFixedImage, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetMovingImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetMovingImage, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetMovingImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetMovingImage, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetTransform, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetModifiableTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetModifiableTransform, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetTransform, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetInterpolator, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetModifiableInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetModifiableInterpolator, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetInterpolator, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetNumberOfMovingImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetNumberOfMovingImageSamples, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetNumberOfPixelsCounted = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetNumberOfPixelsCounted, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetFixedImageRegion = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetFixedImageRegion, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetFixedImageRegion = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetFixedImageRegion, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetMovingImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetMovingImageMask, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetMovingImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetMovingImageMask, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetFixedImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetFixedImageMask, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetFixedImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetFixedImageMask, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetFixedImageIndexes, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetUseFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetUseFixedImageIndexes, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetUseFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetUseFixedImageIndexes, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetNumberOfThreads = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetNumberOfThreads, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetNumberOfThreads = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetNumberOfThreads, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetComputeGradient, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetComputeGradient, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.ComputeGradientOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_ComputeGradientOn, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.ComputeGradientOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_ComputeGradientOff, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.ComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_ComputeGradient, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetModifiableGradientImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetModifiableGradientImage, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetGradientImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetGradientImage, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetTransformParameters = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetTransformParameters, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.Initialize = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_Initialize, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.MultiThreadingInitialize = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_MultiThreadingInitialize, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetNumberOfFixedImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetNumberOfFixedImageSamples, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetNumberOfFixedImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetNumberOfFixedImageSamples, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetNumberOfSpatialSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetNumberOfSpatialSamples, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetNumberOfSpatialSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetNumberOfSpatialSamples, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetUseFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetUseFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetUseFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetUseFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetUseAllPixels = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetUseAllPixels, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.UseAllPixelsOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_UseAllPixelsOn, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.UseAllPixelsOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_UseAllPixelsOff, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetUseAllPixels = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetUseAllPixels, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetUseSequentialSampling = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetUseSequentialSampling, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetUseSequentialSampling = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetUseSequentialSampling, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.ReinitializeSeed = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_ReinitializeSeed, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.SetUseCachingOfBSplineWeights = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_SetUseCachingOfBSplineWeights, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetUseCachingOfBSplineWeights = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetUseCachingOfBSplineWeights, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.UseCachingOfBSplineWeightsOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_UseCachingOfBSplineWeightsOn, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.UseCachingOfBSplineWeightsOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_UseCachingOfBSplineWeightsOff, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetModifiableThreader = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetModifiableThreader, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetThreader = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetThreader, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetThreaderTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetThreaderTransform, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3.GetPointer = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_GetPointer, None, itkImageToImageMetricIF3IF3)
itkImageToImageMetricIF3IF3_swigregister = _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_swigregister
itkImageToImageMetricIF3IF3_swigregister(itkImageToImageMetricIF3IF3)

def itkImageToImageMetricIF3IF3_cast(obj: 'itkLightObject') -> "itkImageToImageMetricIF3IF3 *":
    """itkImageToImageMetricIF3IF3_cast(itkLightObject obj) -> itkImageToImageMetricIF3IF3"""
    return _itkImageToImageMetricPython.itkImageToImageMetricIF3IF3_cast(obj)

class itkImageToImageMetricISS2ISS2(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """


    Computes similarity between regions of two images.

    This Class is templated over the type of the two input images. It
    expects a Transform and an Interpolator to be plugged in. This
    particular class is the base class for a hierarchy of similarity
    metrics.

    This class computes a value that measures the similarity between the
    Fixed image and the transformed Moving image. The Interpolator is used
    to compute intensity values on non-grid positions resulting from
    mapping points through the Transform.

    C++ includes: itkImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg: 'itkImageSS2') -> "void":
        """
        SetFixedImage(itkImageToImageMetricISS2ISS2 self, itkImageSS2 _arg)

        Get/Set the Fixed
        Image. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageSS2 const *":
        """GetFixedImage(itkImageToImageMetricISS2ISS2 self) -> itkImageSS2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageSS2') -> "void":
        """
        SetMovingImage(itkImageToImageMetricISS2ISS2 self, itkImageSS2 _arg)

        Get/Set the Moving
        Image. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageSS2 const *":
        """GetMovingImage(itkImageToImageMetricISS2ISS2 self) -> itkImageSS2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetMovingImage(self)


    def SetTransform(self, _arg: 'itkTransformD22') -> "void":
        """
        SetTransform(itkImageToImageMetricISS2ISS2 self, itkTransformD22 _arg)

        Connect the Transform.

        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD22 *":
        """GetModifiableTransform(itkImageToImageMetricISS2ISS2 self) -> itkTransformD22"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD22 *":
        """
        GetTransform(itkImageToImageMetricISS2ISS2 self) -> itkTransformD22
        GetTransform(itkImageToImageMetricISS2ISS2 self) -> itkTransformD22
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionISS2D') -> "void":
        """
        SetInterpolator(itkImageToImageMetricISS2ISS2 self, itkInterpolateImageFunctionISS2D _arg)

        Connect the
        Interpolator. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionISS2D *":
        """GetModifiableInterpolator(itkImageToImageMetricISS2ISS2 self) -> itkInterpolateImageFunctionISS2D"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionISS2D *":
        """
        GetInterpolator(itkImageToImageMetricISS2ISS2 self) -> itkInterpolateImageFunctionISS2D
        GetInterpolator(itkImageToImageMetricISS2ISS2 self) -> itkInterpolateImageFunctionISS2D
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetInterpolator(self, *args)


    def GetNumberOfMovingImageSamples(self) -> "unsigned long long":
        """
        GetNumberOfMovingImageSamples(itkImageToImageMetricISS2ISS2 self) -> unsigned long long

        Get
        the number of pixels considered in the computation. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetNumberOfMovingImageSamples(self)


    def GetNumberOfPixelsCounted(self) -> "unsigned long long const &":
        """GetNumberOfPixelsCounted(itkImageToImageMetricISS2ISS2 self) -> unsigned long long const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetNumberOfPixelsCounted(self)


    def SetFixedImageRegion(self, reg: 'itkImageRegion2') -> "void":
        """
        SetFixedImageRegion(itkImageToImageMetricISS2ISS2 self, itkImageRegion2 reg)

        Set the region
        over which the metric will be computed 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetFixedImageRegion(self, reg)


    def GetFixedImageRegion(self) -> "itkImageRegion2 const &":
        """
        GetFixedImageRegion(itkImageToImageMetricISS2ISS2 self) -> itkImageRegion2

        Get the region
        over which the metric will be computed 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetFixedImageRegion(self)


    def SetMovingImageMask(self, *args) -> "void":
        """
        SetMovingImageMask(itkImageToImageMetricISS2ISS2 self, itkSpatialObject2 _arg)
        SetMovingImageMask(itkImageToImageMetricISS2ISS2 self, itkSpatialObject2 _arg)

        Set/Get the
        moving image mask. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetMovingImageMask(self, *args)


    def GetMovingImageMask(self) -> "itkSpatialObject2 const *":
        """GetMovingImageMask(itkImageToImageMetricISS2ISS2 self) -> itkSpatialObject2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetMovingImageMask(self)


    def SetFixedImageMask(self, *args) -> "void":
        """
        SetFixedImageMask(itkImageToImageMetricISS2ISS2 self, itkSpatialObject2 _arg)
        SetFixedImageMask(itkImageToImageMetricISS2ISS2 self, itkSpatialObject2 _arg)

        Set/Get the fixed
        image mask. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetFixedImageMask(self, *args)


    def GetFixedImageMask(self) -> "itkSpatialObject2 const *":
        """GetFixedImageMask(itkImageToImageMetricISS2ISS2 self) -> itkSpatialObject2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetFixedImageMask(self)


    def SetFixedImageIndexes(self, indexes: 'std::vector< itkIndex2,std::allocator< itkIndex2 > > const &') -> "void":
        """
        SetFixedImageIndexes(itkImageToImageMetricISS2ISS2 self, std::vector< itkIndex2,std::allocator< itkIndex2 > > const & indexes)

        Set the fixed
        image indexes to be used as the samples when computing the match
        metric 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetFixedImageIndexes(self, indexes)


    def SetUseFixedImageIndexes(self, useIndex: 'bool') -> "void":
        """SetUseFixedImageIndexes(itkImageToImageMetricISS2ISS2 self, bool useIndex)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetUseFixedImageIndexes(self, useIndex)


    def GetUseFixedImageIndexes(self) -> "bool const &":
        """GetUseFixedImageIndexes(itkImageToImageMetricISS2ISS2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetUseFixedImageIndexes(self)


    def SetNumberOfThreads(self, numberOfThreads: 'unsigned int') -> "void":
        """
        SetNumberOfThreads(itkImageToImageMetricISS2ISS2 self, unsigned int numberOfThreads)

        Set/Get number
        of threads to use for computations. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetNumberOfThreads(self, numberOfThreads)


    def GetNumberOfThreads(self) -> "unsigned int const &":
        """GetNumberOfThreads(itkImageToImageMetricISS2ISS2 self) -> unsigned int const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetNumberOfThreads(self)


    def SetComputeGradient(self, _arg: 'bool const') -> "void":
        """
        SetComputeGradient(itkImageToImageMetricISS2ISS2 self, bool const _arg)

        Set/Get gradient
        computation. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetComputeGradient(self, _arg)


    def GetComputeGradient(self) -> "bool const &":
        """GetComputeGradient(itkImageToImageMetricISS2ISS2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetComputeGradient(self)


    def ComputeGradientOn(self) -> "void":
        """ComputeGradientOn(itkImageToImageMetricISS2ISS2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_ComputeGradientOn(self)


    def ComputeGradientOff(self) -> "void":
        """ComputeGradientOff(itkImageToImageMetricISS2ISS2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_ComputeGradientOff(self)


    def ComputeGradient(self) -> "void":
        """
        ComputeGradient(itkImageToImageMetricISS2ISS2 self)

        Computes the
        gradient image and assigns it to m_GradientImage 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_ComputeGradient(self)


    def GetModifiableGradientImage(self) -> "itkImageCVD22 *":
        """GetModifiableGradientImage(itkImageToImageMetricISS2ISS2 self) -> itkImageCVD22"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetModifiableGradientImage(self)


    def GetGradientImage(self, *args) -> "itkImageCVD22 *":
        """
        GetGradientImage(itkImageToImageMetricISS2ISS2 self) -> itkImageCVD22
        GetGradientImage(itkImageToImageMetricISS2ISS2 self) -> itkImageCVD22
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetGradientImage(self, *args)


    def SetTransformParameters(self, parameters: 'itkOptimizerParametersD') -> "void":
        """
        SetTransformParameters(itkImageToImageMetricISS2ISS2 self, itkOptimizerParametersD parameters)

        Set the
        parameters defining the Transform. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetTransformParameters(self, parameters)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageToImageMetricISS2ISS2 self)

        Initialize the Metric by
        making sure that all the components are present and plugged together
        correctly 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_Initialize(self)


    def MultiThreadingInitialize(self) -> "void":
        """
        MultiThreadingInitialize(itkImageToImageMetricISS2ISS2 self)

        Initialize
        the components related to supporting multiple threads 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_MultiThreadingInitialize(self)


    def SetNumberOfFixedImageSamples(self, numSamples: 'unsigned long long') -> "void":
        """
        SetNumberOfFixedImageSamples(itkImageToImageMetricISS2ISS2 self, unsigned long long numSamples)

        Number
        of spatial samples to used to compute metric This sets the number of
        samples. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetNumberOfFixedImageSamples(self, numSamples)


    def GetNumberOfFixedImageSamples(self) -> "unsigned long long const &":
        """GetNumberOfFixedImageSamples(itkImageToImageMetricISS2ISS2 self) -> unsigned long long const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetNumberOfFixedImageSamples(self)


    def SetNumberOfSpatialSamples(self, num: 'unsigned long long') -> "void":
        """
        SetNumberOfSpatialSamples(itkImageToImageMetricISS2ISS2 self, unsigned long long num)

        Number of
        spatial samples to used to compute metric This sets the number of
        samples. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetNumberOfSpatialSamples(self, num)


    def GetNumberOfSpatialSamples(self) -> "unsigned long long":
        """GetNumberOfSpatialSamples(itkImageToImageMetricISS2ISS2 self) -> unsigned long long"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetNumberOfSpatialSamples(self)


    def SetFixedImageSamplesIntensityThreshold(self, thresh: 'short const &') -> "void":
        """
        SetFixedImageSamplesIntensityThreshold(itkImageToImageMetricISS2ISS2 self, short const & thresh)

        Minimum fixed-image
        intensity needed for a sample to be used in the metric computation 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetFixedImageSamplesIntensityThreshold(self, thresh)


    def GetFixedImageSamplesIntensityThreshold(self) -> "short const &":
        """GetFixedImageSamplesIntensityThreshold(itkImageToImageMetricISS2ISS2 self) -> short const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetFixedImageSamplesIntensityThreshold(self)


    def SetUseFixedImageSamplesIntensityThreshold(self, useThresh: 'bool') -> "void":
        """SetUseFixedImageSamplesIntensityThreshold(itkImageToImageMetricISS2ISS2 self, bool useThresh)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetUseFixedImageSamplesIntensityThreshold(self, useThresh)


    def GetUseFixedImageSamplesIntensityThreshold(self) -> "bool const &":
        """GetUseFixedImageSamplesIntensityThreshold(itkImageToImageMetricISS2ISS2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetUseFixedImageSamplesIntensityThreshold(self)


    def SetUseAllPixels(self, useAllPixels: 'bool') -> "void":
        """
        SetUseAllPixels(itkImageToImageMetricISS2ISS2 self, bool useAllPixels)

        Select whether the
        metric will be computed using all the pixels on the fixed image
        region, or only using a set of randomly selected pixels. This value
        override IntensityThreshold, Masks, and SequentialSampling. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetUseAllPixels(self, useAllPixels)


    def UseAllPixelsOn(self) -> "void":
        """UseAllPixelsOn(itkImageToImageMetricISS2ISS2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_UseAllPixelsOn(self)


    def UseAllPixelsOff(self) -> "void":
        """UseAllPixelsOff(itkImageToImageMetricISS2ISS2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_UseAllPixelsOff(self)


    def GetUseAllPixels(self) -> "bool const &":
        """GetUseAllPixels(itkImageToImageMetricISS2ISS2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetUseAllPixels(self)


    def SetUseSequentialSampling(self, sequentialSampling: 'bool') -> "void":
        """
        SetUseSequentialSampling(itkImageToImageMetricISS2ISS2 self, bool sequentialSampling)

        If set to
        true, then every pixel in the fixed image will be scanned to determine
        if it should be used in registration metric computation. A pixel will
        be chosen if it meets any mask or threshold limits set. If set to
        false, then UseAllPixels will be set to false. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetUseSequentialSampling(self, sequentialSampling)


    def GetUseSequentialSampling(self) -> "bool const &":
        """GetUseSequentialSampling(itkImageToImageMetricISS2ISS2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetUseSequentialSampling(self)


    def ReinitializeSeed(self, *args) -> "void":
        """
        ReinitializeSeed(itkImageToImageMetricISS2ISS2 self)
        ReinitializeSeed(itkImageToImageMetricISS2ISS2 self, int seed)

        Reinitialize the
        seed of the random number generator that selects the sample of pixels
        used for estimating the image histograms and the joint histogram. By
        nature, this metric is not deterministic, since at each run it may
        select a different set of pixels. By initializing the random number
        generator seed to the same value you can restore determinism. On the
        other hand, calling the method ReinitializeSeed() without arguments
        will use the clock from your machine in order to have a very random
        initialization of the seed. This will indeed increase the non-
        deterministic behavior of the metric. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_ReinitializeSeed(self, *args)


    def SetUseCachingOfBSplineWeights(self, _arg: 'bool const') -> "void":
        """
        SetUseCachingOfBSplineWeights(itkImageToImageMetricISS2ISS2 self, bool const _arg)

        This
        boolean flag is only relevant when this metric is used along with a
        BSplineBaseTransform. The flag enables/disables the caching of values
        computed when a physical point is mapped through the
        BSplineBaseTransform. In particular it will cache the values of the
        BSpline weights for that points, and the indexes indicating what
        BSpline-grid nodes are relevant for that specific point. This caching
        is made optional due to the fact that the memory arrays used for the
        caching can reach large sizes even for moderate image size problems.
        For example, for a 3D image of 256^3, using 20% of pixels, these
        arrays will take about 1 Gigabyte of RAM for storage. The ratio of
        computing time between using the cache or not using the cache can
        reach 1:5, meaning that using the caching can provide a five times
        speed up. It is therefore, interesting to enable the caching, if
        enough memory is available for it. The caching is enabled by default,
        in order to preserve backward compatibility with previous versions of
        ITK. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetUseCachingOfBSplineWeights(self, _arg)


    def GetUseCachingOfBSplineWeights(self) -> "bool const &":
        """GetUseCachingOfBSplineWeights(itkImageToImageMetricISS2ISS2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetUseCachingOfBSplineWeights(self)


    def UseCachingOfBSplineWeightsOn(self) -> "void":
        """UseCachingOfBSplineWeightsOn(itkImageToImageMetricISS2ISS2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_UseCachingOfBSplineWeightsOn(self)


    def UseCachingOfBSplineWeightsOff(self) -> "void":
        """UseCachingOfBSplineWeightsOff(itkImageToImageMetricISS2ISS2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_UseCachingOfBSplineWeightsOff(self)


    def GetModifiableThreader(self) -> "itkMultiThreader *":
        """GetModifiableThreader(itkImageToImageMetricISS2ISS2 self) -> itkMultiThreader"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetModifiableThreader(self)


    def GetThreader(self, *args) -> "itkMultiThreader *":
        """
        GetThreader(itkImageToImageMetricISS2ISS2 self) -> itkMultiThreader
        GetThreader(itkImageToImageMetricISS2ISS2 self) -> itkMultiThreader
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetThreader(self, *args)


    def GetThreaderTransform(self) -> "itkTransformD22_Pointer const *":
        """GetThreaderTransform(itkImageToImageMetricISS2ISS2 self) -> itkTransformD22_Pointer const *"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetThreaderTransform(self)

    __swig_destroy__ = _itkImageToImageMetricPython.delete_itkImageToImageMetricISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkImageToImageMetricISS2ISS2 *":
        """cast(itkLightObject obj) -> itkImageToImageMetricISS2ISS2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageToImageMetricISS2ISS2 *":
        """GetPointer(itkImageToImageMetricISS2ISS2 self) -> itkImageToImageMetricISS2ISS2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageToImageMetricISS2ISS2

        Create a new object of the class itkImageToImageMetricISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageMetricISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageMetricISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageMetricISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageMetricISS2ISS2.SetFixedImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetFixedImage, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetFixedImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetFixedImage, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetMovingImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetMovingImage, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetMovingImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetMovingImage, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetTransform, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetModifiableTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetModifiableTransform, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetTransform, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetInterpolator, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetModifiableInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetModifiableInterpolator, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetInterpolator, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetNumberOfMovingImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetNumberOfMovingImageSamples, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetNumberOfPixelsCounted = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetNumberOfPixelsCounted, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetFixedImageRegion = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetFixedImageRegion, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetFixedImageRegion = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetFixedImageRegion, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetMovingImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetMovingImageMask, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetMovingImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetMovingImageMask, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetFixedImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetFixedImageMask, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetFixedImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetFixedImageMask, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetFixedImageIndexes, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetUseFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetUseFixedImageIndexes, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetUseFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetUseFixedImageIndexes, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetNumberOfThreads = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetNumberOfThreads, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetNumberOfThreads = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetNumberOfThreads, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetComputeGradient, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetComputeGradient, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.ComputeGradientOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_ComputeGradientOn, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.ComputeGradientOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_ComputeGradientOff, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.ComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_ComputeGradient, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetModifiableGradientImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetModifiableGradientImage, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetGradientImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetGradientImage, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetTransformParameters = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetTransformParameters, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.Initialize = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_Initialize, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.MultiThreadingInitialize = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_MultiThreadingInitialize, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetNumberOfFixedImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetNumberOfFixedImageSamples, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetNumberOfFixedImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetNumberOfFixedImageSamples, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetNumberOfSpatialSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetNumberOfSpatialSamples, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetNumberOfSpatialSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetNumberOfSpatialSamples, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetUseFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetUseFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetUseFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetUseFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetUseAllPixels = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetUseAllPixels, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.UseAllPixelsOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_UseAllPixelsOn, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.UseAllPixelsOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_UseAllPixelsOff, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetUseAllPixels = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetUseAllPixels, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetUseSequentialSampling = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetUseSequentialSampling, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetUseSequentialSampling = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetUseSequentialSampling, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.ReinitializeSeed = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_ReinitializeSeed, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.SetUseCachingOfBSplineWeights = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_SetUseCachingOfBSplineWeights, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetUseCachingOfBSplineWeights = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetUseCachingOfBSplineWeights, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.UseCachingOfBSplineWeightsOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_UseCachingOfBSplineWeightsOn, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.UseCachingOfBSplineWeightsOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_UseCachingOfBSplineWeightsOff, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetModifiableThreader = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetModifiableThreader, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetThreader = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetThreader, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetThreaderTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetThreaderTransform, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2.GetPointer = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_GetPointer, None, itkImageToImageMetricISS2ISS2)
itkImageToImageMetricISS2ISS2_swigregister = _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_swigregister
itkImageToImageMetricISS2ISS2_swigregister(itkImageToImageMetricISS2ISS2)

def itkImageToImageMetricISS2ISS2_cast(obj: 'itkLightObject') -> "itkImageToImageMetricISS2ISS2 *":
    """itkImageToImageMetricISS2ISS2_cast(itkLightObject obj) -> itkImageToImageMetricISS2ISS2"""
    return _itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2_cast(obj)

class itkImageToImageMetricISS3ISS3(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """


    Computes similarity between regions of two images.

    This Class is templated over the type of the two input images. It
    expects a Transform and an Interpolator to be plugged in. This
    particular class is the base class for a hierarchy of similarity
    metrics.

    This class computes a value that measures the similarity between the
    Fixed image and the transformed Moving image. The Interpolator is used
    to compute intensity values on non-grid positions resulting from
    mapping points through the Transform.

    C++ includes: itkImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg: 'itkImageSS3') -> "void":
        """
        SetFixedImage(itkImageToImageMetricISS3ISS3 self, itkImageSS3 _arg)

        Get/Set the Fixed
        Image. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageSS3 const *":
        """GetFixedImage(itkImageToImageMetricISS3ISS3 self) -> itkImageSS3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageSS3') -> "void":
        """
        SetMovingImage(itkImageToImageMetricISS3ISS3 self, itkImageSS3 _arg)

        Get/Set the Moving
        Image. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageSS3 const *":
        """GetMovingImage(itkImageToImageMetricISS3ISS3 self) -> itkImageSS3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetMovingImage(self)


    def SetTransform(self, _arg: 'itkTransformD33') -> "void":
        """
        SetTransform(itkImageToImageMetricISS3ISS3 self, itkTransformD33 _arg)

        Connect the Transform.

        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD33 *":
        """GetModifiableTransform(itkImageToImageMetricISS3ISS3 self) -> itkTransformD33"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD33 *":
        """
        GetTransform(itkImageToImageMetricISS3ISS3 self) -> itkTransformD33
        GetTransform(itkImageToImageMetricISS3ISS3 self) -> itkTransformD33
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionISS3D') -> "void":
        """
        SetInterpolator(itkImageToImageMetricISS3ISS3 self, itkInterpolateImageFunctionISS3D _arg)

        Connect the
        Interpolator. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionISS3D *":
        """GetModifiableInterpolator(itkImageToImageMetricISS3ISS3 self) -> itkInterpolateImageFunctionISS3D"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionISS3D *":
        """
        GetInterpolator(itkImageToImageMetricISS3ISS3 self) -> itkInterpolateImageFunctionISS3D
        GetInterpolator(itkImageToImageMetricISS3ISS3 self) -> itkInterpolateImageFunctionISS3D
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetInterpolator(self, *args)


    def GetNumberOfMovingImageSamples(self) -> "unsigned long long":
        """
        GetNumberOfMovingImageSamples(itkImageToImageMetricISS3ISS3 self) -> unsigned long long

        Get
        the number of pixels considered in the computation. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetNumberOfMovingImageSamples(self)


    def GetNumberOfPixelsCounted(self) -> "unsigned long long const &":
        """GetNumberOfPixelsCounted(itkImageToImageMetricISS3ISS3 self) -> unsigned long long const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetNumberOfPixelsCounted(self)


    def SetFixedImageRegion(self, reg: 'itkImageRegion3') -> "void":
        """
        SetFixedImageRegion(itkImageToImageMetricISS3ISS3 self, itkImageRegion3 reg)

        Set the region
        over which the metric will be computed 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetFixedImageRegion(self, reg)


    def GetFixedImageRegion(self) -> "itkImageRegion3 const &":
        """
        GetFixedImageRegion(itkImageToImageMetricISS3ISS3 self) -> itkImageRegion3

        Get the region
        over which the metric will be computed 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetFixedImageRegion(self)


    def SetMovingImageMask(self, *args) -> "void":
        """
        SetMovingImageMask(itkImageToImageMetricISS3ISS3 self, itkSpatialObject3 _arg)
        SetMovingImageMask(itkImageToImageMetricISS3ISS3 self, itkSpatialObject3 _arg)

        Set/Get the
        moving image mask. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetMovingImageMask(self, *args)


    def GetMovingImageMask(self) -> "itkSpatialObject3 const *":
        """GetMovingImageMask(itkImageToImageMetricISS3ISS3 self) -> itkSpatialObject3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetMovingImageMask(self)


    def SetFixedImageMask(self, *args) -> "void":
        """
        SetFixedImageMask(itkImageToImageMetricISS3ISS3 self, itkSpatialObject3 _arg)
        SetFixedImageMask(itkImageToImageMetricISS3ISS3 self, itkSpatialObject3 _arg)

        Set/Get the fixed
        image mask. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetFixedImageMask(self, *args)


    def GetFixedImageMask(self) -> "itkSpatialObject3 const *":
        """GetFixedImageMask(itkImageToImageMetricISS3ISS3 self) -> itkSpatialObject3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetFixedImageMask(self)


    def SetFixedImageIndexes(self, indexes: 'std::vector< itkIndex3,std::allocator< itkIndex3 > > const &') -> "void":
        """
        SetFixedImageIndexes(itkImageToImageMetricISS3ISS3 self, std::vector< itkIndex3,std::allocator< itkIndex3 > > const & indexes)

        Set the fixed
        image indexes to be used as the samples when computing the match
        metric 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetFixedImageIndexes(self, indexes)


    def SetUseFixedImageIndexes(self, useIndex: 'bool') -> "void":
        """SetUseFixedImageIndexes(itkImageToImageMetricISS3ISS3 self, bool useIndex)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetUseFixedImageIndexes(self, useIndex)


    def GetUseFixedImageIndexes(self) -> "bool const &":
        """GetUseFixedImageIndexes(itkImageToImageMetricISS3ISS3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetUseFixedImageIndexes(self)


    def SetNumberOfThreads(self, numberOfThreads: 'unsigned int') -> "void":
        """
        SetNumberOfThreads(itkImageToImageMetricISS3ISS3 self, unsigned int numberOfThreads)

        Set/Get number
        of threads to use for computations. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetNumberOfThreads(self, numberOfThreads)


    def GetNumberOfThreads(self) -> "unsigned int const &":
        """GetNumberOfThreads(itkImageToImageMetricISS3ISS3 self) -> unsigned int const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetNumberOfThreads(self)


    def SetComputeGradient(self, _arg: 'bool const') -> "void":
        """
        SetComputeGradient(itkImageToImageMetricISS3ISS3 self, bool const _arg)

        Set/Get gradient
        computation. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetComputeGradient(self, _arg)


    def GetComputeGradient(self) -> "bool const &":
        """GetComputeGradient(itkImageToImageMetricISS3ISS3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetComputeGradient(self)


    def ComputeGradientOn(self) -> "void":
        """ComputeGradientOn(itkImageToImageMetricISS3ISS3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_ComputeGradientOn(self)


    def ComputeGradientOff(self) -> "void":
        """ComputeGradientOff(itkImageToImageMetricISS3ISS3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_ComputeGradientOff(self)


    def ComputeGradient(self) -> "void":
        """
        ComputeGradient(itkImageToImageMetricISS3ISS3 self)

        Computes the
        gradient image and assigns it to m_GradientImage 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_ComputeGradient(self)


    def GetModifiableGradientImage(self) -> "itkImageCVD33 *":
        """GetModifiableGradientImage(itkImageToImageMetricISS3ISS3 self) -> itkImageCVD33"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetModifiableGradientImage(self)


    def GetGradientImage(self, *args) -> "itkImageCVD33 *":
        """
        GetGradientImage(itkImageToImageMetricISS3ISS3 self) -> itkImageCVD33
        GetGradientImage(itkImageToImageMetricISS3ISS3 self) -> itkImageCVD33
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetGradientImage(self, *args)


    def SetTransformParameters(self, parameters: 'itkOptimizerParametersD') -> "void":
        """
        SetTransformParameters(itkImageToImageMetricISS3ISS3 self, itkOptimizerParametersD parameters)

        Set the
        parameters defining the Transform. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetTransformParameters(self, parameters)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageToImageMetricISS3ISS3 self)

        Initialize the Metric by
        making sure that all the components are present and plugged together
        correctly 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_Initialize(self)


    def MultiThreadingInitialize(self) -> "void":
        """
        MultiThreadingInitialize(itkImageToImageMetricISS3ISS3 self)

        Initialize
        the components related to supporting multiple threads 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_MultiThreadingInitialize(self)


    def SetNumberOfFixedImageSamples(self, numSamples: 'unsigned long long') -> "void":
        """
        SetNumberOfFixedImageSamples(itkImageToImageMetricISS3ISS3 self, unsigned long long numSamples)

        Number
        of spatial samples to used to compute metric This sets the number of
        samples. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetNumberOfFixedImageSamples(self, numSamples)


    def GetNumberOfFixedImageSamples(self) -> "unsigned long long const &":
        """GetNumberOfFixedImageSamples(itkImageToImageMetricISS3ISS3 self) -> unsigned long long const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetNumberOfFixedImageSamples(self)


    def SetNumberOfSpatialSamples(self, num: 'unsigned long long') -> "void":
        """
        SetNumberOfSpatialSamples(itkImageToImageMetricISS3ISS3 self, unsigned long long num)

        Number of
        spatial samples to used to compute metric This sets the number of
        samples. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetNumberOfSpatialSamples(self, num)


    def GetNumberOfSpatialSamples(self) -> "unsigned long long":
        """GetNumberOfSpatialSamples(itkImageToImageMetricISS3ISS3 self) -> unsigned long long"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetNumberOfSpatialSamples(self)


    def SetFixedImageSamplesIntensityThreshold(self, thresh: 'short const &') -> "void":
        """
        SetFixedImageSamplesIntensityThreshold(itkImageToImageMetricISS3ISS3 self, short const & thresh)

        Minimum fixed-image
        intensity needed for a sample to be used in the metric computation 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetFixedImageSamplesIntensityThreshold(self, thresh)


    def GetFixedImageSamplesIntensityThreshold(self) -> "short const &":
        """GetFixedImageSamplesIntensityThreshold(itkImageToImageMetricISS3ISS3 self) -> short const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetFixedImageSamplesIntensityThreshold(self)


    def SetUseFixedImageSamplesIntensityThreshold(self, useThresh: 'bool') -> "void":
        """SetUseFixedImageSamplesIntensityThreshold(itkImageToImageMetricISS3ISS3 self, bool useThresh)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetUseFixedImageSamplesIntensityThreshold(self, useThresh)


    def GetUseFixedImageSamplesIntensityThreshold(self) -> "bool const &":
        """GetUseFixedImageSamplesIntensityThreshold(itkImageToImageMetricISS3ISS3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetUseFixedImageSamplesIntensityThreshold(self)


    def SetUseAllPixels(self, useAllPixels: 'bool') -> "void":
        """
        SetUseAllPixels(itkImageToImageMetricISS3ISS3 self, bool useAllPixels)

        Select whether the
        metric will be computed using all the pixels on the fixed image
        region, or only using a set of randomly selected pixels. This value
        override IntensityThreshold, Masks, and SequentialSampling. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetUseAllPixels(self, useAllPixels)


    def UseAllPixelsOn(self) -> "void":
        """UseAllPixelsOn(itkImageToImageMetricISS3ISS3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_UseAllPixelsOn(self)


    def UseAllPixelsOff(self) -> "void":
        """UseAllPixelsOff(itkImageToImageMetricISS3ISS3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_UseAllPixelsOff(self)


    def GetUseAllPixels(self) -> "bool const &":
        """GetUseAllPixels(itkImageToImageMetricISS3ISS3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetUseAllPixels(self)


    def SetUseSequentialSampling(self, sequentialSampling: 'bool') -> "void":
        """
        SetUseSequentialSampling(itkImageToImageMetricISS3ISS3 self, bool sequentialSampling)

        If set to
        true, then every pixel in the fixed image will be scanned to determine
        if it should be used in registration metric computation. A pixel will
        be chosen if it meets any mask or threshold limits set. If set to
        false, then UseAllPixels will be set to false. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetUseSequentialSampling(self, sequentialSampling)


    def GetUseSequentialSampling(self) -> "bool const &":
        """GetUseSequentialSampling(itkImageToImageMetricISS3ISS3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetUseSequentialSampling(self)


    def ReinitializeSeed(self, *args) -> "void":
        """
        ReinitializeSeed(itkImageToImageMetricISS3ISS3 self)
        ReinitializeSeed(itkImageToImageMetricISS3ISS3 self, int seed)

        Reinitialize the
        seed of the random number generator that selects the sample of pixels
        used for estimating the image histograms and the joint histogram. By
        nature, this metric is not deterministic, since at each run it may
        select a different set of pixels. By initializing the random number
        generator seed to the same value you can restore determinism. On the
        other hand, calling the method ReinitializeSeed() without arguments
        will use the clock from your machine in order to have a very random
        initialization of the seed. This will indeed increase the non-
        deterministic behavior of the metric. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_ReinitializeSeed(self, *args)


    def SetUseCachingOfBSplineWeights(self, _arg: 'bool const') -> "void":
        """
        SetUseCachingOfBSplineWeights(itkImageToImageMetricISS3ISS3 self, bool const _arg)

        This
        boolean flag is only relevant when this metric is used along with a
        BSplineBaseTransform. The flag enables/disables the caching of values
        computed when a physical point is mapped through the
        BSplineBaseTransform. In particular it will cache the values of the
        BSpline weights for that points, and the indexes indicating what
        BSpline-grid nodes are relevant for that specific point. This caching
        is made optional due to the fact that the memory arrays used for the
        caching can reach large sizes even for moderate image size problems.
        For example, for a 3D image of 256^3, using 20% of pixels, these
        arrays will take about 1 Gigabyte of RAM for storage. The ratio of
        computing time between using the cache or not using the cache can
        reach 1:5, meaning that using the caching can provide a five times
        speed up. It is therefore, interesting to enable the caching, if
        enough memory is available for it. The caching is enabled by default,
        in order to preserve backward compatibility with previous versions of
        ITK. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetUseCachingOfBSplineWeights(self, _arg)


    def GetUseCachingOfBSplineWeights(self) -> "bool const &":
        """GetUseCachingOfBSplineWeights(itkImageToImageMetricISS3ISS3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetUseCachingOfBSplineWeights(self)


    def UseCachingOfBSplineWeightsOn(self) -> "void":
        """UseCachingOfBSplineWeightsOn(itkImageToImageMetricISS3ISS3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_UseCachingOfBSplineWeightsOn(self)


    def UseCachingOfBSplineWeightsOff(self) -> "void":
        """UseCachingOfBSplineWeightsOff(itkImageToImageMetricISS3ISS3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_UseCachingOfBSplineWeightsOff(self)


    def GetModifiableThreader(self) -> "itkMultiThreader *":
        """GetModifiableThreader(itkImageToImageMetricISS3ISS3 self) -> itkMultiThreader"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetModifiableThreader(self)


    def GetThreader(self, *args) -> "itkMultiThreader *":
        """
        GetThreader(itkImageToImageMetricISS3ISS3 self) -> itkMultiThreader
        GetThreader(itkImageToImageMetricISS3ISS3 self) -> itkMultiThreader
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetThreader(self, *args)


    def GetThreaderTransform(self) -> "itkTransformD33_Pointer const *":
        """GetThreaderTransform(itkImageToImageMetricISS3ISS3 self) -> itkTransformD33_Pointer const *"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetThreaderTransform(self)

    __swig_destroy__ = _itkImageToImageMetricPython.delete_itkImageToImageMetricISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkImageToImageMetricISS3ISS3 *":
        """cast(itkLightObject obj) -> itkImageToImageMetricISS3ISS3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageToImageMetricISS3ISS3 *":
        """GetPointer(itkImageToImageMetricISS3ISS3 self) -> itkImageToImageMetricISS3ISS3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageToImageMetricISS3ISS3

        Create a new object of the class itkImageToImageMetricISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageMetricISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageMetricISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageMetricISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageMetricISS3ISS3.SetFixedImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetFixedImage, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetFixedImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetFixedImage, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetMovingImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetMovingImage, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetMovingImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetMovingImage, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetTransform, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetModifiableTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetModifiableTransform, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetTransform, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetInterpolator, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetModifiableInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetModifiableInterpolator, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetInterpolator, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetNumberOfMovingImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetNumberOfMovingImageSamples, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetNumberOfPixelsCounted = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetNumberOfPixelsCounted, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetFixedImageRegion = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetFixedImageRegion, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetFixedImageRegion = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetFixedImageRegion, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetMovingImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetMovingImageMask, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetMovingImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetMovingImageMask, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetFixedImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetFixedImageMask, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetFixedImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetFixedImageMask, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetFixedImageIndexes, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetUseFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetUseFixedImageIndexes, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetUseFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetUseFixedImageIndexes, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetNumberOfThreads = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetNumberOfThreads, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetNumberOfThreads = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetNumberOfThreads, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetComputeGradient, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetComputeGradient, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.ComputeGradientOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_ComputeGradientOn, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.ComputeGradientOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_ComputeGradientOff, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.ComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_ComputeGradient, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetModifiableGradientImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetModifiableGradientImage, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetGradientImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetGradientImage, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetTransformParameters = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetTransformParameters, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.Initialize = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_Initialize, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.MultiThreadingInitialize = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_MultiThreadingInitialize, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetNumberOfFixedImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetNumberOfFixedImageSamples, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetNumberOfFixedImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetNumberOfFixedImageSamples, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetNumberOfSpatialSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetNumberOfSpatialSamples, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetNumberOfSpatialSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetNumberOfSpatialSamples, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetUseFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetUseFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetUseFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetUseFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetUseAllPixels = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetUseAllPixels, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.UseAllPixelsOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_UseAllPixelsOn, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.UseAllPixelsOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_UseAllPixelsOff, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetUseAllPixels = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetUseAllPixels, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetUseSequentialSampling = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetUseSequentialSampling, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetUseSequentialSampling = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetUseSequentialSampling, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.ReinitializeSeed = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_ReinitializeSeed, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.SetUseCachingOfBSplineWeights = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_SetUseCachingOfBSplineWeights, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetUseCachingOfBSplineWeights = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetUseCachingOfBSplineWeights, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.UseCachingOfBSplineWeightsOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_UseCachingOfBSplineWeightsOn, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.UseCachingOfBSplineWeightsOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_UseCachingOfBSplineWeightsOff, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetModifiableThreader = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetModifiableThreader, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetThreader = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetThreader, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetThreaderTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetThreaderTransform, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3.GetPointer = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_GetPointer, None, itkImageToImageMetricISS3ISS3)
itkImageToImageMetricISS3ISS3_swigregister = _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_swigregister
itkImageToImageMetricISS3ISS3_swigregister(itkImageToImageMetricISS3ISS3)

def itkImageToImageMetricISS3ISS3_cast(obj: 'itkLightObject') -> "itkImageToImageMetricISS3ISS3 *":
    """itkImageToImageMetricISS3ISS3_cast(itkLightObject obj) -> itkImageToImageMetricISS3ISS3"""
    return _itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3_cast(obj)

class itkImageToImageMetricIUC2IUC2(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """


    Computes similarity between regions of two images.

    This Class is templated over the type of the two input images. It
    expects a Transform and an Interpolator to be plugged in. This
    particular class is the base class for a hierarchy of similarity
    metrics.

    This class computes a value that measures the similarity between the
    Fixed image and the transformed Moving image. The Interpolator is used
    to compute intensity values on non-grid positions resulting from
    mapping points through the Transform.

    C++ includes: itkImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg: 'itkImageUC2') -> "void":
        """
        SetFixedImage(itkImageToImageMetricIUC2IUC2 self, itkImageUC2 _arg)

        Get/Set the Fixed
        Image. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageUC2 const *":
        """GetFixedImage(itkImageToImageMetricIUC2IUC2 self) -> itkImageUC2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageUC2') -> "void":
        """
        SetMovingImage(itkImageToImageMetricIUC2IUC2 self, itkImageUC2 _arg)

        Get/Set the Moving
        Image. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageUC2 const *":
        """GetMovingImage(itkImageToImageMetricIUC2IUC2 self) -> itkImageUC2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetMovingImage(self)


    def SetTransform(self, _arg: 'itkTransformD22') -> "void":
        """
        SetTransform(itkImageToImageMetricIUC2IUC2 self, itkTransformD22 _arg)

        Connect the Transform.

        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD22 *":
        """GetModifiableTransform(itkImageToImageMetricIUC2IUC2 self) -> itkTransformD22"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD22 *":
        """
        GetTransform(itkImageToImageMetricIUC2IUC2 self) -> itkTransformD22
        GetTransform(itkImageToImageMetricIUC2IUC2 self) -> itkTransformD22
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIUC2D') -> "void":
        """
        SetInterpolator(itkImageToImageMetricIUC2IUC2 self, itkInterpolateImageFunctionIUC2D _arg)

        Connect the
        Interpolator. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIUC2D *":
        """GetModifiableInterpolator(itkImageToImageMetricIUC2IUC2 self) -> itkInterpolateImageFunctionIUC2D"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIUC2D *":
        """
        GetInterpolator(itkImageToImageMetricIUC2IUC2 self) -> itkInterpolateImageFunctionIUC2D
        GetInterpolator(itkImageToImageMetricIUC2IUC2 self) -> itkInterpolateImageFunctionIUC2D
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetInterpolator(self, *args)


    def GetNumberOfMovingImageSamples(self) -> "unsigned long long":
        """
        GetNumberOfMovingImageSamples(itkImageToImageMetricIUC2IUC2 self) -> unsigned long long

        Get
        the number of pixels considered in the computation. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetNumberOfMovingImageSamples(self)


    def GetNumberOfPixelsCounted(self) -> "unsigned long long const &":
        """GetNumberOfPixelsCounted(itkImageToImageMetricIUC2IUC2 self) -> unsigned long long const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetNumberOfPixelsCounted(self)


    def SetFixedImageRegion(self, reg: 'itkImageRegion2') -> "void":
        """
        SetFixedImageRegion(itkImageToImageMetricIUC2IUC2 self, itkImageRegion2 reg)

        Set the region
        over which the metric will be computed 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetFixedImageRegion(self, reg)


    def GetFixedImageRegion(self) -> "itkImageRegion2 const &":
        """
        GetFixedImageRegion(itkImageToImageMetricIUC2IUC2 self) -> itkImageRegion2

        Get the region
        over which the metric will be computed 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetFixedImageRegion(self)


    def SetMovingImageMask(self, *args) -> "void":
        """
        SetMovingImageMask(itkImageToImageMetricIUC2IUC2 self, itkSpatialObject2 _arg)
        SetMovingImageMask(itkImageToImageMetricIUC2IUC2 self, itkSpatialObject2 _arg)

        Set/Get the
        moving image mask. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetMovingImageMask(self, *args)


    def GetMovingImageMask(self) -> "itkSpatialObject2 const *":
        """GetMovingImageMask(itkImageToImageMetricIUC2IUC2 self) -> itkSpatialObject2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetMovingImageMask(self)


    def SetFixedImageMask(self, *args) -> "void":
        """
        SetFixedImageMask(itkImageToImageMetricIUC2IUC2 self, itkSpatialObject2 _arg)
        SetFixedImageMask(itkImageToImageMetricIUC2IUC2 self, itkSpatialObject2 _arg)

        Set/Get the fixed
        image mask. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetFixedImageMask(self, *args)


    def GetFixedImageMask(self) -> "itkSpatialObject2 const *":
        """GetFixedImageMask(itkImageToImageMetricIUC2IUC2 self) -> itkSpatialObject2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetFixedImageMask(self)


    def SetFixedImageIndexes(self, indexes: 'std::vector< itkIndex2,std::allocator< itkIndex2 > > const &') -> "void":
        """
        SetFixedImageIndexes(itkImageToImageMetricIUC2IUC2 self, std::vector< itkIndex2,std::allocator< itkIndex2 > > const & indexes)

        Set the fixed
        image indexes to be used as the samples when computing the match
        metric 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetFixedImageIndexes(self, indexes)


    def SetUseFixedImageIndexes(self, useIndex: 'bool') -> "void":
        """SetUseFixedImageIndexes(itkImageToImageMetricIUC2IUC2 self, bool useIndex)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetUseFixedImageIndexes(self, useIndex)


    def GetUseFixedImageIndexes(self) -> "bool const &":
        """GetUseFixedImageIndexes(itkImageToImageMetricIUC2IUC2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetUseFixedImageIndexes(self)


    def SetNumberOfThreads(self, numberOfThreads: 'unsigned int') -> "void":
        """
        SetNumberOfThreads(itkImageToImageMetricIUC2IUC2 self, unsigned int numberOfThreads)

        Set/Get number
        of threads to use for computations. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetNumberOfThreads(self, numberOfThreads)


    def GetNumberOfThreads(self) -> "unsigned int const &":
        """GetNumberOfThreads(itkImageToImageMetricIUC2IUC2 self) -> unsigned int const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetNumberOfThreads(self)


    def SetComputeGradient(self, _arg: 'bool const') -> "void":
        """
        SetComputeGradient(itkImageToImageMetricIUC2IUC2 self, bool const _arg)

        Set/Get gradient
        computation. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetComputeGradient(self, _arg)


    def GetComputeGradient(self) -> "bool const &":
        """GetComputeGradient(itkImageToImageMetricIUC2IUC2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetComputeGradient(self)


    def ComputeGradientOn(self) -> "void":
        """ComputeGradientOn(itkImageToImageMetricIUC2IUC2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_ComputeGradientOn(self)


    def ComputeGradientOff(self) -> "void":
        """ComputeGradientOff(itkImageToImageMetricIUC2IUC2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_ComputeGradientOff(self)


    def ComputeGradient(self) -> "void":
        """
        ComputeGradient(itkImageToImageMetricIUC2IUC2 self)

        Computes the
        gradient image and assigns it to m_GradientImage 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_ComputeGradient(self)


    def GetModifiableGradientImage(self) -> "itkImageCVD22 *":
        """GetModifiableGradientImage(itkImageToImageMetricIUC2IUC2 self) -> itkImageCVD22"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetModifiableGradientImage(self)


    def GetGradientImage(self, *args) -> "itkImageCVD22 *":
        """
        GetGradientImage(itkImageToImageMetricIUC2IUC2 self) -> itkImageCVD22
        GetGradientImage(itkImageToImageMetricIUC2IUC2 self) -> itkImageCVD22
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetGradientImage(self, *args)


    def SetTransformParameters(self, parameters: 'itkOptimizerParametersD') -> "void":
        """
        SetTransformParameters(itkImageToImageMetricIUC2IUC2 self, itkOptimizerParametersD parameters)

        Set the
        parameters defining the Transform. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetTransformParameters(self, parameters)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageToImageMetricIUC2IUC2 self)

        Initialize the Metric by
        making sure that all the components are present and plugged together
        correctly 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_Initialize(self)


    def MultiThreadingInitialize(self) -> "void":
        """
        MultiThreadingInitialize(itkImageToImageMetricIUC2IUC2 self)

        Initialize
        the components related to supporting multiple threads 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_MultiThreadingInitialize(self)


    def SetNumberOfFixedImageSamples(self, numSamples: 'unsigned long long') -> "void":
        """
        SetNumberOfFixedImageSamples(itkImageToImageMetricIUC2IUC2 self, unsigned long long numSamples)

        Number
        of spatial samples to used to compute metric This sets the number of
        samples. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetNumberOfFixedImageSamples(self, numSamples)


    def GetNumberOfFixedImageSamples(self) -> "unsigned long long const &":
        """GetNumberOfFixedImageSamples(itkImageToImageMetricIUC2IUC2 self) -> unsigned long long const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetNumberOfFixedImageSamples(self)


    def SetNumberOfSpatialSamples(self, num: 'unsigned long long') -> "void":
        """
        SetNumberOfSpatialSamples(itkImageToImageMetricIUC2IUC2 self, unsigned long long num)

        Number of
        spatial samples to used to compute metric This sets the number of
        samples. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetNumberOfSpatialSamples(self, num)


    def GetNumberOfSpatialSamples(self) -> "unsigned long long":
        """GetNumberOfSpatialSamples(itkImageToImageMetricIUC2IUC2 self) -> unsigned long long"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetNumberOfSpatialSamples(self)


    def SetFixedImageSamplesIntensityThreshold(self, thresh: 'unsigned char const &') -> "void":
        """
        SetFixedImageSamplesIntensityThreshold(itkImageToImageMetricIUC2IUC2 self, unsigned char const & thresh)

        Minimum fixed-image
        intensity needed for a sample to be used in the metric computation 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetFixedImageSamplesIntensityThreshold(self, thresh)


    def GetFixedImageSamplesIntensityThreshold(self) -> "unsigned char const &":
        """GetFixedImageSamplesIntensityThreshold(itkImageToImageMetricIUC2IUC2 self) -> unsigned char const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetFixedImageSamplesIntensityThreshold(self)


    def SetUseFixedImageSamplesIntensityThreshold(self, useThresh: 'bool') -> "void":
        """SetUseFixedImageSamplesIntensityThreshold(itkImageToImageMetricIUC2IUC2 self, bool useThresh)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetUseFixedImageSamplesIntensityThreshold(self, useThresh)


    def GetUseFixedImageSamplesIntensityThreshold(self) -> "bool const &":
        """GetUseFixedImageSamplesIntensityThreshold(itkImageToImageMetricIUC2IUC2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetUseFixedImageSamplesIntensityThreshold(self)


    def SetUseAllPixels(self, useAllPixels: 'bool') -> "void":
        """
        SetUseAllPixels(itkImageToImageMetricIUC2IUC2 self, bool useAllPixels)

        Select whether the
        metric will be computed using all the pixels on the fixed image
        region, or only using a set of randomly selected pixels. This value
        override IntensityThreshold, Masks, and SequentialSampling. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetUseAllPixels(self, useAllPixels)


    def UseAllPixelsOn(self) -> "void":
        """UseAllPixelsOn(itkImageToImageMetricIUC2IUC2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_UseAllPixelsOn(self)


    def UseAllPixelsOff(self) -> "void":
        """UseAllPixelsOff(itkImageToImageMetricIUC2IUC2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_UseAllPixelsOff(self)


    def GetUseAllPixels(self) -> "bool const &":
        """GetUseAllPixels(itkImageToImageMetricIUC2IUC2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetUseAllPixels(self)


    def SetUseSequentialSampling(self, sequentialSampling: 'bool') -> "void":
        """
        SetUseSequentialSampling(itkImageToImageMetricIUC2IUC2 self, bool sequentialSampling)

        If set to
        true, then every pixel in the fixed image will be scanned to determine
        if it should be used in registration metric computation. A pixel will
        be chosen if it meets any mask or threshold limits set. If set to
        false, then UseAllPixels will be set to false. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetUseSequentialSampling(self, sequentialSampling)


    def GetUseSequentialSampling(self) -> "bool const &":
        """GetUseSequentialSampling(itkImageToImageMetricIUC2IUC2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetUseSequentialSampling(self)


    def ReinitializeSeed(self, *args) -> "void":
        """
        ReinitializeSeed(itkImageToImageMetricIUC2IUC2 self)
        ReinitializeSeed(itkImageToImageMetricIUC2IUC2 self, int seed)

        Reinitialize the
        seed of the random number generator that selects the sample of pixels
        used for estimating the image histograms and the joint histogram. By
        nature, this metric is not deterministic, since at each run it may
        select a different set of pixels. By initializing the random number
        generator seed to the same value you can restore determinism. On the
        other hand, calling the method ReinitializeSeed() without arguments
        will use the clock from your machine in order to have a very random
        initialization of the seed. This will indeed increase the non-
        deterministic behavior of the metric. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_ReinitializeSeed(self, *args)


    def SetUseCachingOfBSplineWeights(self, _arg: 'bool const') -> "void":
        """
        SetUseCachingOfBSplineWeights(itkImageToImageMetricIUC2IUC2 self, bool const _arg)

        This
        boolean flag is only relevant when this metric is used along with a
        BSplineBaseTransform. The flag enables/disables the caching of values
        computed when a physical point is mapped through the
        BSplineBaseTransform. In particular it will cache the values of the
        BSpline weights for that points, and the indexes indicating what
        BSpline-grid nodes are relevant for that specific point. This caching
        is made optional due to the fact that the memory arrays used for the
        caching can reach large sizes even for moderate image size problems.
        For example, for a 3D image of 256^3, using 20% of pixels, these
        arrays will take about 1 Gigabyte of RAM for storage. The ratio of
        computing time between using the cache or not using the cache can
        reach 1:5, meaning that using the caching can provide a five times
        speed up. It is therefore, interesting to enable the caching, if
        enough memory is available for it. The caching is enabled by default,
        in order to preserve backward compatibility with previous versions of
        ITK. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetUseCachingOfBSplineWeights(self, _arg)


    def GetUseCachingOfBSplineWeights(self) -> "bool const &":
        """GetUseCachingOfBSplineWeights(itkImageToImageMetricIUC2IUC2 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetUseCachingOfBSplineWeights(self)


    def UseCachingOfBSplineWeightsOn(self) -> "void":
        """UseCachingOfBSplineWeightsOn(itkImageToImageMetricIUC2IUC2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_UseCachingOfBSplineWeightsOn(self)


    def UseCachingOfBSplineWeightsOff(self) -> "void":
        """UseCachingOfBSplineWeightsOff(itkImageToImageMetricIUC2IUC2 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_UseCachingOfBSplineWeightsOff(self)


    def GetModifiableThreader(self) -> "itkMultiThreader *":
        """GetModifiableThreader(itkImageToImageMetricIUC2IUC2 self) -> itkMultiThreader"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetModifiableThreader(self)


    def GetThreader(self, *args) -> "itkMultiThreader *":
        """
        GetThreader(itkImageToImageMetricIUC2IUC2 self) -> itkMultiThreader
        GetThreader(itkImageToImageMetricIUC2IUC2 self) -> itkMultiThreader
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetThreader(self, *args)


    def GetThreaderTransform(self) -> "itkTransformD22_Pointer const *":
        """GetThreaderTransform(itkImageToImageMetricIUC2IUC2 self) -> itkTransformD22_Pointer const *"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetThreaderTransform(self)

    __swig_destroy__ = _itkImageToImageMetricPython.delete_itkImageToImageMetricIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkImageToImageMetricIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkImageToImageMetricIUC2IUC2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageToImageMetricIUC2IUC2 *":
        """GetPointer(itkImageToImageMetricIUC2IUC2 self) -> itkImageToImageMetricIUC2IUC2"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageToImageMetricIUC2IUC2

        Create a new object of the class itkImageToImageMetricIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageMetricIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageMetricIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageMetricIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageMetricIUC2IUC2.SetFixedImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetFixedImage, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetFixedImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetFixedImage, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetMovingImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetMovingImage, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetMovingImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetMovingImage, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetTransform, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetModifiableTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetModifiableTransform, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetTransform, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetInterpolator, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetModifiableInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetModifiableInterpolator, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetInterpolator, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetNumberOfMovingImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetNumberOfMovingImageSamples, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetNumberOfPixelsCounted = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetNumberOfPixelsCounted, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetFixedImageRegion = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetFixedImageRegion, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetFixedImageRegion = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetFixedImageRegion, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetMovingImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetMovingImageMask, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetMovingImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetMovingImageMask, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetFixedImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetFixedImageMask, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetFixedImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetFixedImageMask, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetFixedImageIndexes, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetUseFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetUseFixedImageIndexes, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetUseFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetUseFixedImageIndexes, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetNumberOfThreads = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetNumberOfThreads, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetNumberOfThreads = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetNumberOfThreads, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetComputeGradient, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetComputeGradient, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.ComputeGradientOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_ComputeGradientOn, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.ComputeGradientOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_ComputeGradientOff, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.ComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_ComputeGradient, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetModifiableGradientImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetModifiableGradientImage, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetGradientImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetGradientImage, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetTransformParameters = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetTransformParameters, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.Initialize = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_Initialize, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.MultiThreadingInitialize = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_MultiThreadingInitialize, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetNumberOfFixedImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetNumberOfFixedImageSamples, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetNumberOfFixedImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetNumberOfFixedImageSamples, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetNumberOfSpatialSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetNumberOfSpatialSamples, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetNumberOfSpatialSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetNumberOfSpatialSamples, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetUseFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetUseFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetUseFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetUseFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetUseAllPixels = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetUseAllPixels, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.UseAllPixelsOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_UseAllPixelsOn, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.UseAllPixelsOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_UseAllPixelsOff, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetUseAllPixels = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetUseAllPixels, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetUseSequentialSampling = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetUseSequentialSampling, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetUseSequentialSampling = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetUseSequentialSampling, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.ReinitializeSeed = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_ReinitializeSeed, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.SetUseCachingOfBSplineWeights = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_SetUseCachingOfBSplineWeights, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetUseCachingOfBSplineWeights = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetUseCachingOfBSplineWeights, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.UseCachingOfBSplineWeightsOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_UseCachingOfBSplineWeightsOn, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.UseCachingOfBSplineWeightsOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_UseCachingOfBSplineWeightsOff, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetModifiableThreader = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetModifiableThreader, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetThreader = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetThreader, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetThreaderTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetThreaderTransform, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2.GetPointer = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_GetPointer, None, itkImageToImageMetricIUC2IUC2)
itkImageToImageMetricIUC2IUC2_swigregister = _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_swigregister
itkImageToImageMetricIUC2IUC2_swigregister(itkImageToImageMetricIUC2IUC2)

def itkImageToImageMetricIUC2IUC2_cast(obj: 'itkLightObject') -> "itkImageToImageMetricIUC2IUC2 *":
    """itkImageToImageMetricIUC2IUC2_cast(itkLightObject obj) -> itkImageToImageMetricIUC2IUC2"""
    return _itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2_cast(obj)

class itkImageToImageMetricIUC3IUC3(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """


    Computes similarity between regions of two images.

    This Class is templated over the type of the two input images. It
    expects a Transform and an Interpolator to be plugged in. This
    particular class is the base class for a hierarchy of similarity
    metrics.

    This class computes a value that measures the similarity between the
    Fixed image and the transformed Moving image. The Interpolator is used
    to compute intensity values on non-grid positions resulting from
    mapping points through the Transform.

    C++ includes: itkImageToImageMetric.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFixedImage(self, _arg: 'itkImageUC3') -> "void":
        """
        SetFixedImage(itkImageToImageMetricIUC3IUC3 self, itkImageUC3 _arg)

        Get/Set the Fixed
        Image. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageUC3 const *":
        """GetFixedImage(itkImageToImageMetricIUC3IUC3 self) -> itkImageUC3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageUC3') -> "void":
        """
        SetMovingImage(itkImageToImageMetricIUC3IUC3 self, itkImageUC3 _arg)

        Get/Set the Moving
        Image. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageUC3 const *":
        """GetMovingImage(itkImageToImageMetricIUC3IUC3 self) -> itkImageUC3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetMovingImage(self)


    def SetTransform(self, _arg: 'itkTransformD33') -> "void":
        """
        SetTransform(itkImageToImageMetricIUC3IUC3 self, itkTransformD33 _arg)

        Connect the Transform.

        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetTransform(self, _arg)


    def GetModifiableTransform(self) -> "itkTransformD33 *":
        """GetModifiableTransform(itkImageToImageMetricIUC3IUC3 self) -> itkTransformD33"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetModifiableTransform(self)


    def GetTransform(self, *args) -> "itkTransformD33 *":
        """
        GetTransform(itkImageToImageMetricIUC3IUC3 self) -> itkTransformD33
        GetTransform(itkImageToImageMetricIUC3IUC3 self) -> itkTransformD33
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetTransform(self, *args)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIUC3D') -> "void":
        """
        SetInterpolator(itkImageToImageMetricIUC3IUC3 self, itkInterpolateImageFunctionIUC3D _arg)

        Connect the
        Interpolator. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIUC3D *":
        """GetModifiableInterpolator(itkImageToImageMetricIUC3IUC3 self) -> itkInterpolateImageFunctionIUC3D"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIUC3D *":
        """
        GetInterpolator(itkImageToImageMetricIUC3IUC3 self) -> itkInterpolateImageFunctionIUC3D
        GetInterpolator(itkImageToImageMetricIUC3IUC3 self) -> itkInterpolateImageFunctionIUC3D
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetInterpolator(self, *args)


    def GetNumberOfMovingImageSamples(self) -> "unsigned long long":
        """
        GetNumberOfMovingImageSamples(itkImageToImageMetricIUC3IUC3 self) -> unsigned long long

        Get
        the number of pixels considered in the computation. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetNumberOfMovingImageSamples(self)


    def GetNumberOfPixelsCounted(self) -> "unsigned long long const &":
        """GetNumberOfPixelsCounted(itkImageToImageMetricIUC3IUC3 self) -> unsigned long long const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetNumberOfPixelsCounted(self)


    def SetFixedImageRegion(self, reg: 'itkImageRegion3') -> "void":
        """
        SetFixedImageRegion(itkImageToImageMetricIUC3IUC3 self, itkImageRegion3 reg)

        Set the region
        over which the metric will be computed 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetFixedImageRegion(self, reg)


    def GetFixedImageRegion(self) -> "itkImageRegion3 const &":
        """
        GetFixedImageRegion(itkImageToImageMetricIUC3IUC3 self) -> itkImageRegion3

        Get the region
        over which the metric will be computed 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetFixedImageRegion(self)


    def SetMovingImageMask(self, *args) -> "void":
        """
        SetMovingImageMask(itkImageToImageMetricIUC3IUC3 self, itkSpatialObject3 _arg)
        SetMovingImageMask(itkImageToImageMetricIUC3IUC3 self, itkSpatialObject3 _arg)

        Set/Get the
        moving image mask. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetMovingImageMask(self, *args)


    def GetMovingImageMask(self) -> "itkSpatialObject3 const *":
        """GetMovingImageMask(itkImageToImageMetricIUC3IUC3 self) -> itkSpatialObject3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetMovingImageMask(self)


    def SetFixedImageMask(self, *args) -> "void":
        """
        SetFixedImageMask(itkImageToImageMetricIUC3IUC3 self, itkSpatialObject3 _arg)
        SetFixedImageMask(itkImageToImageMetricIUC3IUC3 self, itkSpatialObject3 _arg)

        Set/Get the fixed
        image mask. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetFixedImageMask(self, *args)


    def GetFixedImageMask(self) -> "itkSpatialObject3 const *":
        """GetFixedImageMask(itkImageToImageMetricIUC3IUC3 self) -> itkSpatialObject3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetFixedImageMask(self)


    def SetFixedImageIndexes(self, indexes: 'std::vector< itkIndex3,std::allocator< itkIndex3 > > const &') -> "void":
        """
        SetFixedImageIndexes(itkImageToImageMetricIUC3IUC3 self, std::vector< itkIndex3,std::allocator< itkIndex3 > > const & indexes)

        Set the fixed
        image indexes to be used as the samples when computing the match
        metric 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetFixedImageIndexes(self, indexes)


    def SetUseFixedImageIndexes(self, useIndex: 'bool') -> "void":
        """SetUseFixedImageIndexes(itkImageToImageMetricIUC3IUC3 self, bool useIndex)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetUseFixedImageIndexes(self, useIndex)


    def GetUseFixedImageIndexes(self) -> "bool const &":
        """GetUseFixedImageIndexes(itkImageToImageMetricIUC3IUC3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetUseFixedImageIndexes(self)


    def SetNumberOfThreads(self, numberOfThreads: 'unsigned int') -> "void":
        """
        SetNumberOfThreads(itkImageToImageMetricIUC3IUC3 self, unsigned int numberOfThreads)

        Set/Get number
        of threads to use for computations. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetNumberOfThreads(self, numberOfThreads)


    def GetNumberOfThreads(self) -> "unsigned int const &":
        """GetNumberOfThreads(itkImageToImageMetricIUC3IUC3 self) -> unsigned int const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetNumberOfThreads(self)


    def SetComputeGradient(self, _arg: 'bool const') -> "void":
        """
        SetComputeGradient(itkImageToImageMetricIUC3IUC3 self, bool const _arg)

        Set/Get gradient
        computation. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetComputeGradient(self, _arg)


    def GetComputeGradient(self) -> "bool const &":
        """GetComputeGradient(itkImageToImageMetricIUC3IUC3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetComputeGradient(self)


    def ComputeGradientOn(self) -> "void":
        """ComputeGradientOn(itkImageToImageMetricIUC3IUC3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_ComputeGradientOn(self)


    def ComputeGradientOff(self) -> "void":
        """ComputeGradientOff(itkImageToImageMetricIUC3IUC3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_ComputeGradientOff(self)


    def ComputeGradient(self) -> "void":
        """
        ComputeGradient(itkImageToImageMetricIUC3IUC3 self)

        Computes the
        gradient image and assigns it to m_GradientImage 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_ComputeGradient(self)


    def GetModifiableGradientImage(self) -> "itkImageCVD33 *":
        """GetModifiableGradientImage(itkImageToImageMetricIUC3IUC3 self) -> itkImageCVD33"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetModifiableGradientImage(self)


    def GetGradientImage(self, *args) -> "itkImageCVD33 *":
        """
        GetGradientImage(itkImageToImageMetricIUC3IUC3 self) -> itkImageCVD33
        GetGradientImage(itkImageToImageMetricIUC3IUC3 self) -> itkImageCVD33
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetGradientImage(self, *args)


    def SetTransformParameters(self, parameters: 'itkOptimizerParametersD') -> "void":
        """
        SetTransformParameters(itkImageToImageMetricIUC3IUC3 self, itkOptimizerParametersD parameters)

        Set the
        parameters defining the Transform. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetTransformParameters(self, parameters)


    def Initialize(self) -> "void":
        """
        Initialize(itkImageToImageMetricIUC3IUC3 self)

        Initialize the Metric by
        making sure that all the components are present and plugged together
        correctly 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_Initialize(self)


    def MultiThreadingInitialize(self) -> "void":
        """
        MultiThreadingInitialize(itkImageToImageMetricIUC3IUC3 self)

        Initialize
        the components related to supporting multiple threads 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_MultiThreadingInitialize(self)


    def SetNumberOfFixedImageSamples(self, numSamples: 'unsigned long long') -> "void":
        """
        SetNumberOfFixedImageSamples(itkImageToImageMetricIUC3IUC3 self, unsigned long long numSamples)

        Number
        of spatial samples to used to compute metric This sets the number of
        samples. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetNumberOfFixedImageSamples(self, numSamples)


    def GetNumberOfFixedImageSamples(self) -> "unsigned long long const &":
        """GetNumberOfFixedImageSamples(itkImageToImageMetricIUC3IUC3 self) -> unsigned long long const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetNumberOfFixedImageSamples(self)


    def SetNumberOfSpatialSamples(self, num: 'unsigned long long') -> "void":
        """
        SetNumberOfSpatialSamples(itkImageToImageMetricIUC3IUC3 self, unsigned long long num)

        Number of
        spatial samples to used to compute metric This sets the number of
        samples. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetNumberOfSpatialSamples(self, num)


    def GetNumberOfSpatialSamples(self) -> "unsigned long long":
        """GetNumberOfSpatialSamples(itkImageToImageMetricIUC3IUC3 self) -> unsigned long long"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetNumberOfSpatialSamples(self)


    def SetFixedImageSamplesIntensityThreshold(self, thresh: 'unsigned char const &') -> "void":
        """
        SetFixedImageSamplesIntensityThreshold(itkImageToImageMetricIUC3IUC3 self, unsigned char const & thresh)

        Minimum fixed-image
        intensity needed for a sample to be used in the metric computation 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetFixedImageSamplesIntensityThreshold(self, thresh)


    def GetFixedImageSamplesIntensityThreshold(self) -> "unsigned char const &":
        """GetFixedImageSamplesIntensityThreshold(itkImageToImageMetricIUC3IUC3 self) -> unsigned char const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetFixedImageSamplesIntensityThreshold(self)


    def SetUseFixedImageSamplesIntensityThreshold(self, useThresh: 'bool') -> "void":
        """SetUseFixedImageSamplesIntensityThreshold(itkImageToImageMetricIUC3IUC3 self, bool useThresh)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetUseFixedImageSamplesIntensityThreshold(self, useThresh)


    def GetUseFixedImageSamplesIntensityThreshold(self) -> "bool const &":
        """GetUseFixedImageSamplesIntensityThreshold(itkImageToImageMetricIUC3IUC3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetUseFixedImageSamplesIntensityThreshold(self)


    def SetUseAllPixels(self, useAllPixels: 'bool') -> "void":
        """
        SetUseAllPixels(itkImageToImageMetricIUC3IUC3 self, bool useAllPixels)

        Select whether the
        metric will be computed using all the pixels on the fixed image
        region, or only using a set of randomly selected pixels. This value
        override IntensityThreshold, Masks, and SequentialSampling. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetUseAllPixels(self, useAllPixels)


    def UseAllPixelsOn(self) -> "void":
        """UseAllPixelsOn(itkImageToImageMetricIUC3IUC3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_UseAllPixelsOn(self)


    def UseAllPixelsOff(self) -> "void":
        """UseAllPixelsOff(itkImageToImageMetricIUC3IUC3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_UseAllPixelsOff(self)


    def GetUseAllPixels(self) -> "bool const &":
        """GetUseAllPixels(itkImageToImageMetricIUC3IUC3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetUseAllPixels(self)


    def SetUseSequentialSampling(self, sequentialSampling: 'bool') -> "void":
        """
        SetUseSequentialSampling(itkImageToImageMetricIUC3IUC3 self, bool sequentialSampling)

        If set to
        true, then every pixel in the fixed image will be scanned to determine
        if it should be used in registration metric computation. A pixel will
        be chosen if it meets any mask or threshold limits set. If set to
        false, then UseAllPixels will be set to false. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetUseSequentialSampling(self, sequentialSampling)


    def GetUseSequentialSampling(self) -> "bool const &":
        """GetUseSequentialSampling(itkImageToImageMetricIUC3IUC3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetUseSequentialSampling(self)


    def ReinitializeSeed(self, *args) -> "void":
        """
        ReinitializeSeed(itkImageToImageMetricIUC3IUC3 self)
        ReinitializeSeed(itkImageToImageMetricIUC3IUC3 self, int seed)

        Reinitialize the
        seed of the random number generator that selects the sample of pixels
        used for estimating the image histograms and the joint histogram. By
        nature, this metric is not deterministic, since at each run it may
        select a different set of pixels. By initializing the random number
        generator seed to the same value you can restore determinism. On the
        other hand, calling the method ReinitializeSeed() without arguments
        will use the clock from your machine in order to have a very random
        initialization of the seed. This will indeed increase the non-
        deterministic behavior of the metric. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_ReinitializeSeed(self, *args)


    def SetUseCachingOfBSplineWeights(self, _arg: 'bool const') -> "void":
        """
        SetUseCachingOfBSplineWeights(itkImageToImageMetricIUC3IUC3 self, bool const _arg)

        This
        boolean flag is only relevant when this metric is used along with a
        BSplineBaseTransform. The flag enables/disables the caching of values
        computed when a physical point is mapped through the
        BSplineBaseTransform. In particular it will cache the values of the
        BSpline weights for that points, and the indexes indicating what
        BSpline-grid nodes are relevant for that specific point. This caching
        is made optional due to the fact that the memory arrays used for the
        caching can reach large sizes even for moderate image size problems.
        For example, for a 3D image of 256^3, using 20% of pixels, these
        arrays will take about 1 Gigabyte of RAM for storage. The ratio of
        computing time between using the cache or not using the cache can
        reach 1:5, meaning that using the caching can provide a five times
        speed up. It is therefore, interesting to enable the caching, if
        enough memory is available for it. The caching is enabled by default,
        in order to preserve backward compatibility with previous versions of
        ITK. 
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetUseCachingOfBSplineWeights(self, _arg)


    def GetUseCachingOfBSplineWeights(self) -> "bool const &":
        """GetUseCachingOfBSplineWeights(itkImageToImageMetricIUC3IUC3 self) -> bool const &"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetUseCachingOfBSplineWeights(self)


    def UseCachingOfBSplineWeightsOn(self) -> "void":
        """UseCachingOfBSplineWeightsOn(itkImageToImageMetricIUC3IUC3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_UseCachingOfBSplineWeightsOn(self)


    def UseCachingOfBSplineWeightsOff(self) -> "void":
        """UseCachingOfBSplineWeightsOff(itkImageToImageMetricIUC3IUC3 self)"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_UseCachingOfBSplineWeightsOff(self)


    def GetModifiableThreader(self) -> "itkMultiThreader *":
        """GetModifiableThreader(itkImageToImageMetricIUC3IUC3 self) -> itkMultiThreader"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetModifiableThreader(self)


    def GetThreader(self, *args) -> "itkMultiThreader *":
        """
        GetThreader(itkImageToImageMetricIUC3IUC3 self) -> itkMultiThreader
        GetThreader(itkImageToImageMetricIUC3IUC3 self) -> itkMultiThreader
        """
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetThreader(self, *args)


    def GetThreaderTransform(self) -> "itkTransformD33_Pointer const *":
        """GetThreaderTransform(itkImageToImageMetricIUC3IUC3 self) -> itkTransformD33_Pointer const *"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetThreaderTransform(self)

    __swig_destroy__ = _itkImageToImageMetricPython.delete_itkImageToImageMetricIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkImageToImageMetricIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkImageToImageMetricIUC3IUC3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkImageToImageMetricIUC3IUC3 *":
        """GetPointer(itkImageToImageMetricIUC3IUC3 self) -> itkImageToImageMetricIUC3IUC3"""
        return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkImageToImageMetricIUC3IUC3

        Create a new object of the class itkImageToImageMetricIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageMetricIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageMetricIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageMetricIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageMetricIUC3IUC3.SetFixedImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetFixedImage, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetFixedImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetFixedImage, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetMovingImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetMovingImage, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetMovingImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetMovingImage, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetTransform, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetModifiableTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetModifiableTransform, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetTransform, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetInterpolator, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetModifiableInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetModifiableInterpolator, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetInterpolator = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetInterpolator, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetNumberOfMovingImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetNumberOfMovingImageSamples, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetNumberOfPixelsCounted = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetNumberOfPixelsCounted, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetFixedImageRegion = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetFixedImageRegion, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetFixedImageRegion = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetFixedImageRegion, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetMovingImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetMovingImageMask, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetMovingImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetMovingImageMask, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetFixedImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetFixedImageMask, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetFixedImageMask = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetFixedImageMask, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetFixedImageIndexes, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetUseFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetUseFixedImageIndexes, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetUseFixedImageIndexes = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetUseFixedImageIndexes, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetNumberOfThreads = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetNumberOfThreads, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetNumberOfThreads = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetNumberOfThreads, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetComputeGradient, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetComputeGradient, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.ComputeGradientOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_ComputeGradientOn, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.ComputeGradientOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_ComputeGradientOff, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.ComputeGradient = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_ComputeGradient, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetModifiableGradientImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetModifiableGradientImage, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetGradientImage = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetGradientImage, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetTransformParameters = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetTransformParameters, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.Initialize = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_Initialize, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.MultiThreadingInitialize = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_MultiThreadingInitialize, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetNumberOfFixedImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetNumberOfFixedImageSamples, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetNumberOfFixedImageSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetNumberOfFixedImageSamples, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetNumberOfSpatialSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetNumberOfSpatialSamples, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetNumberOfSpatialSamples = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetNumberOfSpatialSamples, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetUseFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetUseFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetUseFixedImageSamplesIntensityThreshold = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetUseFixedImageSamplesIntensityThreshold, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetUseAllPixels = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetUseAllPixels, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.UseAllPixelsOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_UseAllPixelsOn, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.UseAllPixelsOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_UseAllPixelsOff, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetUseAllPixels = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetUseAllPixels, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetUseSequentialSampling = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetUseSequentialSampling, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetUseSequentialSampling = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetUseSequentialSampling, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.ReinitializeSeed = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_ReinitializeSeed, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.SetUseCachingOfBSplineWeights = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_SetUseCachingOfBSplineWeights, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetUseCachingOfBSplineWeights = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetUseCachingOfBSplineWeights, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.UseCachingOfBSplineWeightsOn = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_UseCachingOfBSplineWeightsOn, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.UseCachingOfBSplineWeightsOff = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_UseCachingOfBSplineWeightsOff, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetModifiableThreader = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetModifiableThreader, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetThreader = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetThreader, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetThreaderTransform = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetThreaderTransform, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3.GetPointer = new_instancemethod(_itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_GetPointer, None, itkImageToImageMetricIUC3IUC3)
itkImageToImageMetricIUC3IUC3_swigregister = _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_swigregister
itkImageToImageMetricIUC3IUC3_swigregister(itkImageToImageMetricIUC3IUC3)

def itkImageToImageMetricIUC3IUC3_cast(obj: 'itkLightObject') -> "itkImageToImageMetricIUC3IUC3 *":
    """itkImageToImageMetricIUC3IUC3_cast(itkLightObject obj) -> itkImageToImageMetricIUC3IUC3"""
    return _itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3_cast(obj)



