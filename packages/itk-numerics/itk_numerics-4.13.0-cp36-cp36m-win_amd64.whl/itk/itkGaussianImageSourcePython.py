# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkGaussianImageSourcePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkGaussianImageSourcePython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkGaussianImageSourcePython')
    _itkGaussianImageSourcePython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkGaussianImageSourcePython', [dirname(__file__)])
        except ImportError:
            import _itkGaussianImageSourcePython
            return _itkGaussianImageSourcePython
        try:
            _mod = imp.load_module('_itkGaussianImageSourcePython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkGaussianImageSourcePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkGaussianImageSourcePython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkParametricImageSourcePython
import itkGenerateImageSourcePython
import itkSizePython
import pyBasePython
import itkPointPython
import itkFixedArrayPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkVectorPython
import itkIndexPython
import itkOffsetPython
import itkImageSourcePython
import ITKCommonBasePython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImagePython
import itkCovariantVectorPython
import itkImageRegionPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkImageSourceCommonPython
import itkArrayPython

def itkGaussianImageSourceIF3_New():
  return itkGaussianImageSourceIF3.New()


def itkGaussianImageSourceIF2_New():
  return itkGaussianImageSourceIF2.New()


def itkGaussianImageSourceIUC3_New():
  return itkGaussianImageSourceIUC3.New()


def itkGaussianImageSourceIUC2_New():
  return itkGaussianImageSourceIUC2.New()


def itkGaussianImageSourceISS3_New():
  return itkGaussianImageSourceISS3.New()


def itkGaussianImageSourceISS2_New():
  return itkGaussianImageSourceISS2.New()

class itkGaussianImageSourceIF2(itkParametricImageSourcePython.itkParametricImageSourceIF2):
    """


    Generate an n-dimensional image of a Gaussian.

    GaussianImageSource generates an image of a Gaussian. m_Normalized
    determines whether or not the Gaussian is normalized (whether or not
    the sum over infinite space is 1.0) When creating an image, it is
    preferable to not normalize the Gaussian m_Scale scales the output of
    the Gaussian to span a range larger than 0->1, and is typically set to
    the maximum value of the output data type (for instance, 255 for
    uchars)

    The output image may be of any dimension.

    C++ includes: itkGaussianImageSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianImageSourceIF2_Pointer":
        """__New_orig__() -> itkGaussianImageSourceIF2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianImageSourceIF2_Pointer":
        """Clone(itkGaussianImageSourceIF2 self) -> itkGaussianImageSourceIF2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_Clone(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """
        SetScale(itkGaussianImageSourceIF2 self, double const _arg)

        Gets and sets for Gaussian
        parameters Set/Get the scale factor to multiply the true value of the
        Gaussian. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_SetScale(self, _arg)


    def GetScale(self) -> "double const &":
        """GetScale(itkGaussianImageSourceIF2 self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_GetScale(self)


    def SetNormalized(self, _arg: 'bool const') -> "void":
        """
        SetNormalized(itkGaussianImageSourceIF2 self, bool const _arg)

        Set/Get whether or
        not to normalize the Gaussian. Default is false. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_SetNormalized(self, _arg)


    def GetNormalized(self) -> "bool const &":
        """GetNormalized(itkGaussianImageSourceIF2 self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_GetNormalized(self)


    def NormalizedOn(self) -> "void":
        """NormalizedOn(itkGaussianImageSourceIF2 self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_NormalizedOn(self)


    def NormalizedOff(self) -> "void":
        """NormalizedOff(itkGaussianImageSourceIF2 self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_NormalizedOff(self)


    def SetSigma(self, _arg: 'itkFixedArrayD2') -> "void":
        """
        SetSigma(itkGaussianImageSourceIF2 self, itkFixedArrayD2 _arg)

        Set/Get the standard
        deviation in each direction. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_SetSigma(self, _arg)


    def GetSigma(self) -> "itkFixedArrayD2 const &":
        """GetSigma(itkGaussianImageSourceIF2 self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_GetSigma(self)


    def SetMean(self, _arg: 'itkFixedArrayD2') -> "void":
        """
        SetMean(itkGaussianImageSourceIF2 self, itkFixedArrayD2 _arg)

        Set/Get the mean in each
        direction. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_SetMean(self, _arg)


    def GetMean(self) -> "itkFixedArrayD2 const &":
        """GetMean(itkGaussianImageSourceIF2 self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_GetMean(self)

    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceIF2

    def cast(obj: 'itkLightObject') -> "itkGaussianImageSourceIF2 *":
        """cast(itkLightObject obj) -> itkGaussianImageSourceIF2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkGaussianImageSourceIF2 *":
        """GetPointer(itkGaussianImageSourceIF2 self) -> itkGaussianImageSourceIF2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIF2

        Create a new object of the class itkGaussianImageSourceIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianImageSourceIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianImageSourceIF2.Clone = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF2_Clone, None, itkGaussianImageSourceIF2)
itkGaussianImageSourceIF2.SetScale = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF2_SetScale, None, itkGaussianImageSourceIF2)
itkGaussianImageSourceIF2.GetScale = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF2_GetScale, None, itkGaussianImageSourceIF2)
itkGaussianImageSourceIF2.SetNormalized = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF2_SetNormalized, None, itkGaussianImageSourceIF2)
itkGaussianImageSourceIF2.GetNormalized = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF2_GetNormalized, None, itkGaussianImageSourceIF2)
itkGaussianImageSourceIF2.NormalizedOn = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF2_NormalizedOn, None, itkGaussianImageSourceIF2)
itkGaussianImageSourceIF2.NormalizedOff = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF2_NormalizedOff, None, itkGaussianImageSourceIF2)
itkGaussianImageSourceIF2.SetSigma = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF2_SetSigma, None, itkGaussianImageSourceIF2)
itkGaussianImageSourceIF2.GetSigma = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF2_GetSigma, None, itkGaussianImageSourceIF2)
itkGaussianImageSourceIF2.SetMean = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF2_SetMean, None, itkGaussianImageSourceIF2)
itkGaussianImageSourceIF2.GetMean = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF2_GetMean, None, itkGaussianImageSourceIF2)
itkGaussianImageSourceIF2.GetPointer = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF2_GetPointer, None, itkGaussianImageSourceIF2)
itkGaussianImageSourceIF2_swigregister = _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_swigregister
itkGaussianImageSourceIF2_swigregister(itkGaussianImageSourceIF2)

def itkGaussianImageSourceIF2___New_orig__() -> "itkGaussianImageSourceIF2_Pointer":
    """itkGaussianImageSourceIF2___New_orig__() -> itkGaussianImageSourceIF2_Pointer"""
    return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2___New_orig__()

def itkGaussianImageSourceIF2_cast(obj: 'itkLightObject') -> "itkGaussianImageSourceIF2 *":
    """itkGaussianImageSourceIF2_cast(itkLightObject obj) -> itkGaussianImageSourceIF2"""
    return _itkGaussianImageSourcePython.itkGaussianImageSourceIF2_cast(obj)

class itkGaussianImageSourceIF3(itkParametricImageSourcePython.itkParametricImageSourceIF3):
    """


    Generate an n-dimensional image of a Gaussian.

    GaussianImageSource generates an image of a Gaussian. m_Normalized
    determines whether or not the Gaussian is normalized (whether or not
    the sum over infinite space is 1.0) When creating an image, it is
    preferable to not normalize the Gaussian m_Scale scales the output of
    the Gaussian to span a range larger than 0->1, and is typically set to
    the maximum value of the output data type (for instance, 255 for
    uchars)

    The output image may be of any dimension.

    C++ includes: itkGaussianImageSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianImageSourceIF3_Pointer":
        """__New_orig__() -> itkGaussianImageSourceIF3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianImageSourceIF3_Pointer":
        """Clone(itkGaussianImageSourceIF3 self) -> itkGaussianImageSourceIF3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_Clone(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """
        SetScale(itkGaussianImageSourceIF3 self, double const _arg)

        Gets and sets for Gaussian
        parameters Set/Get the scale factor to multiply the true value of the
        Gaussian. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_SetScale(self, _arg)


    def GetScale(self) -> "double const &":
        """GetScale(itkGaussianImageSourceIF3 self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_GetScale(self)


    def SetNormalized(self, _arg: 'bool const') -> "void":
        """
        SetNormalized(itkGaussianImageSourceIF3 self, bool const _arg)

        Set/Get whether or
        not to normalize the Gaussian. Default is false. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_SetNormalized(self, _arg)


    def GetNormalized(self) -> "bool const &":
        """GetNormalized(itkGaussianImageSourceIF3 self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_GetNormalized(self)


    def NormalizedOn(self) -> "void":
        """NormalizedOn(itkGaussianImageSourceIF3 self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_NormalizedOn(self)


    def NormalizedOff(self) -> "void":
        """NormalizedOff(itkGaussianImageSourceIF3 self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_NormalizedOff(self)


    def SetSigma(self, _arg: 'itkFixedArrayD3') -> "void":
        """
        SetSigma(itkGaussianImageSourceIF3 self, itkFixedArrayD3 _arg)

        Set/Get the standard
        deviation in each direction. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_SetSigma(self, _arg)


    def GetSigma(self) -> "itkFixedArrayD3 const &":
        """GetSigma(itkGaussianImageSourceIF3 self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_GetSigma(self)


    def SetMean(self, _arg: 'itkFixedArrayD3') -> "void":
        """
        SetMean(itkGaussianImageSourceIF3 self, itkFixedArrayD3 _arg)

        Set/Get the mean in each
        direction. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_SetMean(self, _arg)


    def GetMean(self) -> "itkFixedArrayD3 const &":
        """GetMean(itkGaussianImageSourceIF3 self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_GetMean(self)

    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceIF3

    def cast(obj: 'itkLightObject') -> "itkGaussianImageSourceIF3 *":
        """cast(itkLightObject obj) -> itkGaussianImageSourceIF3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkGaussianImageSourceIF3 *":
        """GetPointer(itkGaussianImageSourceIF3 self) -> itkGaussianImageSourceIF3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIF3

        Create a new object of the class itkGaussianImageSourceIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianImageSourceIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianImageSourceIF3.Clone = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF3_Clone, None, itkGaussianImageSourceIF3)
itkGaussianImageSourceIF3.SetScale = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF3_SetScale, None, itkGaussianImageSourceIF3)
itkGaussianImageSourceIF3.GetScale = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF3_GetScale, None, itkGaussianImageSourceIF3)
itkGaussianImageSourceIF3.SetNormalized = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF3_SetNormalized, None, itkGaussianImageSourceIF3)
itkGaussianImageSourceIF3.GetNormalized = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF3_GetNormalized, None, itkGaussianImageSourceIF3)
itkGaussianImageSourceIF3.NormalizedOn = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF3_NormalizedOn, None, itkGaussianImageSourceIF3)
itkGaussianImageSourceIF3.NormalizedOff = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF3_NormalizedOff, None, itkGaussianImageSourceIF3)
itkGaussianImageSourceIF3.SetSigma = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF3_SetSigma, None, itkGaussianImageSourceIF3)
itkGaussianImageSourceIF3.GetSigma = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF3_GetSigma, None, itkGaussianImageSourceIF3)
itkGaussianImageSourceIF3.SetMean = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF3_SetMean, None, itkGaussianImageSourceIF3)
itkGaussianImageSourceIF3.GetMean = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF3_GetMean, None, itkGaussianImageSourceIF3)
itkGaussianImageSourceIF3.GetPointer = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIF3_GetPointer, None, itkGaussianImageSourceIF3)
itkGaussianImageSourceIF3_swigregister = _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_swigregister
itkGaussianImageSourceIF3_swigregister(itkGaussianImageSourceIF3)

def itkGaussianImageSourceIF3___New_orig__() -> "itkGaussianImageSourceIF3_Pointer":
    """itkGaussianImageSourceIF3___New_orig__() -> itkGaussianImageSourceIF3_Pointer"""
    return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3___New_orig__()

def itkGaussianImageSourceIF3_cast(obj: 'itkLightObject') -> "itkGaussianImageSourceIF3 *":
    """itkGaussianImageSourceIF3_cast(itkLightObject obj) -> itkGaussianImageSourceIF3"""
    return _itkGaussianImageSourcePython.itkGaussianImageSourceIF3_cast(obj)

class itkGaussianImageSourceISS2(itkParametricImageSourcePython.itkParametricImageSourceISS2):
    """


    Generate an n-dimensional image of a Gaussian.

    GaussianImageSource generates an image of a Gaussian. m_Normalized
    determines whether or not the Gaussian is normalized (whether or not
    the sum over infinite space is 1.0) When creating an image, it is
    preferable to not normalize the Gaussian m_Scale scales the output of
    the Gaussian to span a range larger than 0->1, and is typically set to
    the maximum value of the output data type (for instance, 255 for
    uchars)

    The output image may be of any dimension.

    C++ includes: itkGaussianImageSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianImageSourceISS2_Pointer":
        """__New_orig__() -> itkGaussianImageSourceISS2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianImageSourceISS2_Pointer":
        """Clone(itkGaussianImageSourceISS2 self) -> itkGaussianImageSourceISS2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_Clone(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """
        SetScale(itkGaussianImageSourceISS2 self, double const _arg)

        Gets and sets for Gaussian
        parameters Set/Get the scale factor to multiply the true value of the
        Gaussian. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_SetScale(self, _arg)


    def GetScale(self) -> "double const &":
        """GetScale(itkGaussianImageSourceISS2 self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_GetScale(self)


    def SetNormalized(self, _arg: 'bool const') -> "void":
        """
        SetNormalized(itkGaussianImageSourceISS2 self, bool const _arg)

        Set/Get whether or
        not to normalize the Gaussian. Default is false. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_SetNormalized(self, _arg)


    def GetNormalized(self) -> "bool const &":
        """GetNormalized(itkGaussianImageSourceISS2 self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_GetNormalized(self)


    def NormalizedOn(self) -> "void":
        """NormalizedOn(itkGaussianImageSourceISS2 self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_NormalizedOn(self)


    def NormalizedOff(self) -> "void":
        """NormalizedOff(itkGaussianImageSourceISS2 self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_NormalizedOff(self)


    def SetSigma(self, _arg: 'itkFixedArrayD2') -> "void":
        """
        SetSigma(itkGaussianImageSourceISS2 self, itkFixedArrayD2 _arg)

        Set/Get the standard
        deviation in each direction. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_SetSigma(self, _arg)


    def GetSigma(self) -> "itkFixedArrayD2 const &":
        """GetSigma(itkGaussianImageSourceISS2 self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_GetSigma(self)


    def SetMean(self, _arg: 'itkFixedArrayD2') -> "void":
        """
        SetMean(itkGaussianImageSourceISS2 self, itkFixedArrayD2 _arg)

        Set/Get the mean in each
        direction. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_SetMean(self, _arg)


    def GetMean(self) -> "itkFixedArrayD2 const &":
        """GetMean(itkGaussianImageSourceISS2 self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_GetMean(self)

    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceISS2

    def cast(obj: 'itkLightObject') -> "itkGaussianImageSourceISS2 *":
        """cast(itkLightObject obj) -> itkGaussianImageSourceISS2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkGaussianImageSourceISS2 *":
        """GetPointer(itkGaussianImageSourceISS2 self) -> itkGaussianImageSourceISS2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceISS2

        Create a new object of the class itkGaussianImageSourceISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianImageSourceISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianImageSourceISS2.Clone = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS2_Clone, None, itkGaussianImageSourceISS2)
itkGaussianImageSourceISS2.SetScale = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS2_SetScale, None, itkGaussianImageSourceISS2)
itkGaussianImageSourceISS2.GetScale = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS2_GetScale, None, itkGaussianImageSourceISS2)
itkGaussianImageSourceISS2.SetNormalized = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS2_SetNormalized, None, itkGaussianImageSourceISS2)
itkGaussianImageSourceISS2.GetNormalized = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS2_GetNormalized, None, itkGaussianImageSourceISS2)
itkGaussianImageSourceISS2.NormalizedOn = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS2_NormalizedOn, None, itkGaussianImageSourceISS2)
itkGaussianImageSourceISS2.NormalizedOff = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS2_NormalizedOff, None, itkGaussianImageSourceISS2)
itkGaussianImageSourceISS2.SetSigma = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS2_SetSigma, None, itkGaussianImageSourceISS2)
itkGaussianImageSourceISS2.GetSigma = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS2_GetSigma, None, itkGaussianImageSourceISS2)
itkGaussianImageSourceISS2.SetMean = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS2_SetMean, None, itkGaussianImageSourceISS2)
itkGaussianImageSourceISS2.GetMean = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS2_GetMean, None, itkGaussianImageSourceISS2)
itkGaussianImageSourceISS2.GetPointer = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS2_GetPointer, None, itkGaussianImageSourceISS2)
itkGaussianImageSourceISS2_swigregister = _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_swigregister
itkGaussianImageSourceISS2_swigregister(itkGaussianImageSourceISS2)

def itkGaussianImageSourceISS2___New_orig__() -> "itkGaussianImageSourceISS2_Pointer":
    """itkGaussianImageSourceISS2___New_orig__() -> itkGaussianImageSourceISS2_Pointer"""
    return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2___New_orig__()

def itkGaussianImageSourceISS2_cast(obj: 'itkLightObject') -> "itkGaussianImageSourceISS2 *":
    """itkGaussianImageSourceISS2_cast(itkLightObject obj) -> itkGaussianImageSourceISS2"""
    return _itkGaussianImageSourcePython.itkGaussianImageSourceISS2_cast(obj)

class itkGaussianImageSourceISS3(itkParametricImageSourcePython.itkParametricImageSourceISS3):
    """


    Generate an n-dimensional image of a Gaussian.

    GaussianImageSource generates an image of a Gaussian. m_Normalized
    determines whether or not the Gaussian is normalized (whether or not
    the sum over infinite space is 1.0) When creating an image, it is
    preferable to not normalize the Gaussian m_Scale scales the output of
    the Gaussian to span a range larger than 0->1, and is typically set to
    the maximum value of the output data type (for instance, 255 for
    uchars)

    The output image may be of any dimension.

    C++ includes: itkGaussianImageSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianImageSourceISS3_Pointer":
        """__New_orig__() -> itkGaussianImageSourceISS3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianImageSourceISS3_Pointer":
        """Clone(itkGaussianImageSourceISS3 self) -> itkGaussianImageSourceISS3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_Clone(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """
        SetScale(itkGaussianImageSourceISS3 self, double const _arg)

        Gets and sets for Gaussian
        parameters Set/Get the scale factor to multiply the true value of the
        Gaussian. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_SetScale(self, _arg)


    def GetScale(self) -> "double const &":
        """GetScale(itkGaussianImageSourceISS3 self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_GetScale(self)


    def SetNormalized(self, _arg: 'bool const') -> "void":
        """
        SetNormalized(itkGaussianImageSourceISS3 self, bool const _arg)

        Set/Get whether or
        not to normalize the Gaussian. Default is false. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_SetNormalized(self, _arg)


    def GetNormalized(self) -> "bool const &":
        """GetNormalized(itkGaussianImageSourceISS3 self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_GetNormalized(self)


    def NormalizedOn(self) -> "void":
        """NormalizedOn(itkGaussianImageSourceISS3 self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_NormalizedOn(self)


    def NormalizedOff(self) -> "void":
        """NormalizedOff(itkGaussianImageSourceISS3 self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_NormalizedOff(self)


    def SetSigma(self, _arg: 'itkFixedArrayD3') -> "void":
        """
        SetSigma(itkGaussianImageSourceISS3 self, itkFixedArrayD3 _arg)

        Set/Get the standard
        deviation in each direction. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_SetSigma(self, _arg)


    def GetSigma(self) -> "itkFixedArrayD3 const &":
        """GetSigma(itkGaussianImageSourceISS3 self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_GetSigma(self)


    def SetMean(self, _arg: 'itkFixedArrayD3') -> "void":
        """
        SetMean(itkGaussianImageSourceISS3 self, itkFixedArrayD3 _arg)

        Set/Get the mean in each
        direction. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_SetMean(self, _arg)


    def GetMean(self) -> "itkFixedArrayD3 const &":
        """GetMean(itkGaussianImageSourceISS3 self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_GetMean(self)

    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceISS3

    def cast(obj: 'itkLightObject') -> "itkGaussianImageSourceISS3 *":
        """cast(itkLightObject obj) -> itkGaussianImageSourceISS3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkGaussianImageSourceISS3 *":
        """GetPointer(itkGaussianImageSourceISS3 self) -> itkGaussianImageSourceISS3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceISS3

        Create a new object of the class itkGaussianImageSourceISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianImageSourceISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianImageSourceISS3.Clone = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS3_Clone, None, itkGaussianImageSourceISS3)
itkGaussianImageSourceISS3.SetScale = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS3_SetScale, None, itkGaussianImageSourceISS3)
itkGaussianImageSourceISS3.GetScale = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS3_GetScale, None, itkGaussianImageSourceISS3)
itkGaussianImageSourceISS3.SetNormalized = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS3_SetNormalized, None, itkGaussianImageSourceISS3)
itkGaussianImageSourceISS3.GetNormalized = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS3_GetNormalized, None, itkGaussianImageSourceISS3)
itkGaussianImageSourceISS3.NormalizedOn = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS3_NormalizedOn, None, itkGaussianImageSourceISS3)
itkGaussianImageSourceISS3.NormalizedOff = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS3_NormalizedOff, None, itkGaussianImageSourceISS3)
itkGaussianImageSourceISS3.SetSigma = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS3_SetSigma, None, itkGaussianImageSourceISS3)
itkGaussianImageSourceISS3.GetSigma = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS3_GetSigma, None, itkGaussianImageSourceISS3)
itkGaussianImageSourceISS3.SetMean = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS3_SetMean, None, itkGaussianImageSourceISS3)
itkGaussianImageSourceISS3.GetMean = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS3_GetMean, None, itkGaussianImageSourceISS3)
itkGaussianImageSourceISS3.GetPointer = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceISS3_GetPointer, None, itkGaussianImageSourceISS3)
itkGaussianImageSourceISS3_swigregister = _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_swigregister
itkGaussianImageSourceISS3_swigregister(itkGaussianImageSourceISS3)

def itkGaussianImageSourceISS3___New_orig__() -> "itkGaussianImageSourceISS3_Pointer":
    """itkGaussianImageSourceISS3___New_orig__() -> itkGaussianImageSourceISS3_Pointer"""
    return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3___New_orig__()

def itkGaussianImageSourceISS3_cast(obj: 'itkLightObject') -> "itkGaussianImageSourceISS3 *":
    """itkGaussianImageSourceISS3_cast(itkLightObject obj) -> itkGaussianImageSourceISS3"""
    return _itkGaussianImageSourcePython.itkGaussianImageSourceISS3_cast(obj)

class itkGaussianImageSourceIUC2(itkParametricImageSourcePython.itkParametricImageSourceIUC2):
    """


    Generate an n-dimensional image of a Gaussian.

    GaussianImageSource generates an image of a Gaussian. m_Normalized
    determines whether or not the Gaussian is normalized (whether or not
    the sum over infinite space is 1.0) When creating an image, it is
    preferable to not normalize the Gaussian m_Scale scales the output of
    the Gaussian to span a range larger than 0->1, and is typically set to
    the maximum value of the output data type (for instance, 255 for
    uchars)

    The output image may be of any dimension.

    C++ includes: itkGaussianImageSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianImageSourceIUC2_Pointer":
        """__New_orig__() -> itkGaussianImageSourceIUC2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianImageSourceIUC2_Pointer":
        """Clone(itkGaussianImageSourceIUC2 self) -> itkGaussianImageSourceIUC2_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_Clone(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """
        SetScale(itkGaussianImageSourceIUC2 self, double const _arg)

        Gets and sets for Gaussian
        parameters Set/Get the scale factor to multiply the true value of the
        Gaussian. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_SetScale(self, _arg)


    def GetScale(self) -> "double const &":
        """GetScale(itkGaussianImageSourceIUC2 self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_GetScale(self)


    def SetNormalized(self, _arg: 'bool const') -> "void":
        """
        SetNormalized(itkGaussianImageSourceIUC2 self, bool const _arg)

        Set/Get whether or
        not to normalize the Gaussian. Default is false. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_SetNormalized(self, _arg)


    def GetNormalized(self) -> "bool const &":
        """GetNormalized(itkGaussianImageSourceIUC2 self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_GetNormalized(self)


    def NormalizedOn(self) -> "void":
        """NormalizedOn(itkGaussianImageSourceIUC2 self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_NormalizedOn(self)


    def NormalizedOff(self) -> "void":
        """NormalizedOff(itkGaussianImageSourceIUC2 self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_NormalizedOff(self)


    def SetSigma(self, _arg: 'itkFixedArrayD2') -> "void":
        """
        SetSigma(itkGaussianImageSourceIUC2 self, itkFixedArrayD2 _arg)

        Set/Get the standard
        deviation in each direction. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_SetSigma(self, _arg)


    def GetSigma(self) -> "itkFixedArrayD2 const &":
        """GetSigma(itkGaussianImageSourceIUC2 self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_GetSigma(self)


    def SetMean(self, _arg: 'itkFixedArrayD2') -> "void":
        """
        SetMean(itkGaussianImageSourceIUC2 self, itkFixedArrayD2 _arg)

        Set/Get the mean in each
        direction. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_SetMean(self, _arg)


    def GetMean(self) -> "itkFixedArrayD2 const &":
        """GetMean(itkGaussianImageSourceIUC2 self) -> itkFixedArrayD2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_GetMean(self)

    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceIUC2

    def cast(obj: 'itkLightObject') -> "itkGaussianImageSourceIUC2 *":
        """cast(itkLightObject obj) -> itkGaussianImageSourceIUC2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkGaussianImageSourceIUC2 *":
        """GetPointer(itkGaussianImageSourceIUC2 self) -> itkGaussianImageSourceIUC2"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIUC2

        Create a new object of the class itkGaussianImageSourceIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianImageSourceIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianImageSourceIUC2.Clone = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_Clone, None, itkGaussianImageSourceIUC2)
itkGaussianImageSourceIUC2.SetScale = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_SetScale, None, itkGaussianImageSourceIUC2)
itkGaussianImageSourceIUC2.GetScale = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_GetScale, None, itkGaussianImageSourceIUC2)
itkGaussianImageSourceIUC2.SetNormalized = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_SetNormalized, None, itkGaussianImageSourceIUC2)
itkGaussianImageSourceIUC2.GetNormalized = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_GetNormalized, None, itkGaussianImageSourceIUC2)
itkGaussianImageSourceIUC2.NormalizedOn = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_NormalizedOn, None, itkGaussianImageSourceIUC2)
itkGaussianImageSourceIUC2.NormalizedOff = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_NormalizedOff, None, itkGaussianImageSourceIUC2)
itkGaussianImageSourceIUC2.SetSigma = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_SetSigma, None, itkGaussianImageSourceIUC2)
itkGaussianImageSourceIUC2.GetSigma = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_GetSigma, None, itkGaussianImageSourceIUC2)
itkGaussianImageSourceIUC2.SetMean = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_SetMean, None, itkGaussianImageSourceIUC2)
itkGaussianImageSourceIUC2.GetMean = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_GetMean, None, itkGaussianImageSourceIUC2)
itkGaussianImageSourceIUC2.GetPointer = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_GetPointer, None, itkGaussianImageSourceIUC2)
itkGaussianImageSourceIUC2_swigregister = _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_swigregister
itkGaussianImageSourceIUC2_swigregister(itkGaussianImageSourceIUC2)

def itkGaussianImageSourceIUC2___New_orig__() -> "itkGaussianImageSourceIUC2_Pointer":
    """itkGaussianImageSourceIUC2___New_orig__() -> itkGaussianImageSourceIUC2_Pointer"""
    return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2___New_orig__()

def itkGaussianImageSourceIUC2_cast(obj: 'itkLightObject') -> "itkGaussianImageSourceIUC2 *":
    """itkGaussianImageSourceIUC2_cast(itkLightObject obj) -> itkGaussianImageSourceIUC2"""
    return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC2_cast(obj)

class itkGaussianImageSourceIUC3(itkParametricImageSourcePython.itkParametricImageSourceIUC3):
    """


    Generate an n-dimensional image of a Gaussian.

    GaussianImageSource generates an image of a Gaussian. m_Normalized
    determines whether or not the Gaussian is normalized (whether or not
    the sum over infinite space is 1.0) When creating an image, it is
    preferable to not normalize the Gaussian m_Scale scales the output of
    the Gaussian to span a range larger than 0->1, and is typically set to
    the maximum value of the output data type (for instance, 255 for
    uchars)

    The output image may be of any dimension.

    C++ includes: itkGaussianImageSource.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGaussianImageSourceIUC3_Pointer":
        """__New_orig__() -> itkGaussianImageSourceIUC3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGaussianImageSourceIUC3_Pointer":
        """Clone(itkGaussianImageSourceIUC3 self) -> itkGaussianImageSourceIUC3_Pointer"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_Clone(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """
        SetScale(itkGaussianImageSourceIUC3 self, double const _arg)

        Gets and sets for Gaussian
        parameters Set/Get the scale factor to multiply the true value of the
        Gaussian. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_SetScale(self, _arg)


    def GetScale(self) -> "double const &":
        """GetScale(itkGaussianImageSourceIUC3 self) -> double const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_GetScale(self)


    def SetNormalized(self, _arg: 'bool const') -> "void":
        """
        SetNormalized(itkGaussianImageSourceIUC3 self, bool const _arg)

        Set/Get whether or
        not to normalize the Gaussian. Default is false. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_SetNormalized(self, _arg)


    def GetNormalized(self) -> "bool const &":
        """GetNormalized(itkGaussianImageSourceIUC3 self) -> bool const &"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_GetNormalized(self)


    def NormalizedOn(self) -> "void":
        """NormalizedOn(itkGaussianImageSourceIUC3 self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_NormalizedOn(self)


    def NormalizedOff(self) -> "void":
        """NormalizedOff(itkGaussianImageSourceIUC3 self)"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_NormalizedOff(self)


    def SetSigma(self, _arg: 'itkFixedArrayD3') -> "void":
        """
        SetSigma(itkGaussianImageSourceIUC3 self, itkFixedArrayD3 _arg)

        Set/Get the standard
        deviation in each direction. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_SetSigma(self, _arg)


    def GetSigma(self) -> "itkFixedArrayD3 const &":
        """GetSigma(itkGaussianImageSourceIUC3 self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_GetSigma(self)


    def SetMean(self, _arg: 'itkFixedArrayD3') -> "void":
        """
        SetMean(itkGaussianImageSourceIUC3 self, itkFixedArrayD3 _arg)

        Set/Get the mean in each
        direction. 
        """
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_SetMean(self, _arg)


    def GetMean(self) -> "itkFixedArrayD3 const &":
        """GetMean(itkGaussianImageSourceIUC3 self) -> itkFixedArrayD3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_GetMean(self)

    __swig_destroy__ = _itkGaussianImageSourcePython.delete_itkGaussianImageSourceIUC3

    def cast(obj: 'itkLightObject') -> "itkGaussianImageSourceIUC3 *":
        """cast(itkLightObject obj) -> itkGaussianImageSourceIUC3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkGaussianImageSourceIUC3 *":
        """GetPointer(itkGaussianImageSourceIUC3 self) -> itkGaussianImageSourceIUC3"""
        return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkGaussianImageSourceIUC3

        Create a new object of the class itkGaussianImageSourceIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaussianImageSourceIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGaussianImageSourceIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGaussianImageSourceIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGaussianImageSourceIUC3.Clone = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_Clone, None, itkGaussianImageSourceIUC3)
itkGaussianImageSourceIUC3.SetScale = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_SetScale, None, itkGaussianImageSourceIUC3)
itkGaussianImageSourceIUC3.GetScale = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_GetScale, None, itkGaussianImageSourceIUC3)
itkGaussianImageSourceIUC3.SetNormalized = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_SetNormalized, None, itkGaussianImageSourceIUC3)
itkGaussianImageSourceIUC3.GetNormalized = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_GetNormalized, None, itkGaussianImageSourceIUC3)
itkGaussianImageSourceIUC3.NormalizedOn = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_NormalizedOn, None, itkGaussianImageSourceIUC3)
itkGaussianImageSourceIUC3.NormalizedOff = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_NormalizedOff, None, itkGaussianImageSourceIUC3)
itkGaussianImageSourceIUC3.SetSigma = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_SetSigma, None, itkGaussianImageSourceIUC3)
itkGaussianImageSourceIUC3.GetSigma = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_GetSigma, None, itkGaussianImageSourceIUC3)
itkGaussianImageSourceIUC3.SetMean = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_SetMean, None, itkGaussianImageSourceIUC3)
itkGaussianImageSourceIUC3.GetMean = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_GetMean, None, itkGaussianImageSourceIUC3)
itkGaussianImageSourceIUC3.GetPointer = new_instancemethod(_itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_GetPointer, None, itkGaussianImageSourceIUC3)
itkGaussianImageSourceIUC3_swigregister = _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_swigregister
itkGaussianImageSourceIUC3_swigregister(itkGaussianImageSourceIUC3)

def itkGaussianImageSourceIUC3___New_orig__() -> "itkGaussianImageSourceIUC3_Pointer":
    """itkGaussianImageSourceIUC3___New_orig__() -> itkGaussianImageSourceIUC3_Pointer"""
    return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3___New_orig__()

def itkGaussianImageSourceIUC3_cast(obj: 'itkLightObject') -> "itkGaussianImageSourceIUC3 *":
    """itkGaussianImageSourceIUC3_cast(itkLightObject obj) -> itkGaussianImageSourceIUC3"""
    return _itkGaussianImageSourcePython.itkGaussianImageSourceIUC3_cast(obj)



