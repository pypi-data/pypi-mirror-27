/* This file was generated by PyPe9 version {{version}} on {{timestamp}} */

#ifndef {{component_name | upper}}_MODULE_H
#define {{component_name | upper}}_MODULE_H

#include "slimodule.h"
#include "slifunction.h"

namespace nest {
  class Network;
}

// Put your stuff into your own namespace.
namespace nineml {

/**
 * Class defining your model.
 * @note For each model, you must define one such class, with a unique name.
 */
class {{component_name}}Module : public SLIModule {
 public:

  // Interface functions ------------------------------------------

  /**
   * @note The constructor registers the module with the dynamic loader.
   *       Initialization proper is performed by the init() method.
   */
  {{component_name}}Module();

  /**
   * @note The destructor does not do much in modules.
   */
  ~{{component_name}}Module();

  /**
   * Initialize module by registering models with the network.
   * @param SLIInterpreter* SLI interpreter
   */
  void init( SLIInterpreter* );

  /**
   * Return the name of your model.
   */
  const std::string name( void ) const;

  /**
   * Return the name of a sli file to execute when {{component_name}}Module is loaded.
   * This mechanism can be used to define SLI commands associated with your
   * module, in particular, set up type tries for functions you have defined.
   */
  const std::string commandstring( void ) const;

};

}  // nineml namespace

#endif  // {{component_name | upper}}_MODULE_H