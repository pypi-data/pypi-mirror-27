{# This template provides a CVODE exception class

   Authors: Thomas G. Close and Ivan Raikov
   Copyright Okinawa Institute of Science and Technology Graudate University 2014
#}
	/**
	* Exception to be thrown if a CV solver does not return CV_SUCCESS
	* @ingroup KernelExceptions
	*/
    class CVodeSolverFailure: public nest::KernelException {
	  public:
        /**
	     * @note model should be passed from get_name() to ensure that
	     *             names of copied models are reported correctly.
	     * @param model name of model causing problem
	     * @param status exit status of the CV solver
	     */
        CVodeSolverFailure(const std::string& model, const int status)
	     : KernelException("CVodeSolverFailure"),
	       model_(model),
	       status_(status) {}
        ~CVodeSolverFailure() throw() {}

	    std::string message() {
            std::ostringstream msg;
            msg << "In model " << model_ << ", the CVode solver "
	            << "returned with exit status " << status_ << ".\n";
	        return msg.str();
	    }

	  private:
        const std::string model_;
	    const int status_;
	};

    /*
     * Check function return value.
     *    opt == 0 means SUNDIALS function allocates memory so check if
     *             returned NULL pointer
     *    opt == 1 means SUNDIALS function returns a flag so check if
     *             flag >= 0
     *    opt == 2 means function allocates memory so check if returned
     *             NULL pointer
     */
    inline static int check_flag(void *flagvalue, const char *funcname, int opt) {
        int *errflag;
        if (opt == 0 && flagvalue == NULL) {
            /* Check if CVode/IDA function returned NULL pointer - no memory allocated */
            fprintf(stderr,
                    "\nCVode/IDA error: %s() failed - returned NULL pointer\n\n",
                    funcname);
            return(1);
        } else if (opt == 1) {
            /* Check if flag < 0 */
            errflag = (int *) flagvalue;
            if (*errflag < 0) {
                fprintf(stderr,
                        "\nCVode/IDA error: %s() failed with flag = %d\n\n",
                        funcname, *errflag);
                return(1);
            }
        } else if (opt == 2 && flagvalue == NULL) {
            /* Check if function returned NULL pointer - no memory allocated */
            fprintf(stderr,
                    "\nMemory error: %s() failed - returned NULL pointer\n\n",
                    funcname);
            return(1);
        }
        return(0);
    }

    inline void adjust_zero_crossings (N_Vector v, double abstol) {
        for (int i = 0; i < NV_LENGTH_S(v); i++)
            if (fabs(ITEM(v,i)) < abstol)
                ITEM(v,i) = 0;
        return;
    }
