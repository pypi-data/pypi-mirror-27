{% macro elseif(first) %}{% if first %}if{% else %}} else if{% endif %}{% endmacro %}
:VERBATIM
:extern double nineml_gsl_normal(double, double);
:extern double nineml_gsl_uniform(double, double);
:extern double nineml_gsl_binomial(double, int);
:extern double nineml_gsl_exponential(double);
:extern double nineml_gsl_poisson(double);
:ENDVERBATIM

TITLE Spiking node generated from 9ML using PyPe9 version {{version}} at '{{timestamp}}'


NEURON {
    {%+ if is_subcomponent %}SUFFIX{% else %}POINT_PROCESS{% endif %} {{component_name}}
{% for port in component_class.analog_send_ports if port.dimension == units.currentDensity %}
    {% set ion_species = port.annotations['biophysics']['ion_species'] %}
    {% if not ion_species or ion_species == 'non_specific' %}
    NONSPECIFIC_CURRENT {{port.name}}
    {% else %}
    USEION {{ion_species}} WRITE {{ion_species}}i
    {% endif %}        
{% endfor %}
    : T
    RANGE regime_

    :StateVariables:
{% for sv in component_class.state_variables %}
    RANGE {{sv.name}}
{% endfor %}

    :KineticStates:
{% for sv in component_class.kinetic_states %}
    RANGE {{sv.name}}
{% endfor %}


    :Parameters
{% for p in component_class.parameters %}
    RANGE {{p.name}}
{% endfor %}

    :Ports
{% for p in chain(component_class.analog_receive_ports, component_class.analog_reduce_ports) if p.name != 'v' %}
    RANGE {{p.name}}
{% endfor %}

    :Aliases
{% for alias in chain(component_class.aliases, component_class.piecewises) %}
    RANGE {{alias.name}}
{% endfor %}
}
PARAMETER{


}
ASSIGNED{
    :Aliases 
 
 {% for p in component_class.analog_receive_ports %}
    {{p.name}}{% if p.dimension == units.voltage %} (mV) {% endif %}
{%+ endfor %}   
 
{#    
{% for p in chain(component_class.analog_receive_ports, component_class.analog_reduce_ports) %}
    {{p.name}} ({{p.units.name}})
{% endfor %}
#}


{#
{% for alias in chain(component_class.aliases, component_class.piecewises) %}
    {{alias.name}} (/ms)
{% endfor %} 
#}

}

CONSTANT {
    : IDs for regimes, events and conditions 

    : Transition flags
    ON_EVENT = 0
    ON_CONDITION = 1
    INIT = 2

    : Regime ids
{% for regime in component_class.regimes %}
    {{regime.name | upper}} = {{component_class.index_of(regime)}}
{% endfor %}

    : Event port ids
{% for port in component_class.event_receive_ports %}
    {{port.name | upper}} = {{component_class.index_of(port)}}
{% endfor %}

}

INITIAL {
    : Initialise State Variables:
{% for sv in component_class.state_variables %}
    {{sv.name}} = 0
{% endfor %}

    : Initialise Regime:
    regime_ = 0 {# {{next(component_class.regimes).name | upper}} #}

    
    : Active/inactive conditions (conditions transitions are only valid on 
    : triggered from False->True) so check to see if start off False
{% for regime in component_class.regimes %}
    {% for oc in regime.on_conditions %}
    {{regime.name | lower}}_cond{{component_class.index_of(oc, key=regime)}}_active = ({{oc.trigger.reactivate_condition.rhs_str.replace('=', '')}})
    {% endfor %}
{% endfor %}
}

PARAMETER {
    : True parameters
{% for p in component_class.parameters %}
    {{p.name}} = 0
{% endfor %}

    : Constants
{% for c in component_class.constants %}
    {{c.name}} = {{c.value}} ({{c.units.name}})
{% endfor %}
}

{#
STATE {
{% for sv in component_class.state_variables if sv.name != 'v' %}
    {{sv.name}}
{% endfor %}
}#}

STATE {


{% for sv in component_class.kinetic_states if sv.name != 'v' %}
    {{sv.name}}
{% endfor %}



}


{#
:Aliases
{% for alias in chain(component_class.aliases, component_class.piecewises) %}
    RANGE {{alias.name}}
{% endfor %}
}

#}

KINETIC kin {
  {% for reaction in component_class.reactions %}
     
  {{'~'}} {{ reaction.from_state }}  {{'<->'}}  {{ reaction.to_state }} ({{reaction.forward_rate.name
}},{{reaction.reverse_rate.name}})
  {% endfor %}
  

  CONSERVE {{component_class.constraints['C1'].rhs+1}} = 1

}





ASSIGNED {
    : Internal flags
    regime_
    regime_changed_
    
    : Active/inactive conditions (conditions transitions are only valid on 
    : triggered from False->True)
{% for regime in component_class.regimes %}
    {% for oc in regime.on_conditions %}
    {{regime.name | lower}}_cond{{component_class.index_of(oc, key=regime)}}_active
    {% endfor %}
{% endfor %}

    : Weight variables
{% if weight_variables %}
    {% for var in weight_variables.values %}
    {{var}}
    {% endfor %}
{% endif %}

    : Analog send ports
{% for p in component_class.analog_send_ports if p.name not in component_class.state_variable_names %}
    {{p.name}}{% if p.dimension == units.currentDensity %} (nA) {% endif %}
{%+ endfor %}

{% if not is_subcomponent %}   
    : Membrane voltage
    v (mV)
{% endif %}
}

BREAKPOINT {
    SOLVE kin METHOD sparse
{% for expr in component_class.required_for(component_class.all_time_derivatives()).expressions %}
    {{expr.lhs}} = {{expr.rhs_str}}
{% endfor %}
{% for expr in component_class.required_for(component_class.all_output_analogs()).expressions %}
    {{expr.lhs}} = {{expr.rhs_str}}
{% endfor %}
{% for oa in component_class.all_output_analogs() %}
    {{oa.lhs}} = {{oa.rhs_str}}
{% endfor %}
}




