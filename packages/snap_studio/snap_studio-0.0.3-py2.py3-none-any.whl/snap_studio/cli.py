#!/usr/bin/env python

from subprocess import Popen

from colorama import Fore, Style
from flask_script import Manager

from snap_studio.app import app

config = app.config

manager = Manager(app)

@manager.option(
    '-d', '--debug', action='store_true',
    help='Start the web server in debug mode')
@manager.option(
    '-n', '--no-reload', action='store_false', dest='no_reload',
    default=config.get('FLASK_USE_RELOAD'),
    help="Don't use the reloader in debug mode")
@manager.option(
    '-a', '--host', default=config.get('SNAP_WEBSERVER_ADDRESS',"0.0.0.0"),
    help='Specify the host IP to which to bind the web server')
@manager.option(
    '-p', '--port', default=config.get('SNAP_WEBSERVER_PORT',8000),
    help='Specify the port on which to run the web server')
@manager.option(
    '-t', '--timeout', default=config.get('SNAP_WEBSERVER_TIMEOUT',30),
    help='Specify the timeout (seconds) for the web server')
@manager.option('-c', '--connect',
    default = config.get("SNAP_CONNECTION_STRING", '0.0.0.0:10000'),
    help='Connection string to connect to SNAP Server e.g. '
         'localhost:10000')
def runserver(debug, no_reload, host, port, timeout, connect):
    """Starts a SNAP web server."""
    debug = debug or config.get('DEBUG')
    print(Fore.YELLOW + 'Connecting to SNAP Server at ' + connect)
    app.config['connect'] = connect
    if debug:
        print(Fore.BLUE + '-=' * 20)
        print(
            Fore.YELLOW + 'Starting SNAP UI Server in ' +
            Fore.RED + 'DEBUG' +
            Fore.YELLOW + ' mode')
        print(Fore.BLUE + '-=' * 20)
        print(Style.RESET_ALL)
        app.run(
            host=host,
            port=int(port),
            threaded=True,
            debug=True,
            use_reloader=no_reload)
    else:
        workers = 1
        socket = None
        addr_str = ' unix:{socket} ' if socket else' {host}:{port} '
        cmd = (
            'gunicorn '
            '-w {workers} '
            '--timeout {timeout} '
            '-b ' + addr_str +
            '--limit-request-line 0 '
            '--limit-request-field_size 0 '
            'snap_studio.app:app').format(**locals())
        print(Fore.GREEN + 'Starting server with command: ')
        print(Fore.YELLOW + cmd)
        print(Style.RESET_ALL)
        Popen(cmd, shell=True).wait()


@manager.option(
    '-v', '--verbose', action='store_true',
    help='Show extra information')
def version(verbose):
    """Prints the current version number"""
    print(Fore.BLUE + '-=' * 15)
    print(Fore.YELLOW + 'Snap ' + Fore.CYAN + '{version}'.format(
        version=config.get('VERSION_STRING')))
    print(Fore.BLUE + '-=' * 15)
#   if verbose:#
#      print('[DB] : ' + '{}'.format(db.engine))
    print(Style.RESET_ALL)


@manager.option(
    '-t', '--load-test-data', action='store_true',
    help='Load additional test data')
def load_examples(load_test_data):
    """Loads a set of Slices and Dashboards and a supporting dataset """
    from superset import data
    print('Loading examples into {}'.format(db))

    data.load_css_templates()

    print('Loading energy related dataset')
    data.load_energy()

    print("Loading [World Bank's Health Nutrition and Population Stats]")
    data.load_world_bank_health_n_pop()

    print('Loading [Birth names]')
    data.load_birth_names()

    print('Loading [Random time series data]')
    data.load_random_time_series_data()

    print('Loading [Random long/lat data]')
    data.load_long_lat_data()

    print('Loading [Country Map data]')
    data.load_country_map_data()

    print('Loading [Multiformat time series]')
    data.load_multiformat_time_series_data()

    print('Loading [Misc Charts] dashboard')
    data.load_misc_dashboard()

    print('Loading DECK.gl demo')
    data.load_deck_dash()

    if load_test_data:
        print('Loading [Unicode test data]')
        data.load_unicode_test_data()

    print('Loading flights data')
    data.load_flights()



### Rest of file was autogenerated by cookiecutter
#
#"""Console script for snap_studio."""
#
#import click
#
#
#@click.command()
#def main(args=None):
#    """Console script for snap_studio."""
#    click.echo("Replace this message by putting your code into "
#               "snap_studio.cli.main")
#    click.echo("See click documentation at http://click.pocoo.org/")
#
#
#if __name__ == "__main__":
#    main()
