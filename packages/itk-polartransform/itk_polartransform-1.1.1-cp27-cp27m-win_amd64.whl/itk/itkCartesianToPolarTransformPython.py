# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkCartesianToPolarTransformPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkCartesianToPolarTransformPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkCartesianToPolarTransformPython')
    _itkCartesianToPolarTransformPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkCartesianToPolarTransformPython', [dirname(__file__)])
        except ImportError:
            import _itkCartesianToPolarTransformPython
            return _itkCartesianToPolarTransformPython
        try:
            _mod = imp.load_module('_itkCartesianToPolarTransformPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkCartesianToPolarTransformPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkCartesianToPolarTransformPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkTransformBasePython
import itkDiffusionTensor3DPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import vnl_matrix_fixedPython
import itkPointPython
import itkOptimizerParametersPython
import itkArrayPython
import ITKCommonBasePython
import itkArray2DPython
import itkVariableLengthVectorPython

def itkCartesianToPolarTransformD3_New():
  return itkCartesianToPolarTransformD3.New()


def itkCartesianToPolarTransformD2_New():
  return itkCartesianToPolarTransformD2.New()

class itkCartesianToPolarTransformD2(itkTransformBasePython.itkTransformD22):
    """Proxy of C++ itkCartesianToPolarTransformD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCartesianToPolarTransformD2_Pointer"""
        return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCartesianToPolarTransformD2 self) -> itkCartesianToPolarTransformD2_Pointer"""
        return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD2_Clone(self)


    def TransformVector(self, *args):
        """
        TransformVector(itkCartesianToPolarTransformD2 self, itkVectorD2 arg0) -> itkVectorD2
        TransformVector(itkCartesianToPolarTransformD2 self, vnl_vector_fixed< double,2 > const & arg0) -> vnl_vector_fixed< double,2 >

        Method to transform
        a vector stored in a VectorImage, at a point. For global transforms,
        point is ignored and TransformVector( vector ) is called. Local
        transforms (e.g. deformation field transform) must override and
        provide required behavior. 
        """
        return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD2_TransformVector(self, *args)


    def SetCenter(self, _arg):
        """SetCenter(itkCartesianToPolarTransformD2 self, itkPointD2 _arg)"""
        return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD2_SetCenter(self, _arg)


    def GetCenter(self):
        """GetCenter(itkCartesianToPolarTransformD2 self) -> itkPointD2"""
        return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD2_GetCenter(self)

    __swig_destroy__ = _itkCartesianToPolarTransformPython.delete_itkCartesianToPolarTransformD2

    def cast(obj):
        """cast(itkLightObject obj) -> itkCartesianToPolarTransformD2"""
        return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkCartesianToPolarTransformD2 self) -> itkCartesianToPolarTransformD2"""
        return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkCartesianToPolarTransformD2

        Create a new object of the class itkCartesianToPolarTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCartesianToPolarTransformD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCartesianToPolarTransformD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCartesianToPolarTransformD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCartesianToPolarTransformD2.Clone = new_instancemethod(_itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD2_Clone, None, itkCartesianToPolarTransformD2)
itkCartesianToPolarTransformD2.TransformVector = new_instancemethod(_itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD2_TransformVector, None, itkCartesianToPolarTransformD2)
itkCartesianToPolarTransformD2.SetCenter = new_instancemethod(_itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD2_SetCenter, None, itkCartesianToPolarTransformD2)
itkCartesianToPolarTransformD2.GetCenter = new_instancemethod(_itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD2_GetCenter, None, itkCartesianToPolarTransformD2)
itkCartesianToPolarTransformD2.GetPointer = new_instancemethod(_itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD2_GetPointer, None, itkCartesianToPolarTransformD2)
itkCartesianToPolarTransformD2_swigregister = _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD2_swigregister
itkCartesianToPolarTransformD2_swigregister(itkCartesianToPolarTransformD2)

def itkCartesianToPolarTransformD2___New_orig__():
    """itkCartesianToPolarTransformD2___New_orig__() -> itkCartesianToPolarTransformD2_Pointer"""
    return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD2___New_orig__()

def itkCartesianToPolarTransformD2_cast(obj):
    """itkCartesianToPolarTransformD2_cast(itkLightObject obj) -> itkCartesianToPolarTransformD2"""
    return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD2_cast(obj)

class itkCartesianToPolarTransformD3(itkTransformBasePython.itkTransformD33):
    """Proxy of C++ itkCartesianToPolarTransformD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkCartesianToPolarTransformD3_Pointer"""
        return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkCartesianToPolarTransformD3 self) -> itkCartesianToPolarTransformD3_Pointer"""
        return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD3_Clone(self)


    def TransformVector(self, *args):
        """
        TransformVector(itkCartesianToPolarTransformD3 self, itkVectorD3 arg0) -> itkVectorD3
        TransformVector(itkCartesianToPolarTransformD3 self, vnl_vector_fixed< double,3 > const & arg0) -> vnl_vector_fixed< double,3 >

        Method to transform
        a vector stored in a VectorImage, at a point. For global transforms,
        point is ignored and TransformVector( vector ) is called. Local
        transforms (e.g. deformation field transform) must override and
        provide required behavior. 
        """
        return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD3_TransformVector(self, *args)


    def SetCenter(self, _arg):
        """SetCenter(itkCartesianToPolarTransformD3 self, itkPointD3 _arg)"""
        return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD3_SetCenter(self, _arg)


    def GetCenter(self):
        """GetCenter(itkCartesianToPolarTransformD3 self) -> itkPointD3"""
        return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD3_GetCenter(self)

    __swig_destroy__ = _itkCartesianToPolarTransformPython.delete_itkCartesianToPolarTransformD3

    def cast(obj):
        """cast(itkLightObject obj) -> itkCartesianToPolarTransformD3"""
        return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkCartesianToPolarTransformD3 self) -> itkCartesianToPolarTransformD3"""
        return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkCartesianToPolarTransformD3

        Create a new object of the class itkCartesianToPolarTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCartesianToPolarTransformD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCartesianToPolarTransformD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCartesianToPolarTransformD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCartesianToPolarTransformD3.Clone = new_instancemethod(_itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD3_Clone, None, itkCartesianToPolarTransformD3)
itkCartesianToPolarTransformD3.TransformVector = new_instancemethod(_itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD3_TransformVector, None, itkCartesianToPolarTransformD3)
itkCartesianToPolarTransformD3.SetCenter = new_instancemethod(_itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD3_SetCenter, None, itkCartesianToPolarTransformD3)
itkCartesianToPolarTransformD3.GetCenter = new_instancemethod(_itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD3_GetCenter, None, itkCartesianToPolarTransformD3)
itkCartesianToPolarTransformD3.GetPointer = new_instancemethod(_itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD3_GetPointer, None, itkCartesianToPolarTransformD3)
itkCartesianToPolarTransformD3_swigregister = _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD3_swigregister
itkCartesianToPolarTransformD3_swigregister(itkCartesianToPolarTransformD3)

def itkCartesianToPolarTransformD3___New_orig__():
    """itkCartesianToPolarTransformD3___New_orig__() -> itkCartesianToPolarTransformD3_Pointer"""
    return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD3___New_orig__()

def itkCartesianToPolarTransformD3_cast(obj):
    """itkCartesianToPolarTransformD3_cast(itkLightObject obj) -> itkCartesianToPolarTransformD3"""
    return _itkCartesianToPolarTransformPython.itkCartesianToPolarTransformD3_cast(obj)



