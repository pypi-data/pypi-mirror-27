// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `IceDiscovery.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <IceDiscovery/IceDiscovery.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_IceDiscovery_LookupReply_ids[2] =
{
    "::Ice::Object",
    "::IceDiscovery::LookupReply"
};
const ::std::string iceC_IceDiscovery_LookupReply_ops[] =
{
    "foundAdapterById",
    "foundObjectById",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_IceDiscovery_LookupReply_foundObjectById_name = "foundObjectById";
const ::std::string iceC_IceDiscovery_LookupReply_foundAdapterById_name = "foundAdapterById";

const ::std::string iceC_IceDiscovery_Lookup_ids[2] =
{
    "::Ice::Object",
    "::IceDiscovery::Lookup"
};
const ::std::string iceC_IceDiscovery_Lookup_ops[] =
{
    "findAdapterById",
    "findObjectById",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_IceDiscovery_Lookup_findObjectById_name = "findObjectById";
const ::std::string iceC_IceDiscovery_Lookup_findAdapterById_name = "findAdapterById";

}

bool
IceDiscovery::LookupReply::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceDiscovery_LookupReply_ids, iceC_IceDiscovery_LookupReply_ids + 2, s);
}

::std::vector<::std::string>
IceDiscovery::LookupReply::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceDiscovery_LookupReply_ids[0], &iceC_IceDiscovery_LookupReply_ids[2]);
}

::std::string
IceDiscovery::LookupReply::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceDiscovery::LookupReply::ice_staticId()
{
    static const ::std::string typeId = "::IceDiscovery::LookupReply";
    return typeId;
}

bool
IceDiscovery::LookupReply::_iceD_foundObjectById(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::Ice::Identity iceP_id;
    ::std::shared_ptr<::Ice::ObjectPrx> iceP_prx;
    istr->readAll(iceP_id, iceP_prx);
    inS.endReadParams();
    this->foundObjectById(::std::move(iceP_id), ::std::move(iceP_prx), current);
    inS.writeEmptyParams();
    return true;
}

bool
IceDiscovery::LookupReply::_iceD_foundAdapterById(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_id;
    ::std::shared_ptr<::Ice::ObjectPrx> iceP_prx;
    bool iceP_isReplicaGroup;
    istr->readAll(iceP_id, iceP_prx, iceP_isReplicaGroup);
    inS.endReadParams();
    this->foundAdapterById(::std::move(iceP_id), ::std::move(iceP_prx), iceP_isReplicaGroup, current);
    inS.writeEmptyParams();
    return true;
}

bool
IceDiscovery::LookupReply::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceDiscovery_LookupReply_ops, iceC_IceDiscovery_LookupReply_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceDiscovery_LookupReply_ops)
    {
        case 0:
        {
            return _iceD_foundAdapterById(in, current);
        }
        case 1:
        {
            return _iceD_foundObjectById(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

bool
IceDiscovery::Lookup::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceDiscovery_Lookup_ids, iceC_IceDiscovery_Lookup_ids + 2, s);
}

::std::vector<::std::string>
IceDiscovery::Lookup::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_IceDiscovery_Lookup_ids[0], &iceC_IceDiscovery_Lookup_ids[2]);
}

::std::string
IceDiscovery::Lookup::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceDiscovery::Lookup::ice_staticId()
{
    static const ::std::string typeId = "::IceDiscovery::Lookup";
    return typeId;
}

bool
IceDiscovery::Lookup::_iceD_findObjectById(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_domainId;
    ::Ice::Identity iceP_id;
    ::std::shared_ptr<::IceDiscovery::LookupReplyPrx> iceP_reply;
    istr->readAll(iceP_domainId, iceP_id, iceP_reply);
    inS.endReadParams();
    this->findObjectById(::std::move(iceP_domainId), ::std::move(iceP_id), ::std::move(iceP_reply), current);
    inS.writeEmptyParams();
    return true;
}

bool
IceDiscovery::Lookup::_iceD_findAdapterById(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_domainId;
    ::std::string iceP_id;
    ::std::shared_ptr<::IceDiscovery::LookupReplyPrx> iceP_reply;
    istr->readAll(iceP_domainId, iceP_id, iceP_reply);
    inS.endReadParams();
    this->findAdapterById(::std::move(iceP_domainId), ::std::move(iceP_id), ::std::move(iceP_reply), current);
    inS.writeEmptyParams();
    return true;
}

bool
IceDiscovery::Lookup::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceDiscovery_Lookup_ops, iceC_IceDiscovery_Lookup_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceDiscovery_Lookup_ops)
    {
        case 0:
        {
            return _iceD_findAdapterById(in, current);
        }
        case 1:
        {
            return _iceD_findObjectById(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
IceDiscovery::LookupReplyPrx::_iceI_foundObjectById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Identity& iceP_id, const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_prx, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceDiscovery_LookupReply_foundObjectById_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id, iceP_prx);
        },
        nullptr);
}

void
IceDiscovery::LookupReplyPrx::_iceI_foundAdapterById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_id, const ::std::shared_ptr<::Ice::ObjectPrx>& iceP_prx, bool iceP_isReplicaGroup, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceDiscovery_LookupReply_foundAdapterById_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_id, iceP_prx, iceP_isReplicaGroup);
        },
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
IceDiscovery::LookupReplyPrx::_newInstance() const
{
    return ::IceInternal::createProxy<LookupReplyPrx>();
}

const ::std::string&
IceDiscovery::LookupReplyPrx::ice_staticId()
{
    return IceDiscovery::LookupReply::ice_staticId();
}

void
IceDiscovery::LookupPrx::_iceI_findObjectById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_domainId, const ::Ice::Identity& iceP_id, const ::std::shared_ptr<::IceDiscovery::LookupReplyPrx>& iceP_reply, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceDiscovery_Lookup_findObjectById_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_domainId, iceP_id, iceP_reply);
        },
        nullptr);
}

void
IceDiscovery::LookupPrx::_iceI_findAdapterById(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_domainId, const ::std::string& iceP_id, const ::std::shared_ptr<::IceDiscovery::LookupReplyPrx>& iceP_reply, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_IceDiscovery_Lookup_findAdapterById_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_domainId, iceP_id, iceP_reply);
        },
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
IceDiscovery::LookupPrx::_newInstance() const
{
    return ::IceInternal::createProxy<LookupPrx>();
}

const ::std::string&
IceDiscovery::LookupPrx::ice_staticId()
{
    return IceDiscovery::Lookup::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_IceDiscovery_LookupReply_foundObjectById_name = "foundObjectById";

const ::std::string iceC_IceDiscovery_LookupReply_foundAdapterById_name = "foundAdapterById";

const ::std::string iceC_IceDiscovery_Lookup_findObjectById_name = "findObjectById";

const ::std::string iceC_IceDiscovery_Lookup_findAdapterById_name = "findAdapterById";

}
::IceProxy::Ice::Object* ::IceProxy::IceDiscovery::upCast(::IceProxy::IceDiscovery::LookupReply* p) { return p; }

void
::IceProxy::IceDiscovery::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::IceDiscovery::LookupReply>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::IceDiscovery::LookupReply;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::IceDiscovery::LookupReply::_iceI_begin_foundObjectById(const ::Ice::Identity& iceP_id, const ::Ice::ObjectPrx& iceP_prx, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_IceDiscovery_LookupReply_foundObjectById_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_IceDiscovery_LookupReply_foundObjectById_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        ostr->write(iceP_prx);
        result->endWriteParams();
        result->invoke(iceC_IceDiscovery_LookupReply_foundObjectById_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::IceDiscovery::LookupReply::end_foundObjectById(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_IceDiscovery_LookupReply_foundObjectById_name);
}

::Ice::AsyncResultPtr
IceProxy::IceDiscovery::LookupReply::_iceI_begin_foundAdapterById(const ::std::string& iceP_id, const ::Ice::ObjectPrx& iceP_prx, bool iceP_isReplicaGroup, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_IceDiscovery_LookupReply_foundAdapterById_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_IceDiscovery_LookupReply_foundAdapterById_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_id);
        ostr->write(iceP_prx);
        ostr->write(iceP_isReplicaGroup);
        result->endWriteParams();
        result->invoke(iceC_IceDiscovery_LookupReply_foundAdapterById_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::IceDiscovery::LookupReply::end_foundAdapterById(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_IceDiscovery_LookupReply_foundAdapterById_name);
}

::IceProxy::Ice::Object*
IceProxy::IceDiscovery::LookupReply::_newInstance() const
{
    return new LookupReply;
}

const ::std::string&
IceProxy::IceDiscovery::LookupReply::ice_staticId()
{
    return ::IceDiscovery::LookupReply::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::IceDiscovery::upCast(::IceProxy::IceDiscovery::Lookup* p) { return p; }

void
::IceProxy::IceDiscovery::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::IceDiscovery::Lookup>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::IceDiscovery::Lookup;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::IceDiscovery::Lookup::_iceI_begin_findObjectById(const ::std::string& iceP_domainId, const ::Ice::Identity& iceP_id, const ::IceDiscovery::LookupReplyPrx& iceP_reply, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_IceDiscovery_Lookup_findObjectById_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_IceDiscovery_Lookup_findObjectById_name, ::Ice::Idempotent, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_domainId);
        ostr->write(iceP_id);
        ostr->write(iceP_reply);
        result->endWriteParams();
        result->invoke(iceC_IceDiscovery_Lookup_findObjectById_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::IceDiscovery::Lookup::end_findObjectById(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_IceDiscovery_Lookup_findObjectById_name);
}

::Ice::AsyncResultPtr
IceProxy::IceDiscovery::Lookup::_iceI_begin_findAdapterById(const ::std::string& iceP_domainId, const ::std::string& iceP_id, const ::IceDiscovery::LookupReplyPrx& iceP_reply, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_IceDiscovery_Lookup_findAdapterById_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_IceDiscovery_Lookup_findAdapterById_name, ::Ice::Idempotent, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_domainId);
        ostr->write(iceP_id);
        ostr->write(iceP_reply);
        result->endWriteParams();
        result->invoke(iceC_IceDiscovery_Lookup_findAdapterById_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::IceDiscovery::Lookup::end_findAdapterById(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_IceDiscovery_Lookup_findAdapterById_name);
}

::IceProxy::Ice::Object*
IceProxy::IceDiscovery::Lookup::_newInstance() const
{
    return new Lookup;
}

const ::std::string&
IceProxy::IceDiscovery::Lookup::ice_staticId()
{
    return ::IceDiscovery::Lookup::ice_staticId();
}

IceDiscovery::LookupReply::~LookupReply()
{
}

::Ice::Object* IceDiscovery::upCast(::IceDiscovery::LookupReply* p) { return p; }


namespace
{
const ::std::string iceC_IceDiscovery_LookupReply_ids[2] =
{
    "::Ice::Object",
    "::IceDiscovery::LookupReply"
};

}

bool
IceDiscovery::LookupReply::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceDiscovery_LookupReply_ids, iceC_IceDiscovery_LookupReply_ids + 2, s);
}

::std::vector< ::std::string>
IceDiscovery::LookupReply::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_IceDiscovery_LookupReply_ids[0], &iceC_IceDiscovery_LookupReply_ids[2]);
}

const ::std::string&
IceDiscovery::LookupReply::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceDiscovery::LookupReply::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::IceDiscovery::LookupReply";
    return typeId;
#else
    return iceC_IceDiscovery_LookupReply_ids[1];
#endif
}

bool
IceDiscovery::LookupReply::_iceD_foundObjectById(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Identity iceP_id;
    ::Ice::ObjectPrx iceP_prx;
    istr->read(iceP_id);
    istr->read(iceP_prx);
    inS.endReadParams();
    this->foundObjectById(iceP_id, iceP_prx, current);
    inS.writeEmptyParams();
    return true;
}

bool
IceDiscovery::LookupReply::_iceD_foundAdapterById(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_id;
    ::Ice::ObjectPrx iceP_prx;
    bool iceP_isReplicaGroup;
    istr->read(iceP_id);
    istr->read(iceP_prx);
    istr->read(iceP_isReplicaGroup);
    inS.endReadParams();
    this->foundAdapterById(iceP_id, iceP_prx, iceP_isReplicaGroup, current);
    inS.writeEmptyParams();
    return true;
}

namespace
{
const ::std::string iceC_IceDiscovery_LookupReply_all[] =
{
    "foundAdapterById",
    "foundObjectById",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

bool
IceDiscovery::LookupReply::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceDiscovery_LookupReply_all, iceC_IceDiscovery_LookupReply_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceDiscovery_LookupReply_all)
    {
        case 0:
        {
            return _iceD_foundAdapterById(in, current);
        }
        case 1:
        {
            return _iceD_foundObjectById(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
IceDiscovery::LookupReply::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::IceDiscovery::LookupReply, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
IceDiscovery::LookupReply::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::IceDiscovery::LookupReply, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
IceDiscovery::_icePatchObjectPtr(LookupReplyPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::IceDiscovery::LookupReplyPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::IceDiscovery::LookupReply::ice_staticId(), v);
    }
}

IceDiscovery::Lookup::~Lookup()
{
}

::Ice::Object* IceDiscovery::upCast(::IceDiscovery::Lookup* p) { return p; }


namespace
{
const ::std::string iceC_IceDiscovery_Lookup_ids[2] =
{
    "::Ice::Object",
    "::IceDiscovery::Lookup"
};

}

bool
IceDiscovery::Lookup::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_IceDiscovery_Lookup_ids, iceC_IceDiscovery_Lookup_ids + 2, s);
}

::std::vector< ::std::string>
IceDiscovery::Lookup::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_IceDiscovery_Lookup_ids[0], &iceC_IceDiscovery_Lookup_ids[2]);
}

const ::std::string&
IceDiscovery::Lookup::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
IceDiscovery::Lookup::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::IceDiscovery::Lookup";
    return typeId;
#else
    return iceC_IceDiscovery_Lookup_ids[1];
#endif
}

bool
IceDiscovery::Lookup::_iceD_findObjectById(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_domainId;
    ::Ice::Identity iceP_id;
    ::IceDiscovery::LookupReplyPrx iceP_reply;
    istr->read(iceP_domainId);
    istr->read(iceP_id);
    istr->read(iceP_reply);
    inS.endReadParams();
    this->findObjectById(iceP_domainId, iceP_id, iceP_reply, current);
    inS.writeEmptyParams();
    return true;
}

bool
IceDiscovery::Lookup::_iceD_findAdapterById(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_domainId;
    ::std::string iceP_id;
    ::IceDiscovery::LookupReplyPrx iceP_reply;
    istr->read(iceP_domainId);
    istr->read(iceP_id);
    istr->read(iceP_reply);
    inS.endReadParams();
    this->findAdapterById(iceP_domainId, iceP_id, iceP_reply, current);
    inS.writeEmptyParams();
    return true;
}

namespace
{
const ::std::string iceC_IceDiscovery_Lookup_all[] =
{
    "findAdapterById",
    "findObjectById",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

bool
IceDiscovery::Lookup::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_IceDiscovery_Lookup_all, iceC_IceDiscovery_Lookup_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_IceDiscovery_Lookup_all)
    {
        case 0:
        {
            return _iceD_findAdapterById(in, current);
        }
        case 1:
        {
            return _iceD_findObjectById(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
IceDiscovery::Lookup::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::IceDiscovery::Lookup, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
IceDiscovery::Lookup::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::IceDiscovery::Lookup, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
IceDiscovery::_icePatchObjectPtr(LookupPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::IceDiscovery::LookupPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::IceDiscovery::Lookup::ice_staticId(), v);
    }
}

namespace Ice
{
}

#endif
