// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `IceLocatorDiscovery.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __IceLocatorDiscovery_IceLocatorDiscovery_h__
#define __IceLocatorDiscovery_IceLocatorDiscovery_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <Ice/Locator.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace IceLocatorDiscovery
{

class LookupReply;
class LookupReplyPrx;
class Lookup;
class LookupPrx;

}

namespace IceLocatorDiscovery
{

class LookupReply : public virtual ::Ice::Object
{
public:

    using ProxyType = LookupReplyPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void foundLocator(::std::shared_ptr<::Ice::LocatorPrx>, const ::Ice::Current&) = 0;
    bool _iceD_foundLocator(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

class Lookup : public virtual ::Ice::Object
{
public:

    using ProxyType = LookupPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void findLocator(::std::string, ::std::shared_ptr<::IceLocatorDiscovery::LookupReplyPrx>, const ::Ice::Current&) = 0;
    bool _iceD_findLocator(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace IceLocatorDiscovery
{

class LookupReplyPrx : public virtual ::Ice::Proxy<LookupReplyPrx, ::Ice::ObjectPrx>
{
public:

    void foundLocator(const ::std::shared_ptr<::Ice::LocatorPrx>& iceP_prx, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IceLocatorDiscovery::LookupReplyPrx::_iceI_foundLocator, iceP_prx, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto foundLocatorAsync(const ::std::shared_ptr<::Ice::LocatorPrx>& iceP_prx, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IceLocatorDiscovery::LookupReplyPrx::_iceI_foundLocator, iceP_prx, context);
    }

    ::std::function<void()>
    foundLocatorAsync(const ::std::shared_ptr<::Ice::LocatorPrx>& iceP_prx,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &IceLocatorDiscovery::LookupReplyPrx::_iceI_foundLocator, iceP_prx, context);
    }

    void _iceI_foundLocator(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<::Ice::LocatorPrx>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    LookupReplyPrx() = default;
    friend ::std::shared_ptr<LookupReplyPrx> IceInternal::createProxy<LookupReplyPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

class LookupPrx : public virtual ::Ice::Proxy<LookupPrx, ::Ice::ObjectPrx>
{
public:

    void findLocator(const ::std::string& iceP_instanceName, const ::std::shared_ptr<::IceLocatorDiscovery::LookupReplyPrx>& iceP_reply, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IceLocatorDiscovery::LookupPrx::_iceI_findLocator, iceP_instanceName, iceP_reply, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto findLocatorAsync(const ::std::string& iceP_instanceName, const ::std::shared_ptr<::IceLocatorDiscovery::LookupReplyPrx>& iceP_reply, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IceLocatorDiscovery::LookupPrx::_iceI_findLocator, iceP_instanceName, iceP_reply, context);
    }

    ::std::function<void()>
    findLocatorAsync(const ::std::string& iceP_instanceName, const ::std::shared_ptr<::IceLocatorDiscovery::LookupReplyPrx>& iceP_reply,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &IceLocatorDiscovery::LookupPrx::_iceI_findLocator, iceP_instanceName, iceP_reply, context);
    }

    void _iceI_findLocator(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::shared_ptr<::IceLocatorDiscovery::LookupReplyPrx>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    LookupPrx() = default;
    friend ::std::shared_ptr<LookupPrx> IceInternal::createProxy<LookupPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

}

namespace IceLocatorDiscovery
{

using LookupReplyPtr = ::std::shared_ptr<LookupReply>;
using LookupReplyPrxPtr = ::std::shared_ptr<LookupReplyPrx>;

using LookupPtr = ::std::shared_ptr<Lookup>;
using LookupPrxPtr = ::std::shared_ptr<LookupPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace IceLocatorDiscovery
{

class LookupReply;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceLocatorDiscovery::LookupReply>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceLocatorDiscovery::LookupReply*);

class Lookup;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceLocatorDiscovery::Lookup>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceLocatorDiscovery::Lookup*);

}

}

namespace IceLocatorDiscovery
{

class LookupReply;
::Ice::Object* upCast(::IceLocatorDiscovery::LookupReply*);
typedef ::IceInternal::Handle< ::IceLocatorDiscovery::LookupReply> LookupReplyPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceLocatorDiscovery::LookupReply> LookupReplyPrx;
typedef LookupReplyPrx LookupReplyPrxPtr;
void _icePatchObjectPtr(LookupReplyPtr&, const ::Ice::ObjectPtr&);

class Lookup;
::Ice::Object* upCast(::IceLocatorDiscovery::Lookup*);
typedef ::IceInternal::Handle< ::IceLocatorDiscovery::Lookup> LookupPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceLocatorDiscovery::Lookup> LookupPrx;
typedef LookupPrx LookupPrxPtr;
void _icePatchObjectPtr(LookupPtr&, const ::Ice::ObjectPtr&);

}

namespace IceAsync
{

}

namespace IceLocatorDiscovery
{

class Callback_LookupReply_foundLocator_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LookupReply_foundLocator_Base> Callback_LookupReply_foundLocatorPtr;

class Callback_Lookup_findLocator_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lookup_findLocator_Base> Callback_Lookup_findLocatorPtr;

}

namespace IceProxy
{

namespace IceLocatorDiscovery
{

class LookupReply : public virtual ::Ice::Proxy<LookupReply, ::IceProxy::Ice::Object>
{
public:

    void foundLocator(const ::Ice::LocatorPrx& iceP_prx, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_foundLocator(_iceI_begin_foundLocator(iceP_prx, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_foundLocator(const ::Ice::LocatorPrx& iceP_prx, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_foundLocator(iceP_prx, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_foundLocator(const ::Ice::LocatorPrx& iceP_prx, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foundLocator(iceP_prx, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_foundLocator(const ::Ice::LocatorPrx& iceP_prx, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foundLocator(iceP_prx, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_foundLocator(const ::Ice::LocatorPrx& iceP_prx, const ::IceLocatorDiscovery::Callback_LookupReply_foundLocatorPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foundLocator(iceP_prx, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_foundLocator(const ::Ice::LocatorPrx& iceP_prx, const ::Ice::Context& context, const ::IceLocatorDiscovery::Callback_LookupReply_foundLocatorPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_foundLocator(iceP_prx, context, del, cookie);
    }

    void end_foundLocator(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_foundLocator(const ::Ice::LocatorPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

class Lookup : public virtual ::Ice::Proxy<Lookup, ::IceProxy::Ice::Object>
{
public:

    void findLocator(const ::std::string& iceP_instanceName, const ::IceLocatorDiscovery::LookupReplyPrx& iceP_reply, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_findLocator(_iceI_begin_findLocator(iceP_instanceName, iceP_reply, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_findLocator(const ::std::string& iceP_instanceName, const ::IceLocatorDiscovery::LookupReplyPrx& iceP_reply, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_findLocator(iceP_instanceName, iceP_reply, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findLocator(const ::std::string& iceP_instanceName, const ::IceLocatorDiscovery::LookupReplyPrx& iceP_reply, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findLocator(iceP_instanceName, iceP_reply, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_findLocator(const ::std::string& iceP_instanceName, const ::IceLocatorDiscovery::LookupReplyPrx& iceP_reply, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findLocator(iceP_instanceName, iceP_reply, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_findLocator(const ::std::string& iceP_instanceName, const ::IceLocatorDiscovery::LookupReplyPrx& iceP_reply, const ::IceLocatorDiscovery::Callback_Lookup_findLocatorPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findLocator(iceP_instanceName, iceP_reply, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_findLocator(const ::std::string& iceP_instanceName, const ::IceLocatorDiscovery::LookupReplyPrx& iceP_reply, const ::Ice::Context& context, const ::IceLocatorDiscovery::Callback_Lookup_findLocatorPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_findLocator(iceP_instanceName, iceP_reply, context, del, cookie);
    }

    void end_findLocator(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_findLocator(const ::std::string&, const ::IceLocatorDiscovery::LookupReplyPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace IceLocatorDiscovery
{

class LookupReply : public virtual ::Ice::Object
{
public:

    typedef LookupReplyPrx ProxyType;
    typedef LookupReplyPtr PointerType;

    virtual ~LookupReply();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void foundLocator(const ::Ice::LocatorPrx&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_foundLocator(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const LookupReply& lhs, const LookupReply& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const LookupReply& lhs, const LookupReply& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

class Lookup : public virtual ::Ice::Object
{
public:

    typedef LookupPrx ProxyType;
    typedef LookupPtr PointerType;

    virtual ~Lookup();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void findLocator(const ::std::string&, const ::IceLocatorDiscovery::LookupReplyPrx&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_findLocator(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const Lookup& lhs, const Lookup& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Lookup& lhs, const Lookup& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

}

namespace IceLocatorDiscovery
{

template<class T>
class CallbackNC_LookupReply_foundLocator : public Callback_LookupReply_foundLocator_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_LookupReply_foundLocator(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_LookupReply_foundLocatorPtr
newCallback_LookupReply_foundLocator(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LookupReply_foundLocator<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LookupReply_foundLocatorPtr
newCallback_LookupReply_foundLocator(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LookupReply_foundLocator<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_LookupReply_foundLocatorPtr
newCallback_LookupReply_foundLocator(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LookupReply_foundLocator<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_LookupReply_foundLocatorPtr
newCallback_LookupReply_foundLocator(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LookupReply_foundLocator<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_LookupReply_foundLocator : public Callback_LookupReply_foundLocator_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_LookupReply_foundLocator(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_LookupReply_foundLocatorPtr
newCallback_LookupReply_foundLocator(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LookupReply_foundLocator<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LookupReply_foundLocatorPtr
newCallback_LookupReply_foundLocator(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LookupReply_foundLocator<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_LookupReply_foundLocatorPtr
newCallback_LookupReply_foundLocator(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LookupReply_foundLocator<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_LookupReply_foundLocatorPtr
newCallback_LookupReply_foundLocator(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LookupReply_foundLocator<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Lookup_findLocator : public Callback_Lookup_findLocator_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Lookup_findLocator(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Lookup_findLocatorPtr
newCallback_Lookup_findLocator(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lookup_findLocator<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Lookup_findLocatorPtr
newCallback_Lookup_findLocator(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lookup_findLocator<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Lookup_findLocatorPtr
newCallback_Lookup_findLocator(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lookup_findLocator<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Lookup_findLocatorPtr
newCallback_Lookup_findLocator(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lookup_findLocator<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Lookup_findLocator : public Callback_Lookup_findLocator_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Lookup_findLocator(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Lookup_findLocatorPtr
newCallback_Lookup_findLocator(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lookup_findLocator<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Lookup_findLocatorPtr
newCallback_Lookup_findLocator(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lookup_findLocator<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Lookup_findLocatorPtr
newCallback_Lookup_findLocator(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lookup_findLocator<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Lookup_findLocatorPtr
newCallback_Lookup_findLocator(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lookup_findLocator<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
