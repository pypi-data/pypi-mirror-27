# coding: utf-8

"""
    FeersumNLU API

    This is the HTTP API for Feersum NLU. See https://github.com/praekelt/feersum-nlu-api-wrappers for examples of how to use the API.

    OpenAPI spec version: 2.0.3
    Contact: nlu@feersum.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InstanceDetail(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, id=None, desc=None, training_accuracy=None, training_stamp=None, training_cm=None, cm_labels=None, word_manifold_list=None, threshold=None):
        """
        InstanceDetail - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'id': 'str',
            'desc': 'str',
            'training_accuracy': 'float',
            'training_stamp': 'str',
            'training_cm': 'object',
            'cm_labels': 'object',
            'word_manifold_list': 'list[LabeledWordManifold]',
            'threshold': 'float'
        }

        self.attribute_map = {
            'name': 'name',
            'id': 'id',
            'desc': 'desc',
            'training_accuracy': 'training_accuracy',
            'training_stamp': 'training_stamp',
            'training_cm': 'training_cm',
            'cm_labels': 'cm_labels',
            'word_manifold_list': 'word_manifold_list',
            'threshold': 'threshold'
        }

        self._name = name
        self._id = id
        self._desc = desc
        self._training_accuracy = training_accuracy
        self._training_stamp = training_stamp
        self._training_cm = training_cm
        self._cm_labels = cm_labels
        self._word_manifold_list = word_manifold_list
        self._threshold = threshold


    @property
    def name(self):
        """
        Gets the name of this InstanceDetail.
        The sluggy-url-friendly-name of the instance.

        :return: The name of this InstanceDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InstanceDetail.
        The sluggy-url-friendly-name of the instance.

        :param name: The name of this InstanceDetail.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def id(self):
        """
        Gets the id of this InstanceDetail.
        The unique id of a specific version of the model instance.

        :return: The id of this InstanceDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InstanceDetail.
        The unique id of a specific version of the model instance.

        :param id: The id of this InstanceDetail.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def desc(self):
        """
        Gets the desc of this InstanceDetail.
        The longer existential description of this instance's purpose in life.

        :return: The desc of this InstanceDetail.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """
        Sets the desc of this InstanceDetail.
        The longer existential description of this instance's purpose in life.

        :param desc: The desc of this InstanceDetail.
        :type: str
        """

        self._desc = desc

    @property
    def training_accuracy(self):
        """
        Gets the training_accuracy of this InstanceDetail.
        The accuracy of the model as measured on the training set.

        :return: The training_accuracy of this InstanceDetail.
        :rtype: float
        """
        return self._training_accuracy

    @training_accuracy.setter
    def training_accuracy(self, training_accuracy):
        """
        Sets the training_accuracy of this InstanceDetail.
        The accuracy of the model as measured on the training set.

        :param training_accuracy: The training_accuracy of this InstanceDetail.
        :type: float
        """

        self._training_accuracy = training_accuracy

    @property
    def training_stamp(self):
        """
        Gets the training_stamp of this InstanceDetail.
        The time when the training operation concluded.

        :return: The training_stamp of this InstanceDetail.
        :rtype: str
        """
        return self._training_stamp

    @training_stamp.setter
    def training_stamp(self, training_stamp):
        """
        Sets the training_stamp of this InstanceDetail.
        The time when the training operation concluded.

        :param training_stamp: The training_stamp of this InstanceDetail.
        :type: str
        """

        self._training_stamp = training_stamp

    @property
    def training_cm(self):
        """
        Gets the training_cm of this InstanceDetail.
        The confusion matrix as measured on the training set. The matrix is expected to be quite sparse so a compact dict of dicts representation is used.

        :return: The training_cm of this InstanceDetail.
        :rtype: object
        """
        return self._training_cm

    @training_cm.setter
    def training_cm(self, training_cm):
        """
        Sets the training_cm of this InstanceDetail.
        The confusion matrix as measured on the training set. The matrix is expected to be quite sparse so a compact dict of dicts representation is used.

        :param training_cm: The training_cm of this InstanceDetail.
        :type: object
        """

        self._training_cm = training_cm

    @property
    def cm_labels(self):
        """
        Gets the cm_labels of this InstanceDetail.
        A dict that, if present, maps from the confusion matrix row and column labels to longer more descriptive labels. For example, if present it maps an FAQ answer ID to the string answer which may be either a label or the full text answer.

        :return: The cm_labels of this InstanceDetail.
        :rtype: object
        """
        return self._cm_labels

    @cm_labels.setter
    def cm_labels(self, cm_labels):
        """
        Sets the cm_labels of this InstanceDetail.
        A dict that, if present, maps from the confusion matrix row and column labels to longer more descriptive labels. For example, if present it maps an FAQ answer ID to the string answer which may be either a label or the full text answer.

        :param cm_labels: The cm_labels of this InstanceDetail.
        :type: object
        """

        self._cm_labels = cm_labels

    @property
    def word_manifold_list(self):
        """
        Gets the word_manifold_list of this InstanceDetail.
        The list of labelled word manifolds to use for training.

        :return: The word_manifold_list of this InstanceDetail.
        :rtype: list[LabeledWordManifold]
        """
        return self._word_manifold_list

    @word_manifold_list.setter
    def word_manifold_list(self, word_manifold_list):
        """
        Sets the word_manifold_list of this InstanceDetail.
        The list of labelled word manifolds to use for training.

        :param word_manifold_list: The word_manifold_list of this InstanceDetail.
        :type: list[LabeledWordManifold]
        """

        self._word_manifold_list = word_manifold_list

    @property
    def threshold(self):
        """
        Gets the threshold of this InstanceDetail.
        There is typically some model dependent threshold to be set upon training and which is possibly mutable post training. This is that threshold.

        :return: The threshold of this InstanceDetail.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """
        Sets the threshold of this InstanceDetail.
        There is typically some model dependent threshold to be set upon training and which is possibly mutable post training. This is that threshold.

        :param threshold: The threshold of this InstanceDetail.
        :type: float
        """

        self._threshold = threshold

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
