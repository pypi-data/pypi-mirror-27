# coding: utf-8

"""
    FeersumNLU API

    This is the HTTP API for Feersum NLU. See https://github.com/praekelt/feersum-nlu-api-wrappers for examples of how to use the API.

    OpenAPI spec version: 2.0.3
    Contact: nlu@feersum.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class IntentClassifiersApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def intent_classifier_add_training_samples(self, instance_name, labelled_text_sample_list, **kwargs):
        """
        Add training samples.
        Add training samples to named intent classifier. Returns the classifier's updated number of training samples.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_add_training_samples(instance_name, labelled_text_sample_list, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :param LabelledTextSampleList labelled_text_sample_list: List of labelled text samples. (required)
        :return: TotalSamples
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.intent_classifier_add_training_samples_with_http_info(instance_name, labelled_text_sample_list, **kwargs)
        else:
            (data) = self.intent_classifier_add_training_samples_with_http_info(instance_name, labelled_text_sample_list, **kwargs)
            return data

    def intent_classifier_add_training_samples_with_http_info(self, instance_name, labelled_text_sample_list, **kwargs):
        """
        Add training samples.
        Add training samples to named intent classifier. Returns the classifier's updated number of training samples.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_add_training_samples_with_http_info(instance_name, labelled_text_sample_list, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :param LabelledTextSampleList labelled_text_sample_list: List of labelled text samples. (required)
        :return: TotalSamples
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'labelled_text_sample_list']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intent_classifier_add_training_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params) or (params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `intent_classifier_add_training_samples`")
        # verify the required parameter 'labelled_text_sample_list' is set
        if ('labelled_text_sample_list' not in params) or (params['labelled_text_sample_list'] is None):
            raise ValueError("Missing the required parameter `labelled_text_sample_list` when calling `intent_classifier_add_training_samples`")


        collection_formats = {}

        resource_path = '/intent_classifiers/{instance_name}/training_samples'.replace('{format}', 'json')
        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'labelled_text_sample_list' in params:
            body_params = params['labelled_text_sample_list']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TotalSamples',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def intent_classifier_create(self, create_details, **kwargs):
        """
        Create an intent classifier.
        Create a new intent classifier or load one from the store. Returns the details of the new or loaded instance.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_create(create_details, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateDetails create_details: The details of the instance to create. (required)
        :return: InstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.intent_classifier_create_with_http_info(create_details, **kwargs)
        else:
            (data) = self.intent_classifier_create_with_http_info(create_details, **kwargs)
            return data

    def intent_classifier_create_with_http_info(self, create_details, **kwargs):
        """
        Create an intent classifier.
        Create a new intent classifier or load one from the store. Returns the details of the new or loaded instance.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_create_with_http_info(create_details, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CreateDetails create_details: The details of the instance to create. (required)
        :return: InstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_details']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intent_classifier_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_details' is set
        if ('create_details' not in params) or (params['create_details'] is None):
            raise ValueError("Missing the required parameter `create_details` when calling `intent_classifier_create`")


        collection_formats = {}

        resource_path = '/intent_classifiers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_details' in params:
            body_params = params['create_details']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InstanceDetail',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def intent_classifier_curate(self, instance_name, label_pair, **kwargs):
        """
        Endpoint to aid in the curation of a model instance.
        Returns the list of samples behind a cell of the confusion matrix of the training or testing samples.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_curate(instance_name, label_pair, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :param ClassLabelPair label_pair: The true label, predicted label and matrix (train/test) to use. (required)
        :return: LabelledTextSampleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.intent_classifier_curate_with_http_info(instance_name, label_pair, **kwargs)
        else:
            (data) = self.intent_classifier_curate_with_http_info(instance_name, label_pair, **kwargs)
            return data

    def intent_classifier_curate_with_http_info(self, instance_name, label_pair, **kwargs):
        """
        Endpoint to aid in the curation of a model instance.
        Returns the list of samples behind a cell of the confusion matrix of the training or testing samples.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_curate_with_http_info(instance_name, label_pair, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :param ClassLabelPair label_pair: The true label, predicted label and matrix (train/test) to use. (required)
        :return: LabelledTextSampleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'label_pair']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intent_classifier_curate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params) or (params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `intent_classifier_curate`")
        # verify the required parameter 'label_pair' is set
        if ('label_pair' not in params) or (params['label_pair'] is None):
            raise ValueError("Missing the required parameter `label_pair` when calling `intent_classifier_curate`")


        collection_formats = {}

        resource_path = '/intent_classifiers/{instance_name}/curate'.replace('{format}', 'json')
        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'label_pair' in params:
            body_params = params['label_pair']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LabelledTextSampleList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def intent_classifier_del_training_samples(self, instance_name, **kwargs):
        """
        Delete training samples.
        Delete the training samples of the named intent classifier. Returns the deleted samples.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_del_training_samples(instance_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :return: LabelledTextSampleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.intent_classifier_del_training_samples_with_http_info(instance_name, **kwargs)
        else:
            (data) = self.intent_classifier_del_training_samples_with_http_info(instance_name, **kwargs)
            return data

    def intent_classifier_del_training_samples_with_http_info(self, instance_name, **kwargs):
        """
        Delete training samples.
        Delete the training samples of the named intent classifier. Returns the deleted samples.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_del_training_samples_with_http_info(instance_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :return: LabelledTextSampleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intent_classifier_del_training_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params) or (params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `intent_classifier_del_training_samples`")


        collection_formats = {}

        resource_path = '/intent_classifiers/{instance_name}/training_samples'.replace('{format}', 'json')
        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LabelledTextSampleList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def intent_classifier_get_details(self, instance_name, **kwargs):
        """
        Get details of named instance.
        Returns the details of the named intent classifier instance.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_get_details(instance_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :return: InstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.intent_classifier_get_details_with_http_info(instance_name, **kwargs)
        else:
            (data) = self.intent_classifier_get_details_with_http_info(instance_name, **kwargs)
            return data

    def intent_classifier_get_details_with_http_info(self, instance_name, **kwargs):
        """
        Get details of named instance.
        Returns the details of the named intent classifier instance.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_get_details_with_http_info(instance_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :return: InstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intent_classifier_get_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params) or (params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `intent_classifier_get_details`")


        collection_formats = {}

        resource_path = '/intent_classifiers/{instance_name}'.replace('{format}', 'json')
        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InstanceDetail',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def intent_classifier_get_details_all(self, **kwargs):
        """
        Get list of loaded intent classifiers.
        Returns the list of loaded intent classifiers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_get_details_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InstanceDetailList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.intent_classifier_get_details_all_with_http_info(**kwargs)
        else:
            (data) = self.intent_classifier_get_details_all_with_http_info(**kwargs)
            return data

    def intent_classifier_get_details_all_with_http_info(self, **kwargs):
        """
        Get list of loaded intent classifiers.
        Returns the list of loaded intent classifiers.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_get_details_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InstanceDetailList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intent_classifier_get_details_all" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/intent_classifiers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InstanceDetailList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def intent_classifier_get_labels(self, instance_name, **kwargs):
        """
        Get list of possible labels.
        Returns the classifier's list of possible class labels.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_get_labels(instance_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :return: ClassLabelList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.intent_classifier_get_labels_with_http_info(instance_name, **kwargs)
        else:
            (data) = self.intent_classifier_get_labels_with_http_info(instance_name, **kwargs)
            return data

    def intent_classifier_get_labels_with_http_info(self, instance_name, **kwargs):
        """
        Get list of possible labels.
        Returns the classifier's list of possible class labels.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_get_labels_with_http_info(instance_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :return: ClassLabelList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intent_classifier_get_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params) or (params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `intent_classifier_get_labels`")


        collection_formats = {}

        resource_path = '/intent_classifiers/{instance_name}/get_labels'.replace('{format}', 'json')
        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ClassLabelList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def intent_classifier_get_training_samples(self, instance_name, **kwargs):
        """
        Get training samples.
        Returns the training samples of the named intent classifier.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_get_training_samples(instance_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :return: LabelledTextSampleList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.intent_classifier_get_training_samples_with_http_info(instance_name, **kwargs)
        else:
            (data) = self.intent_classifier_get_training_samples_with_http_info(instance_name, **kwargs)
            return data

    def intent_classifier_get_training_samples_with_http_info(self, instance_name, **kwargs):
        """
        Get training samples.
        Returns the training samples of the named intent classifier.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_get_training_samples_with_http_info(instance_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :return: LabelledTextSampleList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intent_classifier_get_training_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params) or (params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `intent_classifier_get_training_samples`")


        collection_formats = {}

        resource_path = '/intent_classifiers/{instance_name}/training_samples'.replace('{format}', 'json')
        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LabelledTextSampleList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def intent_classifier_online_training_samples(self, instance_name, labelled_text_sample_list, **kwargs):
        """
        Train/update the classifier online with the samples provided.
        Train/update the classifier online with the samples provided. This operation is more efficient than a full re-train. Returns the classifier's updated number of training samples.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_online_training_samples(instance_name, labelled_text_sample_list, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :param LabelledTextSampleList labelled_text_sample_list: List of labelled text samples. (required)
        :return: TotalSamples
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.intent_classifier_online_training_samples_with_http_info(instance_name, labelled_text_sample_list, **kwargs)
        else:
            (data) = self.intent_classifier_online_training_samples_with_http_info(instance_name, labelled_text_sample_list, **kwargs)
            return data

    def intent_classifier_online_training_samples_with_http_info(self, instance_name, labelled_text_sample_list, **kwargs):
        """
        Train/update the classifier online with the samples provided.
        Train/update the classifier online with the samples provided. This operation is more efficient than a full re-train. Returns the classifier's updated number of training samples.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_online_training_samples_with_http_info(instance_name, labelled_text_sample_list, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :param LabelledTextSampleList labelled_text_sample_list: List of labelled text samples. (required)
        :return: TotalSamples
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'labelled_text_sample_list']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intent_classifier_online_training_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params) or (params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `intent_classifier_online_training_samples`")
        # verify the required parameter 'labelled_text_sample_list' is set
        if ('labelled_text_sample_list' not in params) or (params['labelled_text_sample_list'] is None):
            raise ValueError("Missing the required parameter `labelled_text_sample_list` when calling `intent_classifier_online_training_samples`")


        collection_formats = {}

        resource_path = '/intent_classifiers/{instance_name}/online_training_samples'.replace('{format}', 'json')
        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'labelled_text_sample_list' in params:
            body_params = params['labelled_text_sample_list']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TotalSamples',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def intent_classifier_retrieve(self, instance_name, text_input, **kwargs):
        """
        Classify intent.
        Classifies the intent and returns a probability sorted list of classes.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_retrieve(instance_name, text_input, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :param TextInput text_input: The input text. (required)
        :return: ScoredLabelList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.intent_classifier_retrieve_with_http_info(instance_name, text_input, **kwargs)
        else:
            (data) = self.intent_classifier_retrieve_with_http_info(instance_name, text_input, **kwargs)
            return data

    def intent_classifier_retrieve_with_http_info(self, instance_name, text_input, **kwargs):
        """
        Classify intent.
        Classifies the intent and returns a probability sorted list of classes.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_retrieve_with_http_info(instance_name, text_input, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :param TextInput text_input: The input text. (required)
        :return: ScoredLabelList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'text_input']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intent_classifier_retrieve" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params) or (params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `intent_classifier_retrieve`")
        # verify the required parameter 'text_input' is set
        if ('text_input' not in params) or (params['text_input'] is None):
            raise ValueError("Missing the required parameter `text_input` when calling `intent_classifier_retrieve`")


        collection_formats = {}

        resource_path = '/intent_classifiers/{instance_name}/retrieve'.replace('{format}', 'json')
        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'text_input' in params:
            body_params = params['text_input']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ScoredLabelList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def intent_classifier_train(self, instance_name, train_details, **kwargs):
        """
        Train the named intent classifier.
        Train the named intent classifier with the training and testing data already provided. Returns the updated instance details.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_train(instance_name, train_details, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :param TrainDetails train_details: The arguments provided to the train operation. (required)
        :return: InstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.intent_classifier_train_with_http_info(instance_name, train_details, **kwargs)
        else:
            (data) = self.intent_classifier_train_with_http_info(instance_name, train_details, **kwargs)
            return data

    def intent_classifier_train_with_http_info(self, instance_name, train_details, **kwargs):
        """
        Train the named intent classifier.
        Train the named intent classifier with the training and testing data already provided. Returns the updated instance details.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.intent_classifier_train_with_http_info(instance_name, train_details, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance_name: The name of the model instance. (required)
        :param TrainDetails train_details: The arguments provided to the train operation. (required)
        :return: InstanceDetail
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance_name', 'train_details']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intent_classifier_train" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance_name' is set
        if ('instance_name' not in params) or (params['instance_name'] is None):
            raise ValueError("Missing the required parameter `instance_name` when calling `intent_classifier_train`")
        # verify the required parameter 'train_details' is set
        if ('train_details' not in params) or (params['train_details'] is None):
            raise ValueError("Missing the required parameter `train_details` when calling `intent_classifier_train`")


        collection_formats = {}

        resource_path = '/intent_classifiers/{instance_name}/train'.replace('{format}', 'json')
        path_params = {}
        if 'instance_name' in params:
            path_params['instance_name'] = params['instance_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'train_details' in params:
            body_params = params['train_details']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InstanceDetail',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)
