# coding: utf-8

"""
    FeersumNLU API

    This is the HTTP API for Feersum NLU. See https://github.com/praekelt/feersum-nlu-api-wrappers for examples of how to use the API.

    OpenAPI spec version: 2.0.3
    Contact: nlu@feersum.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class TrainDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, immediate_mode=None, threshold=None, word_manifold=None, word_manifold_list=None):
        """
        TrainDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'immediate_mode': 'bool',
            'threshold': 'float',
            'word_manifold': 'str',
            'word_manifold_list': 'list[LabeledWordManifold]'
        }

        self.attribute_map = {
            'immediate_mode': 'immediate_mode',
            'threshold': 'threshold',
            'word_manifold': 'word_manifold',
            'word_manifold_list': 'word_manifold_list'
        }

        self._immediate_mode = immediate_mode
        self._threshold = threshold
        self._word_manifold = word_manifold
        self._word_manifold_list = word_manifold_list


    @property
    def immediate_mode(self):
        """
        Gets the immediate_mode of this TrainDetails.
        Causes the API call to be blocking and return only once training is complete. Forced to true in the current implementation.

        :return: The immediate_mode of this TrainDetails.
        :rtype: bool
        """
        return self._immediate_mode

    @immediate_mode.setter
    def immediate_mode(self, immediate_mode):
        """
        Sets the immediate_mode of this TrainDetails.
        Causes the API call to be blocking and return only once training is complete. Forced to true in the current implementation.

        :param immediate_mode: The immediate_mode of this TrainDetails.
        :type: bool
        """
        if immediate_mode is None:
            raise ValueError("Invalid value for `immediate_mode`, must not be `None`")

        self._immediate_mode = immediate_mode

    @property
    def threshold(self):
        """
        Gets the threshold of this TrainDetails.
        There is typically some model dependent threshold to be set upon training which is possibly mutable post training. This is that threshold.

        :return: The threshold of this TrainDetails.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """
        Sets the threshold of this TrainDetails.
        There is typically some model dependent threshold to be set upon training which is possibly mutable post training. This is that threshold.

        :param threshold: The threshold of this TrainDetails.
        :type: float
        """

        self._threshold = threshold

    @property
    def word_manifold(self):
        """
        Gets the word_manifold of this TrainDetails.
        The word manifold instance to use for training and later inference.   Rather use the word_manifold_list for supplying a language labelled list of word manifold instances to use in a multi-language system. 

        :return: The word_manifold of this TrainDetails.
        :rtype: str
        """
        return self._word_manifold

    @word_manifold.setter
    def word_manifold(self, word_manifold):
        """
        Sets the word_manifold of this TrainDetails.
        The word manifold instance to use for training and later inference.   Rather use the word_manifold_list for supplying a language labelled list of word manifold instances to use in a multi-language system. 

        :param word_manifold: The word_manifold of this TrainDetails.
        :type: str
        """

        self._word_manifold = word_manifold

    @property
    def word_manifold_list(self):
        """
        Gets the word_manifold_list of this TrainDetails.
        The list of labelled word manifolds to use for training.

        :return: The word_manifold_list of this TrainDetails.
        :rtype: list[LabeledWordManifold]
        """
        return self._word_manifold_list

    @word_manifold_list.setter
    def word_manifold_list(self, word_manifold_list):
        """
        Sets the word_manifold_list of this TrainDetails.
        The list of labelled word manifolds to use for training.

        :param word_manifold_list: The word_manifold_list of this TrainDetails.
        :type: list[LabeledWordManifold]
        """

        self._word_manifold_list = word_manifold_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
