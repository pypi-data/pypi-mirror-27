# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dragon.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from .services.common import service_pb2 as services_dot_common_dot_service__pb2
from .common import common_pb2 as common_dot_common__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='dragon.proto',
  package='manager',
  syntax='proto3',
  serialized_pb=_b('\n\x0c\x64ragon.proto\x12\x07manager\x1a\x1dservices/common/service.proto\x1a\x13\x63ommon/common.proto\"\x95\x01\n\x08Instance\x12\x0e\n\x06taskID\x18\x01 \x01(\x05\x12\x15\n\rcontainerName\x18\x02 \x01(\t\x12\x13\n\x0b\x63ontainerID\x18\x03 \x01(\t\x12\x13\n\x0bserviceName\x18\x04 \x01(\t\x12\x12\n\nconfigHash\x18\x05 \x01(\t\x12\n\n\x02\x64\x63\x18\x06 \x01(\t\x12\n\n\x02ip\x18\x07 \x01(\t\x12\x0c\n\x04port\x18\x08 \x01(\x05\"?\n\x04Node\x12\n\n\x02ip\x18\x01 \x01(\t\x12\x10\n\x08hostName\x18\x02 \x01(\t\x12\x0b\n\x03ram\x18\x03 \x01(\t\x12\x0c\n\x04\x63ore\x18\x04 \x01(\t\"0\n\x02\x44\x43\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x1c\n\x05nodes\x18\x02 \x03(\x0b\x32\r.manager.Node\"\x14\n\x12GetClustersRequest\"S\n\x13GetClustersResponse\x12\x18\n\x03\x64\x63s\x18\x01 \x03(\x0b\x32\x0b.manager.DC\x12\"\n\x08response\x18\x02 \x01(\x0b\x32\x10.common.Response\"\x14\n\x12GetServicesRequest\"b\n\x13GetServicesResponse\x12\'\n\x08services\x18\x01 \x03(\x0b\x32\x15.serviceproto.Service\x12\"\n\x08response\x18\x02 \x01(\x0b\x32\x10.common.Response\")\n\x11GetServiceRequest\x12\x14\n\x0cservice_name\x18\x01 \x01(\t\"\x86\x01\n\x12GetServiceResponse\x12&\n\x07service\x18\x01 \x01(\x0b\x32\x15.serviceproto.Service\x12$\n\tinstances\x18\x02 \x03(\x0b\x32\x11.manager.Instance\x12\"\n\x08response\x18\x03 \x01(\x0b\x32\x10.common.Response\"3\n\x1bGetServiceLBInstanceRequest\x12\x14\n\x0cservice_name\x18\x01 \x01(\t\"g\n\x1cGetServiceLBInstanceResponse\x12#\n\x08instance\x18\x01 \x01(\x0b\x32\x11.manager.Instance\x12\"\n\x08response\x18\x02 \x01(\x0b\x32\x10.common.Response\"J\n\x1dRestartServiceInstanceRequest\x12\x14\n\x0cservice_name\x18\x01 \x01(\t\x12\x13\n\x0binstance_id\x18\x02 \x01(\x05\"D\n\x1eRestartServiceInstanceResponse\x12\"\n\x08response\x18\x01 \x01(\x0b\x32\x10.common.Response\"G\n\x1aKillServiceInstanceRequest\x12\x14\n\x0cservice_name\x18\x01 \x01(\t\x12\x13\n\x0binstance_id\x18\x02 \x01(\x05\"A\n\x1bKillServiceInstanceResponse\x12\"\n\x08response\x18\x01 \x01(\x0b\x32\x10.common.Response2\xa8\x04\n\rDragonService\x12J\n\x0bGetClusters\x12\x1b.manager.GetClustersRequest\x1a\x1c.manager.GetClustersResponse\"\x00\x12J\n\x0bGetServices\x12\x1b.manager.GetServicesRequest\x1a\x1c.manager.GetServicesResponse\"\x00\x12G\n\nGetService\x12\x1a.manager.GetServiceRequest\x1a\x1b.manager.GetServiceResponse\"\x00\x12\x65\n\x14GetServiceLBInstance\x12$.manager.GetServiceLBInstanceRequest\x1a%.manager.GetServiceLBInstanceResponse\"\x00\x12k\n\x16RestartServiceInstance\x12&.manager.RestartServiceInstanceRequest\x1a\'.manager.RestartServiceInstanceResponse\"\x00\x12\x62\n\x13KillServiceInstance\x12#.manager.KillServiceInstanceRequest\x1a$.manager.KillServiceInstanceResponse\"\x00\x62\x06proto3')
  ,
  dependencies=[services_dot_common_dot_service__pb2.DESCRIPTOR,common_dot_common__pb2.DESCRIPTOR,])




_INSTANCE = _descriptor.Descriptor(
  name='Instance',
  full_name='manager.Instance',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='taskID', full_name='manager.Instance.taskID', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='containerName', full_name='manager.Instance.containerName', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='containerID', full_name='manager.Instance.containerID', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='serviceName', full_name='manager.Instance.serviceName', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='configHash', full_name='manager.Instance.configHash', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dc', full_name='manager.Instance.dc', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ip', full_name='manager.Instance.ip', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='port', full_name='manager.Instance.port', index=7,
      number=8, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=78,
  serialized_end=227,
)


_NODE = _descriptor.Descriptor(
  name='Node',
  full_name='manager.Node',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ip', full_name='manager.Node.ip', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='hostName', full_name='manager.Node.hostName', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ram', full_name='manager.Node.ram', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='core', full_name='manager.Node.core', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=229,
  serialized_end=292,
)


_DC = _descriptor.Descriptor(
  name='DC',
  full_name='manager.DC',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='manager.DC.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='nodes', full_name='manager.DC.nodes', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=294,
  serialized_end=342,
)


_GETCLUSTERSREQUEST = _descriptor.Descriptor(
  name='GetClustersRequest',
  full_name='manager.GetClustersRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=344,
  serialized_end=364,
)


_GETCLUSTERSRESPONSE = _descriptor.Descriptor(
  name='GetClustersResponse',
  full_name='manager.GetClustersResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dcs', full_name='manager.GetClustersResponse.dcs', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response', full_name='manager.GetClustersResponse.response', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=366,
  serialized_end=449,
)


_GETSERVICESREQUEST = _descriptor.Descriptor(
  name='GetServicesRequest',
  full_name='manager.GetServicesRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=451,
  serialized_end=471,
)


_GETSERVICESRESPONSE = _descriptor.Descriptor(
  name='GetServicesResponse',
  full_name='manager.GetServicesResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='services', full_name='manager.GetServicesResponse.services', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response', full_name='manager.GetServicesResponse.response', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=473,
  serialized_end=571,
)


_GETSERVICEREQUEST = _descriptor.Descriptor(
  name='GetServiceRequest',
  full_name='manager.GetServiceRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='service_name', full_name='manager.GetServiceRequest.service_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=573,
  serialized_end=614,
)


_GETSERVICERESPONSE = _descriptor.Descriptor(
  name='GetServiceResponse',
  full_name='manager.GetServiceResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='service', full_name='manager.GetServiceResponse.service', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='instances', full_name='manager.GetServiceResponse.instances', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response', full_name='manager.GetServiceResponse.response', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=617,
  serialized_end=751,
)


_GETSERVICELBINSTANCEREQUEST = _descriptor.Descriptor(
  name='GetServiceLBInstanceRequest',
  full_name='manager.GetServiceLBInstanceRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='service_name', full_name='manager.GetServiceLBInstanceRequest.service_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=753,
  serialized_end=804,
)


_GETSERVICELBINSTANCERESPONSE = _descriptor.Descriptor(
  name='GetServiceLBInstanceResponse',
  full_name='manager.GetServiceLBInstanceResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='instance', full_name='manager.GetServiceLBInstanceResponse.instance', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response', full_name='manager.GetServiceLBInstanceResponse.response', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=806,
  serialized_end=909,
)


_RESTARTSERVICEINSTANCEREQUEST = _descriptor.Descriptor(
  name='RestartServiceInstanceRequest',
  full_name='manager.RestartServiceInstanceRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='service_name', full_name='manager.RestartServiceInstanceRequest.service_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='instance_id', full_name='manager.RestartServiceInstanceRequest.instance_id', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=911,
  serialized_end=985,
)


_RESTARTSERVICEINSTANCERESPONSE = _descriptor.Descriptor(
  name='RestartServiceInstanceResponse',
  full_name='manager.RestartServiceInstanceResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response', full_name='manager.RestartServiceInstanceResponse.response', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=987,
  serialized_end=1055,
)


_KILLSERVICEINSTANCEREQUEST = _descriptor.Descriptor(
  name='KillServiceInstanceRequest',
  full_name='manager.KillServiceInstanceRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='service_name', full_name='manager.KillServiceInstanceRequest.service_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='instance_id', full_name='manager.KillServiceInstanceRequest.instance_id', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1057,
  serialized_end=1128,
)


_KILLSERVICEINSTANCERESPONSE = _descriptor.Descriptor(
  name='KillServiceInstanceResponse',
  full_name='manager.KillServiceInstanceResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='response', full_name='manager.KillServiceInstanceResponse.response', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1130,
  serialized_end=1195,
)

_DC.fields_by_name['nodes'].message_type = _NODE
_GETCLUSTERSRESPONSE.fields_by_name['dcs'].message_type = _DC
_GETCLUSTERSRESPONSE.fields_by_name['response'].message_type = common_dot_common__pb2._RESPONSE
_GETSERVICESRESPONSE.fields_by_name['services'].message_type = services_dot_common_dot_service__pb2._SERVICE
_GETSERVICESRESPONSE.fields_by_name['response'].message_type = common_dot_common__pb2._RESPONSE
_GETSERVICERESPONSE.fields_by_name['service'].message_type = services_dot_common_dot_service__pb2._SERVICE
_GETSERVICERESPONSE.fields_by_name['instances'].message_type = _INSTANCE
_GETSERVICERESPONSE.fields_by_name['response'].message_type = common_dot_common__pb2._RESPONSE
_GETSERVICELBINSTANCERESPONSE.fields_by_name['instance'].message_type = _INSTANCE
_GETSERVICELBINSTANCERESPONSE.fields_by_name['response'].message_type = common_dot_common__pb2._RESPONSE
_RESTARTSERVICEINSTANCERESPONSE.fields_by_name['response'].message_type = common_dot_common__pb2._RESPONSE
_KILLSERVICEINSTANCERESPONSE.fields_by_name['response'].message_type = common_dot_common__pb2._RESPONSE
DESCRIPTOR.message_types_by_name['Instance'] = _INSTANCE
DESCRIPTOR.message_types_by_name['Node'] = _NODE
DESCRIPTOR.message_types_by_name['DC'] = _DC
DESCRIPTOR.message_types_by_name['GetClustersRequest'] = _GETCLUSTERSREQUEST
DESCRIPTOR.message_types_by_name['GetClustersResponse'] = _GETCLUSTERSRESPONSE
DESCRIPTOR.message_types_by_name['GetServicesRequest'] = _GETSERVICESREQUEST
DESCRIPTOR.message_types_by_name['GetServicesResponse'] = _GETSERVICESRESPONSE
DESCRIPTOR.message_types_by_name['GetServiceRequest'] = _GETSERVICEREQUEST
DESCRIPTOR.message_types_by_name['GetServiceResponse'] = _GETSERVICERESPONSE
DESCRIPTOR.message_types_by_name['GetServiceLBInstanceRequest'] = _GETSERVICELBINSTANCEREQUEST
DESCRIPTOR.message_types_by_name['GetServiceLBInstanceResponse'] = _GETSERVICELBINSTANCERESPONSE
DESCRIPTOR.message_types_by_name['RestartServiceInstanceRequest'] = _RESTARTSERVICEINSTANCEREQUEST
DESCRIPTOR.message_types_by_name['RestartServiceInstanceResponse'] = _RESTARTSERVICEINSTANCERESPONSE
DESCRIPTOR.message_types_by_name['KillServiceInstanceRequest'] = _KILLSERVICEINSTANCEREQUEST
DESCRIPTOR.message_types_by_name['KillServiceInstanceResponse'] = _KILLSERVICEINSTANCERESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Instance = _reflection.GeneratedProtocolMessageType('Instance', (_message.Message,), dict(
  DESCRIPTOR = _INSTANCE,
  __module__ = 'dragon_pb2'
  # @@protoc_insertion_point(class_scope:manager.Instance)
  ))
_sym_db.RegisterMessage(Instance)

Node = _reflection.GeneratedProtocolMessageType('Node', (_message.Message,), dict(
  DESCRIPTOR = _NODE,
  __module__ = 'dragon_pb2'
  # @@protoc_insertion_point(class_scope:manager.Node)
  ))
_sym_db.RegisterMessage(Node)

DC = _reflection.GeneratedProtocolMessageType('DC', (_message.Message,), dict(
  DESCRIPTOR = _DC,
  __module__ = 'dragon_pb2'
  # @@protoc_insertion_point(class_scope:manager.DC)
  ))
_sym_db.RegisterMessage(DC)

GetClustersRequest = _reflection.GeneratedProtocolMessageType('GetClustersRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETCLUSTERSREQUEST,
  __module__ = 'dragon_pb2'
  # @@protoc_insertion_point(class_scope:manager.GetClustersRequest)
  ))
_sym_db.RegisterMessage(GetClustersRequest)

GetClustersResponse = _reflection.GeneratedProtocolMessageType('GetClustersResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETCLUSTERSRESPONSE,
  __module__ = 'dragon_pb2'
  # @@protoc_insertion_point(class_scope:manager.GetClustersResponse)
  ))
_sym_db.RegisterMessage(GetClustersResponse)

GetServicesRequest = _reflection.GeneratedProtocolMessageType('GetServicesRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETSERVICESREQUEST,
  __module__ = 'dragon_pb2'
  # @@protoc_insertion_point(class_scope:manager.GetServicesRequest)
  ))
_sym_db.RegisterMessage(GetServicesRequest)

GetServicesResponse = _reflection.GeneratedProtocolMessageType('GetServicesResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETSERVICESRESPONSE,
  __module__ = 'dragon_pb2'
  # @@protoc_insertion_point(class_scope:manager.GetServicesResponse)
  ))
_sym_db.RegisterMessage(GetServicesResponse)

GetServiceRequest = _reflection.GeneratedProtocolMessageType('GetServiceRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETSERVICEREQUEST,
  __module__ = 'dragon_pb2'
  # @@protoc_insertion_point(class_scope:manager.GetServiceRequest)
  ))
_sym_db.RegisterMessage(GetServiceRequest)

GetServiceResponse = _reflection.GeneratedProtocolMessageType('GetServiceResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETSERVICERESPONSE,
  __module__ = 'dragon_pb2'
  # @@protoc_insertion_point(class_scope:manager.GetServiceResponse)
  ))
_sym_db.RegisterMessage(GetServiceResponse)

GetServiceLBInstanceRequest = _reflection.GeneratedProtocolMessageType('GetServiceLBInstanceRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETSERVICELBINSTANCEREQUEST,
  __module__ = 'dragon_pb2'
  # @@protoc_insertion_point(class_scope:manager.GetServiceLBInstanceRequest)
  ))
_sym_db.RegisterMessage(GetServiceLBInstanceRequest)

GetServiceLBInstanceResponse = _reflection.GeneratedProtocolMessageType('GetServiceLBInstanceResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETSERVICELBINSTANCERESPONSE,
  __module__ = 'dragon_pb2'
  # @@protoc_insertion_point(class_scope:manager.GetServiceLBInstanceResponse)
  ))
_sym_db.RegisterMessage(GetServiceLBInstanceResponse)

RestartServiceInstanceRequest = _reflection.GeneratedProtocolMessageType('RestartServiceInstanceRequest', (_message.Message,), dict(
  DESCRIPTOR = _RESTARTSERVICEINSTANCEREQUEST,
  __module__ = 'dragon_pb2'
  # @@protoc_insertion_point(class_scope:manager.RestartServiceInstanceRequest)
  ))
_sym_db.RegisterMessage(RestartServiceInstanceRequest)

RestartServiceInstanceResponse = _reflection.GeneratedProtocolMessageType('RestartServiceInstanceResponse', (_message.Message,), dict(
  DESCRIPTOR = _RESTARTSERVICEINSTANCERESPONSE,
  __module__ = 'dragon_pb2'
  # @@protoc_insertion_point(class_scope:manager.RestartServiceInstanceResponse)
  ))
_sym_db.RegisterMessage(RestartServiceInstanceResponse)

KillServiceInstanceRequest = _reflection.GeneratedProtocolMessageType('KillServiceInstanceRequest', (_message.Message,), dict(
  DESCRIPTOR = _KILLSERVICEINSTANCEREQUEST,
  __module__ = 'dragon_pb2'
  # @@protoc_insertion_point(class_scope:manager.KillServiceInstanceRequest)
  ))
_sym_db.RegisterMessage(KillServiceInstanceRequest)

KillServiceInstanceResponse = _reflection.GeneratedProtocolMessageType('KillServiceInstanceResponse', (_message.Message,), dict(
  DESCRIPTOR = _KILLSERVICEINSTANCERESPONSE,
  __module__ = 'dragon_pb2'
  # @@protoc_insertion_point(class_scope:manager.KillServiceInstanceResponse)
  ))
_sym_db.RegisterMessage(KillServiceInstanceResponse)



_DRAGONSERVICE = _descriptor.ServiceDescriptor(
  name='DragonService',
  full_name='manager.DragonService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=1198,
  serialized_end=1750,
  methods=[
  _descriptor.MethodDescriptor(
    name='GetClusters',
    full_name='manager.DragonService.GetClusters',
    index=0,
    containing_service=None,
    input_type=_GETCLUSTERSREQUEST,
    output_type=_GETCLUSTERSRESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='GetServices',
    full_name='manager.DragonService.GetServices',
    index=1,
    containing_service=None,
    input_type=_GETSERVICESREQUEST,
    output_type=_GETSERVICESRESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='GetService',
    full_name='manager.DragonService.GetService',
    index=2,
    containing_service=None,
    input_type=_GETSERVICEREQUEST,
    output_type=_GETSERVICERESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='GetServiceLBInstance',
    full_name='manager.DragonService.GetServiceLBInstance',
    index=3,
    containing_service=None,
    input_type=_GETSERVICELBINSTANCEREQUEST,
    output_type=_GETSERVICELBINSTANCERESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='RestartServiceInstance',
    full_name='manager.DragonService.RestartServiceInstance',
    index=4,
    containing_service=None,
    input_type=_RESTARTSERVICEINSTANCEREQUEST,
    output_type=_RESTARTSERVICEINSTANCERESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='KillServiceInstance',
    full_name='manager.DragonService.KillServiceInstance',
    index=5,
    containing_service=None,
    input_type=_KILLSERVICEINSTANCEREQUEST,
    output_type=_KILLSERVICEINSTANCERESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_DRAGONSERVICE)

DESCRIPTOR.services_by_name['DragonService'] = _DRAGONSERVICE

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class DragonServiceStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetClusters = channel.unary_unary(
          '/manager.DragonService/GetClusters',
          request_serializer=GetClustersRequest.SerializeToString,
          response_deserializer=GetClustersResponse.FromString,
          )
      self.GetServices = channel.unary_unary(
          '/manager.DragonService/GetServices',
          request_serializer=GetServicesRequest.SerializeToString,
          response_deserializer=GetServicesResponse.FromString,
          )
      self.GetService = channel.unary_unary(
          '/manager.DragonService/GetService',
          request_serializer=GetServiceRequest.SerializeToString,
          response_deserializer=GetServiceResponse.FromString,
          )
      self.GetServiceLBInstance = channel.unary_unary(
          '/manager.DragonService/GetServiceLBInstance',
          request_serializer=GetServiceLBInstanceRequest.SerializeToString,
          response_deserializer=GetServiceLBInstanceResponse.FromString,
          )
      self.RestartServiceInstance = channel.unary_unary(
          '/manager.DragonService/RestartServiceInstance',
          request_serializer=RestartServiceInstanceRequest.SerializeToString,
          response_deserializer=RestartServiceInstanceResponse.FromString,
          )
      self.KillServiceInstance = channel.unary_unary(
          '/manager.DragonService/KillServiceInstance',
          request_serializer=KillServiceInstanceRequest.SerializeToString,
          response_deserializer=KillServiceInstanceResponse.FromString,
          )


  class DragonServiceServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def GetClusters(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetServices(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetService(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetServiceLBInstance(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def RestartServiceInstance(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def KillServiceInstance(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_DragonServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetClusters': grpc.unary_unary_rpc_method_handler(
            servicer.GetClusters,
            request_deserializer=GetClustersRequest.FromString,
            response_serializer=GetClustersResponse.SerializeToString,
        ),
        'GetServices': grpc.unary_unary_rpc_method_handler(
            servicer.GetServices,
            request_deserializer=GetServicesRequest.FromString,
            response_serializer=GetServicesResponse.SerializeToString,
        ),
        'GetService': grpc.unary_unary_rpc_method_handler(
            servicer.GetService,
            request_deserializer=GetServiceRequest.FromString,
            response_serializer=GetServiceResponse.SerializeToString,
        ),
        'GetServiceLBInstance': grpc.unary_unary_rpc_method_handler(
            servicer.GetServiceLBInstance,
            request_deserializer=GetServiceLBInstanceRequest.FromString,
            response_serializer=GetServiceLBInstanceResponse.SerializeToString,
        ),
        'RestartServiceInstance': grpc.unary_unary_rpc_method_handler(
            servicer.RestartServiceInstance,
            request_deserializer=RestartServiceInstanceRequest.FromString,
            response_serializer=RestartServiceInstanceResponse.SerializeToString,
        ),
        'KillServiceInstance': grpc.unary_unary_rpc_method_handler(
            servicer.KillServiceInstance,
            request_deserializer=KillServiceInstanceRequest.FromString,
            response_serializer=KillServiceInstanceResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'manager.DragonService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaDragonServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def GetClusters(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetServices(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetService(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetServiceLBInstance(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def RestartServiceInstance(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def KillServiceInstance(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaDragonServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    # missing associated documentation comment in .proto file
    pass
    def GetClusters(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    GetClusters.future = None
    def GetServices(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    GetServices.future = None
    def GetService(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    GetService.future = None
    def GetServiceLBInstance(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    GetServiceLBInstance.future = None
    def RestartServiceInstance(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    RestartServiceInstance.future = None
    def KillServiceInstance(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    KillServiceInstance.future = None


  def beta_create_DragonService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('manager.DragonService', 'GetClusters'): GetClustersRequest.FromString,
      ('manager.DragonService', 'GetService'): GetServiceRequest.FromString,
      ('manager.DragonService', 'GetServiceLBInstance'): GetServiceLBInstanceRequest.FromString,
      ('manager.DragonService', 'GetServices'): GetServicesRequest.FromString,
      ('manager.DragonService', 'KillServiceInstance'): KillServiceInstanceRequest.FromString,
      ('manager.DragonService', 'RestartServiceInstance'): RestartServiceInstanceRequest.FromString,
    }
    response_serializers = {
      ('manager.DragonService', 'GetClusters'): GetClustersResponse.SerializeToString,
      ('manager.DragonService', 'GetService'): GetServiceResponse.SerializeToString,
      ('manager.DragonService', 'GetServiceLBInstance'): GetServiceLBInstanceResponse.SerializeToString,
      ('manager.DragonService', 'GetServices'): GetServicesResponse.SerializeToString,
      ('manager.DragonService', 'KillServiceInstance'): KillServiceInstanceResponse.SerializeToString,
      ('manager.DragonService', 'RestartServiceInstance'): RestartServiceInstanceResponse.SerializeToString,
    }
    method_implementations = {
      ('manager.DragonService', 'GetClusters'): face_utilities.unary_unary_inline(servicer.GetClusters),
      ('manager.DragonService', 'GetService'): face_utilities.unary_unary_inline(servicer.GetService),
      ('manager.DragonService', 'GetServiceLBInstance'): face_utilities.unary_unary_inline(servicer.GetServiceLBInstance),
      ('manager.DragonService', 'GetServices'): face_utilities.unary_unary_inline(servicer.GetServices),
      ('manager.DragonService', 'KillServiceInstance'): face_utilities.unary_unary_inline(servicer.KillServiceInstance),
      ('manager.DragonService', 'RestartServiceInstance'): face_utilities.unary_unary_inline(servicer.RestartServiceInstance),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_DragonService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('manager.DragonService', 'GetClusters'): GetClustersRequest.SerializeToString,
      ('manager.DragonService', 'GetService'): GetServiceRequest.SerializeToString,
      ('manager.DragonService', 'GetServiceLBInstance'): GetServiceLBInstanceRequest.SerializeToString,
      ('manager.DragonService', 'GetServices'): GetServicesRequest.SerializeToString,
      ('manager.DragonService', 'KillServiceInstance'): KillServiceInstanceRequest.SerializeToString,
      ('manager.DragonService', 'RestartServiceInstance'): RestartServiceInstanceRequest.SerializeToString,
    }
    response_deserializers = {
      ('manager.DragonService', 'GetClusters'): GetClustersResponse.FromString,
      ('manager.DragonService', 'GetService'): GetServiceResponse.FromString,
      ('manager.DragonService', 'GetServiceLBInstance'): GetServiceLBInstanceResponse.FromString,
      ('manager.DragonService', 'GetServices'): GetServicesResponse.FromString,
      ('manager.DragonService', 'KillServiceInstance'): KillServiceInstanceResponse.FromString,
      ('manager.DragonService', 'RestartServiceInstance'): RestartServiceInstanceResponse.FromString,
    }
    cardinalities = {
      'GetClusters': cardinality.Cardinality.UNARY_UNARY,
      'GetService': cardinality.Cardinality.UNARY_UNARY,
      'GetServiceLBInstance': cardinality.Cardinality.UNARY_UNARY,
      'GetServices': cardinality.Cardinality.UNARY_UNARY,
      'KillServiceInstance': cardinality.Cardinality.UNARY_UNARY,
      'RestartServiceInstance': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'manager.DragonService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
