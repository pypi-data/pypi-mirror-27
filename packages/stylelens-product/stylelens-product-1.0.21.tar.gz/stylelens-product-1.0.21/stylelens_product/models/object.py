# coding: utf-8

"""
    bl-db-product

    This is a API document for Product DB

    OpenAPI spec version: 0.1.0
    Contact: master@bluehack.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Object(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'product_id': 'str',
        'version': 'str',
        'class_code': 'str',
        'class_name': 'str',
        'storage': 'str',
        'bucket': 'str',
        'color': 'int',
        'texture': 'str',
        'fabric': 'str',
        'shape': 'str',
        'part': 'str',
        'style': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'product_id': 'product_id',
        'version': 'version',
        'class_code': 'class_code',
        'class_name': 'class_name',
        'storage': 'storage',
        'bucket': 'bucket',
        'color': 'color',
        'texture': 'texture',
        'fabric': 'fabric',
        'shape': 'shape',
        'part': 'part',
        'style': 'style'
    }

    def __init__(self, id=None, name=None, product_id=None, version=None, class_code=None, class_name=None, storage=None, bucket=None, color=None, texture=None, fabric=None, shape=None, part=None, style=None):
        """
        Object - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._product_id = None
        self._version = None
        self._class_code = None
        self._class_name = None
        self._storage = None
        self._bucket = None
        self._color = None
        self._texture = None
        self._fabric = None
        self._shape = None
        self._part = None
        self._style = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if product_id is not None:
          self.product_id = product_id
        if version is not None:
          self.version = version
        if class_code is not None:
          self.class_code = class_code
        if class_name is not None:
          self.class_name = class_name
        if storage is not None:
          self.storage = storage
        if bucket is not None:
          self.bucket = bucket
        if color is not None:
          self.color = color
        if texture is not None:
          self.texture = texture
        if fabric is not None:
          self.fabric = fabric
        if shape is not None:
          self.shape = shape
        if part is not None:
          self.part = part
        if style is not None:
          self.style = style

    @property
    def id(self):
        """
        Gets the id of this Object.

        :return: The id of this Object.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Object.

        :param id: The id of this Object.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Object.

        :return: The name of this Object.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Object.

        :param name: The name of this Object.
        :type: str
        """

        self._name = name

    @property
    def product_id(self):
        """
        Gets the product_id of this Object.

        :return: The product_id of this Object.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this Object.

        :param product_id: The product_id of this Object.
        :type: str
        """

        self._product_id = product_id

    @property
    def version(self):
        """
        Gets the version of this Object.

        :return: The version of this Object.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Object.

        :param version: The version of this Object.
        :type: str
        """

        self._version = version

    @property
    def class_code(self):
        """
        Gets the class_code of this Object.

        :return: The class_code of this Object.
        :rtype: str
        """
        return self._class_code

    @class_code.setter
    def class_code(self, class_code):
        """
        Sets the class_code of this Object.

        :param class_code: The class_code of this Object.
        :type: str
        """

        self._class_code = class_code

    @property
    def class_name(self):
        """
        Gets the class_name of this Object.

        :return: The class_name of this Object.
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """
        Sets the class_name of this Object.

        :param class_name: The class_name of this Object.
        :type: str
        """

        self._class_name = class_name

    @property
    def storage(self):
        """
        Gets the storage of this Object.

        :return: The storage of this Object.
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """
        Sets the storage of this Object.

        :param storage: The storage of this Object.
        :type: str
        """

        self._storage = storage

    @property
    def bucket(self):
        """
        Gets the bucket of this Object.

        :return: The bucket of this Object.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """
        Sets the bucket of this Object.

        :param bucket: The bucket of this Object.
        :type: str
        """

        self._bucket = bucket

    @property
    def color(self):
        """
        Gets the color of this Object.

        :return: The color of this Object.
        :rtype: int
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this Object.

        :param color: The color of this Object.
        :type: int
        """

        self._color = color

    @property
    def texture(self):
        """
        Gets the texture of this Object.

        :return: The texture of this Object.
        :rtype: str
        """
        return self._texture

    @texture.setter
    def texture(self, texture):
        """
        Sets the texture of this Object.

        :param texture: The texture of this Object.
        :type: str
        """

        self._texture = texture

    @property
    def fabric(self):
        """
        Gets the fabric of this Object.

        :return: The fabric of this Object.
        :rtype: str
        """
        return self._fabric

    @fabric.setter
    def fabric(self, fabric):
        """
        Sets the fabric of this Object.

        :param fabric: The fabric of this Object.
        :type: str
        """

        self._fabric = fabric

    @property
    def shape(self):
        """
        Gets the shape of this Object.

        :return: The shape of this Object.
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """
        Sets the shape of this Object.

        :param shape: The shape of this Object.
        :type: str
        """

        self._shape = shape

    @property
    def part(self):
        """
        Gets the part of this Object.

        :return: The part of this Object.
        :rtype: str
        """
        return self._part

    @part.setter
    def part(self, part):
        """
        Sets the part of this Object.

        :param part: The part of this Object.
        :type: str
        """

        self._part = part

    @property
    def style(self):
        """
        Gets the style of this Object.

        :return: The style of this Object.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """
        Sets the style of this Object.

        :param style: The style of this Object.
        :type: str
        """

        self._style = style

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Object):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
