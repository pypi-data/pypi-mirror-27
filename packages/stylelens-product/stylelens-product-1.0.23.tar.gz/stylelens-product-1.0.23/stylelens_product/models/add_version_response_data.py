# coding: utf-8

"""
    bl-db-product

    This is a API document for Product DB

    OpenAPI spec version: 0.1.0
    Contact: master@bluehack.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AddVersionResponseData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version_id': 'str',
        'version_name': 'str',
        'modified_count': 'int',
        'created_count': 'int'
    }

    attribute_map = {
        'version_id': 'version_id',
        'version_name': 'version_name',
        'modified_count': 'modified_count',
        'created_count': 'created_count'
    }

    def __init__(self, version_id=None, version_name=None, modified_count=None, created_count=None):
        """
        AddVersionResponseData - a model defined in Swagger
        """

        self._version_id = None
        self._version_name = None
        self._modified_count = None
        self._created_count = None

        if version_id is not None:
          self.version_id = version_id
        if version_name is not None:
          self.version_name = version_name
        if modified_count is not None:
          self.modified_count = modified_count
        if created_count is not None:
          self.created_count = created_count

    @property
    def version_id(self):
        """
        Gets the version_id of this AddVersionResponseData.

        :return: The version_id of this AddVersionResponseData.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """
        Sets the version_id of this AddVersionResponseData.

        :param version_id: The version_id of this AddVersionResponseData.
        :type: str
        """

        self._version_id = version_id

    @property
    def version_name(self):
        """
        Gets the version_name of this AddVersionResponseData.

        :return: The version_name of this AddVersionResponseData.
        :rtype: str
        """
        return self._version_name

    @version_name.setter
    def version_name(self, version_name):
        """
        Sets the version_name of this AddVersionResponseData.

        :param version_name: The version_name of this AddVersionResponseData.
        :type: str
        """

        self._version_name = version_name

    @property
    def modified_count(self):
        """
        Gets the modified_count of this AddVersionResponseData.

        :return: The modified_count of this AddVersionResponseData.
        :rtype: int
        """
        return self._modified_count

    @modified_count.setter
    def modified_count(self, modified_count):
        """
        Sets the modified_count of this AddVersionResponseData.

        :param modified_count: The modified_count of this AddVersionResponseData.
        :type: int
        """

        self._modified_count = modified_count

    @property
    def created_count(self):
        """
        Gets the created_count of this AddVersionResponseData.

        :return: The created_count of this AddVersionResponseData.
        :rtype: int
        """
        return self._created_count

    @created_count.setter
    def created_count(self, created_count):
        """
        Sets the created_count of this AddVersionResponseData.

        :param created_count: The created_count of this AddVersionResponseData.
        :type: int
        """

        self._created_count = created_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AddVersionResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
