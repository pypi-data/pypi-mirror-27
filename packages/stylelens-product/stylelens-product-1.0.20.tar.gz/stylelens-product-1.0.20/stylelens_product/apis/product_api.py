# coding: utf-8

"""
    bl-db-product

    This is a API document for Product DB

    OpenAPI spec version: 0.0.1
    Contact: master@bluehack.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ProductApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_product(self, body, **kwargs):
        """
        Added a new Product
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_product(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Product body: Product object that needs to be added to the db. (required)
        :return: AddProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_product_with_http_info(body, **kwargs)
        else:
            (data) = self.add_product_with_http_info(body, **kwargs)
            return data

    def add_product_with_http_info(self, body, **kwargs):
        """
        Added a new Product
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_product_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Product body: Product object that needs to be added to the db. (required)
        :return: AddProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_product`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/products', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AddProductResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_product_by_id(self, product_id, **kwargs):
        """
        Deletes a Product
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_product_by_id(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: Product id to delete (required)
        :return: DeleteProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_product_by_id_with_http_info(product_id, **kwargs)
        else:
            (data) = self.delete_product_by_id_with_http_info(product_id, **kwargs)
            return data

    def delete_product_by_id_with_http_info(self, product_id, **kwargs):
        """
        Deletes a Product
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_product_by_id_with_http_info(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: Product id to delete (required)
        :return: DeleteProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_product_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `delete_product_by_id`")


        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/products/{productId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DeleteProductResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_product_by_id(self, product_id, **kwargs):
        """
        Find Product by ID
        Returns a single Product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_by_id(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: ID of Product to return (required)
        :return: GetProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_product_by_id_with_http_info(product_id, **kwargs)
        else:
            (data) = self.get_product_by_id_with_http_info(product_id, **kwargs)
            return data

    def get_product_by_id_with_http_info(self, product_id, **kwargs):
        """
        Find Product by ID
        Returns a single Product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_product_by_id_with_http_info(product_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: ID of Product to return (required)
        :return: GetProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `get_product_by_id`")


        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/products/{productId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetProductResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_products_by_hostcode(self, host_code, **kwargs):
        """
        Get Product by host_code
        Returns Products belongs to a Host
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_products_by_hostcode(host_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str host_code:  (required)
        :param int offset: 
        :param int limit: 
        :return: GetProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_products_by_hostcode_with_http_info(host_code, **kwargs)
        else:
            (data) = self.get_products_by_hostcode_with_http_info(host_code, **kwargs)
            return data

    def get_products_by_hostcode_with_http_info(self, host_code, **kwargs):
        """
        Get Product by host_code
        Returns Products belongs to a Host
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_products_by_hostcode_with_http_info(host_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str host_code:  (required)
        :param int offset: 
        :param int limit: 
        :return: GetProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_code', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_products_by_hostcode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_code' is set
        if ('host_code' not in params) or (params['host_code'] is None):
            raise ValueError("Missing the required parameter `host_code` when calling `get_products_by_hostcode`")


        collection_formats = {}

        path_params = {}
        if 'host_code' in params:
            path_params['hostCode'] = params['host_code']

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/products/hosts/{hostCode}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetProductsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_products_by_hostcode_and_product_no(self, host_code, product_no, **kwargs):
        """
        Get Product by hostCode and productNo
        Returns Product belongs to a Host and productNo
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_products_by_hostcode_and_product_no(host_code, product_no, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str host_code:  (required)
        :param str product_no:  (required)
        :return: GetProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_products_by_hostcode_and_product_no_with_http_info(host_code, product_no, **kwargs)
        else:
            (data) = self.get_products_by_hostcode_and_product_no_with_http_info(host_code, product_no, **kwargs)
            return data

    def get_products_by_hostcode_and_product_no_with_http_info(self, host_code, product_no, **kwargs):
        """
        Get Product by hostCode and productNo
        Returns Product belongs to a Host and productNo
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_products_by_hostcode_and_product_no_with_http_info(host_code, product_no, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str host_code:  (required)
        :param str product_no:  (required)
        :return: GetProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_code', 'product_no']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_products_by_hostcode_and_product_no" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_code' is set
        if ('host_code' not in params) or (params['host_code'] is None):
            raise ValueError("Missing the required parameter `host_code` when calling `get_products_by_hostcode_and_product_no`")
        # verify the required parameter 'product_no' is set
        if ('product_no' not in params) or (params['product_no'] is None):
            raise ValueError("Missing the required parameter `product_no` when calling `get_products_by_hostcode_and_product_no`")


        collection_formats = {}

        path_params = {}
        if 'host_code' in params:
            path_params['hostCode'] = params['host_code']
        if 'product_no' in params:
            path_params['productNo'] = params['product_no']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/products/hosts/{hostCode}/products/{productNo}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetProductResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_products_by_hostcode_and_version_id(self, host_code, version_id, **kwargs):
        """
        Get Product by hostCode and versionId
        Returns Product belongs to a Host and VersionId
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_products_by_hostcode_and_version_id(host_code, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str host_code:  (required)
        :param str version_id:  (required)
        :param bool is_indexed: 
        :param int offset: 
        :param int limit: 
        :return: GetProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_products_by_hostcode_and_version_id_with_http_info(host_code, version_id, **kwargs)
        else:
            (data) = self.get_products_by_hostcode_and_version_id_with_http_info(host_code, version_id, **kwargs)
            return data

    def get_products_by_hostcode_and_version_id_with_http_info(self, host_code, version_id, **kwargs):
        """
        Get Product by hostCode and versionId
        Returns Product belongs to a Host and VersionId
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_products_by_hostcode_and_version_id_with_http_info(host_code, version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str host_code:  (required)
        :param str version_id:  (required)
        :param bool is_indexed: 
        :param int offset: 
        :param int limit: 
        :return: GetProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_code', 'version_id', 'is_indexed', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_products_by_hostcode_and_version_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_code' is set
        if ('host_code' not in params) or (params['host_code'] is None):
            raise ValueError("Missing the required parameter `host_code` when calling `get_products_by_hostcode_and_version_id`")
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `get_products_by_hostcode_and_version_id`")


        collection_formats = {}

        path_params = {}
        if 'host_code' in params:
            path_params['hostCode'] = params['host_code']
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']

        query_params = []
        if 'is_indexed' in params:
            query_params.append(('is_indexed', params['is_indexed']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/products/hosts/{hostCode}/versions/{versionId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetProductsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_products_by_ids(self, product_ids, **kwargs):
        """
        Find Products by IDs
        Returns Products
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_products_by_ids(product_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] product_ids: IDs of Products to return (required)
        :return: GetProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_products_by_ids_with_http_info(product_ids, **kwargs)
        else:
            (data) = self.get_products_by_ids_with_http_info(product_ids, **kwargs)
            return data

    def get_products_by_ids_with_http_info(self, product_ids, **kwargs):
        """
        Find Products by IDs
        Returns Products
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_products_by_ids_with_http_info(product_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] product_ids: IDs of Products to return (required)
        :return: GetProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_products_by_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_ids' is set
        if ('product_ids' not in params) or (params['product_ids'] is None):
            raise ValueError("Missing the required parameter `product_ids` when calling `get_products_by_ids`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product_ids' in params:
            query_params.append(('productIds', params['product_ids']))
            collection_formats['productIds'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/products', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetProductsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_products_by_image_id_and_object_id(self, image_id, object_id, **kwargs):
        """
        Get Products by imageId and objectId
        Returns Products belongs to a imageId and objectId
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_products_by_image_id_and_object_id(image_id, object_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id:  (required)
        :param int object_id:  (required)
        :return: GetProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_products_by_image_id_and_object_id_with_http_info(image_id, object_id, **kwargs)
        else:
            (data) = self.get_products_by_image_id_and_object_id_with_http_info(image_id, object_id, **kwargs)
            return data

    def get_products_by_image_id_and_object_id_with_http_info(self, image_id, object_id, **kwargs):
        """
        Get Products by imageId and objectId
        Returns Products belongs to a imageId and objectId
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_products_by_image_id_and_object_id_with_http_info(image_id, object_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str image_id:  (required)
        :param int object_id:  (required)
        :return: GetProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image_id', 'object_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_products_by_image_id_and_object_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image_id' is set
        if ('image_id' not in params) or (params['image_id'] is None):
            raise ValueError("Missing the required parameter `image_id` when calling `get_products_by_image_id_and_object_id`")
        # verify the required parameter 'object_id' is set
        if ('object_id' not in params) or (params['object_id'] is None):
            raise ValueError("Missing the required parameter `object_id` when calling `get_products_by_image_id_and_object_id`")


        collection_formats = {}

        path_params = {}
        if 'image_id' in params:
            path_params['imageId'] = params['image_id']
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/products/images/{imageId}/objects/{objectId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetProductsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_products_by_version_id(self, version_id, **kwargs):
        """
        Get Product by versionId
        Returns Products belongs to a Version
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_products_by_version_id(version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str version_id:  (required)
        :param bool is_indexed: 
        :param int offset: 
        :param int limit: 
        :return: GetProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_products_by_version_id_with_http_info(version_id, **kwargs)
        else:
            (data) = self.get_products_by_version_id_with_http_info(version_id, **kwargs)
            return data

    def get_products_by_version_id_with_http_info(self, version_id, **kwargs):
        """
        Get Product by versionId
        Returns Products belongs to a Version
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_products_by_version_id_with_http_info(version_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str version_id:  (required)
        :param bool is_indexed: 
        :param int offset: 
        :param int limit: 
        :return: GetProductsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['version_id', 'is_indexed', 'offset', 'limit']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_products_by_version_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params) or (params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `get_products_by_version_id`")


        collection_formats = {}

        path_params = {}
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']

        query_params = []
        if 'is_indexed' in params:
            query_params.append(('is_indexed', params['is_indexed']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/products/versions/{versionId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetProductsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_product_by_hostcode_and_productno(self, host_code, product_no, body, **kwargs):
        """
        Update an existing Product
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_product_by_hostcode_and_productno(host_code, product_no, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str host_code:  (required)
        :param str product_no:  (required)
        :param Product body: Product object that needs to be updated to the store (required)
        :return: UpdateProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_product_by_hostcode_and_productno_with_http_info(host_code, product_no, body, **kwargs)
        else:
            (data) = self.update_product_by_hostcode_and_productno_with_http_info(host_code, product_no, body, **kwargs)
            return data

    def update_product_by_hostcode_and_productno_with_http_info(self, host_code, product_no, body, **kwargs):
        """
        Update an existing Product
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_product_by_hostcode_and_productno_with_http_info(host_code, product_no, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str host_code:  (required)
        :param str product_no:  (required)
        :param Product body: Product object that needs to be updated to the store (required)
        :return: UpdateProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['host_code', 'product_no', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_product_by_hostcode_and_productno" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'host_code' is set
        if ('host_code' not in params) or (params['host_code'] is None):
            raise ValueError("Missing the required parameter `host_code` when calling `update_product_by_hostcode_and_productno`")
        # verify the required parameter 'product_no' is set
        if ('product_no' not in params) or (params['product_no'] is None):
            raise ValueError("Missing the required parameter `product_no` when calling `update_product_by_hostcode_and_productno`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_product_by_hostcode_and_productno`")


        collection_formats = {}

        path_params = {}
        if 'host_code' in params:
            path_params['hostCode'] = params['host_code']
        if 'product_no' in params:
            path_params['productNo'] = params['product_no']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/products/hosts/{hostCode}/products/{productNo}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdateProductResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_product_by_id(self, product_id, body, **kwargs):
        """
        Update an existing Product
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_product_by_id(product_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: ID of Product to return (required)
        :param Product body: Product object that needs to be updated to the store (required)
        :return: UpdateProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_product_by_id_with_http_info(product_id, body, **kwargs)
        else:
            (data) = self.update_product_by_id_with_http_info(product_id, body, **kwargs)
            return data

    def update_product_by_id_with_http_info(self, product_id, body, **kwargs):
        """
        Update an existing Product
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_product_by_id_with_http_info(product_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str product_id: ID of Product to return (required)
        :param Product body: Product object that needs to be updated to the store (required)
        :return: UpdateProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_product_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `update_product_by_id`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_product_by_id`")


        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/products/{productId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UpdateProductResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
