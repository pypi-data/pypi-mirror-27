{"version":3,"sources":["reviewablePageView.es6.js"],"names":[],"mappings":";;AAAA,CAAC,YAAW;;AAGZ;;;AAGA,QAAM,oBAAoB,SAAS,IAAT,CAAc,MAAd,CAAqB;AAC3C,YAAI,gBADuC;;AAG3C,kBAAU,EAAE,QAAF,CAAW,CACjB,yDADiB,EAEjB,MAFiB,EAGjB,qDAHiB,EAIjB,uCAJiB,EAKjB,MALiB,EAMjB,oCANiB,EAOjB,4DAPiB,EAQjB,KARiB,EASjB,mDATiB,EAUnB,IAVmB,CAUd,EAVc,CAAX,CAHiC;;AAe3C,gBAAQ;AACJ,kCAAsB,sBADlB;AAEJ,6BAAiB;AAFb,SAfmC;;AAoB3C;;;;;;;;;AASA,cA7B2C,oBA6BlC;AACL,iBAAK,GAAL,CACK,IADL,CACU,KAAK,QAAL,CAAc,EAAE,QAAF,CAAW;AAC3B,gCAAgB,QAAQ,aAAR,CADW;AAE3B,4BAAY,QAAQ,QAAR;AAFe,aAAX,EAGjB,KAAK,OAAL,CAAa,UAHI,CAAd,CADV,EAKK,IALL;;AAOA,mBAAO,IAAP;AACH,SAtC0C;;;AAwC3C;;;AAGA,YA3C2C,kBA2CpC;AACH,iBAAK,GAAL,CACK,GADL,CACS,UADT,EACqB,OADrB,EAEK,MAFL;AAGH,SA/C0C;;;AAiD3C;;;;;AAKA,aAtD2C,mBAsDnC;AACJ,iBAAK,OAAL,CAAa,QAAb;AACA,iBAAK,GAAL,CAAS,OAAT,CAAiB,EAAE,IAAF,CAAO,KAAK,MAAZ,EAAoB,IAApB,CAAjB;AACH,SAzD0C;;;AA2D3C;;;;;;;;;AASA,4BApE2C,gCAoEtB,CApEsB,EAoEnB;AACpB,cAAE,cAAF;AACA,cAAE,eAAF;;AAEA,iBAAK,OAAL,CAAa,YAAb;AACH,SAzE0C;;;AA2E3C;;;;;;;;;AASA,wBApF2C,4BAoF1B,CApF0B,EAoFvB;AAChB,cAAE,cAAF;AACA,cAAE,eAAF;;AAEA,iBAAK,KAAL;AACH;AAzF0C,KAArB,CAA1B;;AA6FA;;;;;;;AAOA,OAAG,kBAAH,GAAwB,GAAG,QAAH,CAAY,MAAZ,CAAmB;AACvC,gBAAQ,EAAE,QAAF,CAAW;AACf,oCAAwB,sBADT;AAEf,qCAAyB,kBAFV;AAGf,6CAAiC,sBAHlB;AAIf,yCAA6B;AAJd,SAAX,EAKL,GAAG,QAAH,CAAY,SAAZ,CAAsB,MALjB,CAD+B;;AAQvC;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,kBAhCuC,sBAgC5B,OAhC4B,EAgCnB;AAChB,iBAAK,OAAL,GAAe,OAAf;;AAEA,eAAG,WAAH,CAAe,MAAf;;AAEA,iBAAK,uBAAL,GAA+B,IAAI,GAAG,uBAAP,CAA+B;AAC1D,oBAAI,EAAE,iBAAF,CADsD;AAE1D,uBAAO,KAAK,KAAL,CAAW;AAFwC,aAA/B,CAA/B;;AAKA,iBAAK,cAAL,GAAsB,IAAtB;AACA,iBAAK,WAAL,GAAmB,IAAnB;AACA,iBAAK,iBAAL,GAAyB,IAAzB;AACA,iBAAK,qBAAL,GAA6B,IAA7B;;AAEA;;;;AAIA,iBAAK,aAAL,GAAqB,KAAK,KAAL,CAAW,GAAX,CAAe,eAAf,CAArB;;AAEA,eAAG,mBAAH,CAAuB,QAAvB,CAAgC,KAAhC;;AAEA,gBAAI,GAAG,WAAH,CAAe,QAAf,CAAwB,GAAxB,CAA4B,eAA5B,CAAJ,EAAkD;AAC9C,qBAAK,YAAL,GAAoB,IAAI,GAAG,eAAP,CAAuB;AACvC,2BAAO,IAAI,GAAG,WAAP,EADgC;AAEvC,wBAAI,KAAK,CAAL,CAAO,OAAP,EAAgB,MAAhB;AAFmC,iBAAvB,CAApB;AAIH;;AAED,iBAAK,QAAL,CAAc,KAAK,KAAnB,EAA0B,sBAA1B,EACc,KAAK,uBADnB;AAEH,SAhEsC;;;AAkEvC;;;;;;;AAOA,cAzEuC,oBAyE9B;AAAA;;AACL,gBAAM,WAAW,EAAE,MAAF,EAAU,IAAV,CAAe,2BAAf,CAAjB;;AAEA,iBAAK,WAAL,GAAmB,SAAS,IAAT,CAAc,MAAd,CAAnB;AACA,iBAAK,iBAAL,GAAyB,YAAY,8BAAZ,CAAzB;AACA,iBAAK,qBAAL,GAA6B,YAAY,oBAAZ,CAA7B;;AAEA,gBAAM,gBAAgB,KAAK,KAAL,CAAW,GAAX,CAAe,eAAf,CAAtB;;AAEA,iBAAK,iBAAL,GAAyB,GAAG,qBAAH,CAAyB,MAAzB,CAAgC;AACrD,oBAAI,EAAE,gBAAF,CADiD;AAErD,uBAAO,aAF8C;AAGrD,qCAAqB,KAAK,KAAL,CAAW;AAHqB,aAAhC,CAAzB;;AAMA,iBAAK,QAAL,CAAc,aAAd,EAA6B,mBAA7B,EACc;AAAA,uBAAM,MAAK,iBAAL,CAAuB,aAAvB,EAAN;AAAA,aADd;;AAGA,iBAAK,uBAAL,CAA6B,MAA7B;;AAEA,mBAAO,IAAP;AACH,SA9FsC;;;AAgGvC;;;AAGA,cAnGuC,oBAmG9B;AACL,iBAAK,iBAAL,CAAuB,MAAvB;AACA,mBAAO,IAAP,EAAa,MAAb,CAAoB,IAApB,CAAyB,IAAzB;AACH,SAtGsC;;;AAwGvC;;;;;;;;;;AAUA,+BAlHuC,mCAkHf,IAlHe,EAkHT;AAC1B,gBAAI,GAAG,mBAAH,CAAuB,QAAvB,CAAgC,YAAhC,EAAJ,EAAoD;AAChD,qBAAK,wBAAL,CAA8B,IAA9B;AACH;;AAED,iBAAK,kBAAL,CAAwB,IAAxB;AACH,SAxHsC;;;AA0HvC;;;;;;;AAOA,0BAjIuC,8BAiIpB,IAjIoB,EAiId;AAAA;;AACrB,iBAAK,cAAL,CAAoB,KAAK,iBAAzB;;AAEA,gBAAI,KAAK,cAAT,EAAyB;AACrB,qBAAK,cAAL,CAAoB,MAApB;AACH;;AAED,gBAAM,gBAAgB,KAAK,KAAL,CAAW,GAAX,CAAe,eAAf,CAAtB;;AAEA,iBAAK,cAAL,GAAsB,IAAI,iBAAJ,CAAsB;AACxC,4BAAY,IAD4B;AAExC,+BAAe;AAFyB,aAAtB,CAAtB;;AAKA,iBAAK,QAAL,CAAc,KAAK,cAAnB,EAAmC,QAAnC,EACc;AAAA,uBAAM,OAAK,cAAL,CAAoB,OAAK,WAAzB,CAAN;AAAA,aADd;;AAGA,iBAAK,QAAL,CAAc,KAAK,cAAnB,EAAmC,YAAnC,EAAiD,YAAM;AACnD,uBAAO,QAAP,GAAkB,cAAc,GAAd,CAAkB,WAAlB,CAAlB;AACH,aAFD;;AAIA,iBAAK,cAAL,CAAoB,MAApB,GAA6B,GAA7B,CAAiC,QAAjC,CAA0C,KAAK,GAA/C;AACA,iBAAK,cAAL,CAAoB,IAApB;AACH,SAxJsC;;;AA0JvC;;;;;;;;;;;AAWC,gCArKsC,oCAqKb,IArKa,EAqKP;AAAA;;AAC5B,iBAAK,cAAL,CAAoB,KAAK,iBAAzB;;AAEA,eAAG,mBAAH,CAAuB,QAAvB,CAAgC,MAAhC,CAAuC;AACnC,yBAAS,YAAY,QAAQ,gCAAR,CAAZ,EACY,CAAC,KAAK,IAAL,CAAU,QAAV,IAAsB,KAAK,IAAL,CAAU,QAAjC,CADZ,CAD0B;AAGnC,wBAAQ,IAH2B;AAInC,2BAAW,KAAK,qBAJmB;AAKnC,2BAAW,mBAAM;AACb,2BAAO,QAAP,GAAkB,OAAK,aAAL,CAAmB,GAAnB,CAAuB,WAAvB,CAAlB;AACH;AAPkC,aAAvC;AASF,SAjLqC;;;AAmLvC;;;;;;AAMA,sBAzLuC,0BAyLxB,GAzLwB,EAyLnB;AAChB,cAAE,MAAF,EACK,IADL,CACU,2BADV,EAES,MAFT,GAGK,GAHL,GAIK,MAJL,CAIY,EAAE,SAAF,EACH,IADG,CACE;AACF,sBAAM,GADJ;AAEF,qBAAK,eAFH;AAGF,sBAAM;AAHJ,aADF,CAJZ;AAUH,SApMsC;;;AAsMvC;;;;;;;;;AASA,4BA/MuC,kCA+MhB;AACnB,eAAG,gBAAH,CAAoB,MAApB,CAA2B;AACvB,wBAAQ,KAAK,KAAL,CAAW,GAAX,CAAe,eAAf,CADe;AAEvB,qCAAqB,KAAK,KAAL,CAAW;AAFT,aAA3B;;AAKA,mBAAO,KAAP;AACH,SAtNsC;;;AAwNvC;;;;;;;;;AASA,4BAjOuC,kCAiOhB;AACnB,gBAAM,gBAAgB,KAAK,KAAL,CAAW,GAAX,CAAe,eAAf,CAAtB;AACA,gBAAM,UAAU,cAAc,oBAAd,CACZ,SADY,EAEZ,GAAG,WAAH,CAAe,QAAf,CAAwB,GAAxB,CAA4B,qBAA5B,CAFY,CAAhB;;AAIA,iBAAK,QAAL,CAAc,OAAd,EAAuB,OAAvB,EACc;AAAA,uBAAM,GAAG,qBAAH,CAAyB,QAAzB,CAAkC,IAAlC,EAAN;AAAA,aADd;;AAGA,eAAG,iBAAH,CAAqB,MAArB,CAA4B;AACxB,yBAAS,OADe;AAExB,qCAAqB,KAAK,KAAL,CAAW;AAFR,aAA5B;;AAKA,mBAAO,KAAP;AACH,SAhPsC;;;AAkPvC;;;;;;;;;;AAUA,wBA5PuC,8BA4PpB;AACf,gBAAI,QAAQ,QAAQ,4CAAR,CAAR,CAAJ,EAAoE;AAChE,qBAAK,KAAL,CAAW,UAAX;AACH;;AAED,mBAAO,KAAP;AACH,SAlQsC;;;AAoQvC;;;;;;;;;;;;AAYA,sBAhRuC,0BAgRxB,CAhRwB,EAgRrB;AACd,cAAE,cAAF;AACA,cAAE,eAAF;AACH;AAnRsC,KAAnB,CAAxB;AAuRC,CAjYD","file":"reviewablePageView.js","sourcesContent":["(function() {\n\n\n/**\n * An update bubble showing an update to the review request or a review.\n */\nconst UpdatesBubbleView = Backbone.View.extend({\n    id: 'updates-bubble',\n\n    template: _.template([\n        '<span id=\"updates-bubble-summary\"><%- summary %></span>',\n        ' by ',\n        '<a href=\"<%- user.url %>\" id=\"updates-bubble-user\">',\n        '<%- user.fullname || user.username %>',\n        '</a>',\n        '<span id=\"updates-bubble-buttons\">',\n        ' <a href=\"#\" class=\"update-page\"><%- updatePageText %></a>',\n        ' | ',\n        ' <a href=\"#\" class=\"ignore\"><%- ignoreText %></a>',\n    ].join('')),\n\n    events: {\n        'click .update-page': '_onUpdatePageClicked',\n        'click .ignore': '_onIgnoreClicked',\n    },\n\n    /**\n     * Render the bubble with the information provided during construction.\n     *\n     * The bubble starts hidden. The caller must call open() to display it.\n     *\n     * Returns:\n     *     UpdatesBubbleView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el\n            .html(this.template(_.defaults({\n                updatePageText: gettext('Update Page'),\n                ignoreText: gettext('Ignore'),\n            }, this.options.updateInfo)))\n            .hide();\n\n        return this;\n    },\n\n    /**\n     * Open the bubble on the screen.\n     */\n    open() {\n        this.$el\n            .css('position', 'fixed')\n            .fadeIn();\n    },\n\n    /**\n     * Close the update bubble.\n     *\n     * After closing, the bubble will be removed from the DOM.\n     */\n    close() {\n        this.trigger('closed');\n        this.$el.fadeOut(_.bind(this.remove, this));\n    },\n\n    /**\n     * Handle clicks on the \"Update Page\" link.\n     *\n     * Loads the review request page.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the action.\n     */\n    _onUpdatePageClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.trigger('updatePage');\n    },\n\n    /*\n     * Handle clicks on the \"Ignore\" link.\n     *\n     * Ignores the update and closes the page.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the action.\n     */\n    _onIgnoreClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.close();\n    },\n});\n\n\n/**\n * A page managing reviewable content for a review request.\n *\n * This provides common functionality for any page associated with a review\n * request, such as the diff viewer, review UI, or the review request page\n * itself.\n */\nRB.ReviewablePageView = RB.PageView.extend({\n    events: _.defaults({\n        'click #review-action': '_onEditReviewClicked',\n        'click #ship-it-action': '_onShipItClicked',\n        'click #general-comment-action': '_onAddCommentClicked',\n        'click .has-menu .has-menu': '_onMenuClicked',\n    }, RB.PageView.prototype.events),\n\n    /**\n     * Initialize the page.\n     *\n     * This will construct a ReviewRequest, CommentIssueManager,\n     * ReviewRequestEditor, and other required objects, based on data\n     * provided during construction.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     reviewRequestData (object):\n     *         The model attributes for a new RB.ReviewRequest instance.\n     *\n     *     editorData (object):\n     *         The model attributes for a new RB.ReviewRequestEditor instance.\n     *\n     *     lastActivityTimestamp (string):\n     *         The last known timestamp for activity on this review request.\n     *\n     *     checkUpdatesType (string, optional):\n     *         The type of updates to check for.\n     */\n    initialize(options) {\n        this.options = options;\n\n        RB.DnDUploader.create();\n\n        this.reviewRequestEditorView = new RB.ReviewRequestEditorView({\n            el: $('#review-request'),\n            model: this.model.reviewRequestEditor,\n        });\n\n        this._updatesBubble = null;\n        this._favIconURL = null;\n        this._favIconNotifyURL = null;\n        this._logoNotificationsURL = null;\n\n        /*\n         * Power Pack (and possibly other extensions) expect a \"reviewRequest\"\n         * attribute on the view, so associate that here.\n         */\n        this.reviewRequest = this.model.get('reviewRequest');\n\n        RB.NotificationManager.instance.setup();\n\n        if (RB.UserSession.instance.get('authenticated')) {\n            this._starManager = new RB.StarManagerView({\n                model: new RB.StarManager(),\n                el: this.$('.star').parent(),\n            });\n        }\n\n        this.listenTo(this.model, 'reviewRequestUpdated',\n                      this._onReviewRequestUpdated);\n    },\n\n    /**\n     * Render the page.\n     *\n     * Returns:\n     *     RB.ReviewablePageView:\n     *     This object, for chaining.\n     */\n    render() {\n        const $favicon = $('head').find('link[rel=\"shortcut icon\"]');\n\n        this._favIconURL = $favicon.attr('href');\n        this._favIconNotifyURL = STATIC_URLS['rb/images/favicon_notify.ico'];\n        this._logoNotificationsURL = STATIC_URLS['rb/images/logo.png'];\n\n        const pendingReview = this.model.get('pendingReview');\n\n        this.draftReviewBanner = RB.DraftReviewBannerView.create({\n            el: $('#review-banner'),\n            model: pendingReview,\n            reviewRequestEditor: this.model.reviewRequestEditor,\n        });\n\n        this.listenTo(pendingReview, 'destroy published',\n                      () => this.draftReviewBanner.hideAndReload());\n\n        this.reviewRequestEditorView.render();\n\n        return this;\n    },\n\n    /**\n     * Remove this view from the page.\n     */\n    remove() {\n        this.draftReviewBanner.remove();\n        _super(this).remove.call(this);\n    },\n\n    /**\n     * Catch the review updated event and send the user a visual update.\n     *\n     * This function will handle the review updated event and decide whether\n     * to send a notification depending on browser and user settings.\n     *\n     * Args:\n     *     info (object):\n     *         The last update information for the request.\n     */\n    _onReviewRequestUpdated(info) {\n        if (RB.NotificationManager.instance.shouldNotify()) {\n            this._showDesktopNotification(info);\n        }\n\n        this._showUpdatesBubble(info);\n    },\n\n    /**\n     * Create the updates bubble showing information about the last update.\n     *\n     * Args:\n     *     info (object):\n     *         The last update information for the request.\n     */\n    _showUpdatesBubble(info) {\n        this._updateFavIcon(this._favIconNotifyURL);\n\n        if (this._updatesBubble) {\n            this._updatesBubble.remove();\n        }\n\n        const reviewRequest = this.model.get('reviewRequest');\n\n        this._updatesBubble = new UpdatesBubbleView({\n            updateInfo: info,\n            reviewRequest: reviewRequest,\n        });\n\n        this.listenTo(this._updatesBubble, 'closed',\n                      () => this._updateFavIcon(this._favIconURL));\n\n        this.listenTo(this._updatesBubble, 'updatePage', () => {\n            window.location = reviewRequest.get('reviewURL');\n        });\n\n        this._updatesBubble.render().$el.appendTo(this.$el);\n        this._updatesBubble.open();\n    },\n\n    /**\n     * Show the user a desktop notification for the last update.\n     *\n     * This function will create a notification if the user has not\n     * disabled desktop notifications and the browser supports HTML5\n     * notifications.\n     *\n     *  Args:\n     *     info (object):\n     *         The last update information for the request.\n     */\n     _showDesktopNotification(info) {\n        this._updateFavIcon(this._favIconNotifyURL);\n\n        RB.NotificationManager.instance.notify({\n            'title': interpolate(gettext('Review request submitted by %s'),\n                                 [info.user.fullname || info.user.username]),\n            'body': null,\n            'iconURL': this._logoNotificationsURL,\n            'onclick': () => {\n                window.location = this.reviewRequest.get('reviewURL');\n            },\n        });\n     },\n\n    /**\n     * Update the favicon for the page.\n     *\n     * This is used to change the favicon shown on the page based on whether\n     * there's a server-side update notification for the review request.\n     */\n    _updateFavIcon(url) {\n        $('head')\n            .find('link[rel=\"shortcut icon\"]')\n                .remove()\n            .end()\n            .append($('<link/>')\n                .attr({\n                    href: url,\n                    rel: 'shortcut icon',\n                    type: 'image/x-icon',\n                }));\n    },\n\n    /**\n     * Handle a click on the \"Edit Review\" button.\n     *\n     * Displays a review dialog.\n     *\n     * Returns:\n     *    boolean:\n     *    false, always.\n     */\n    _onEditReviewClicked() {\n        RB.ReviewDialogView.create({\n            review: this.model.get('pendingReview'),\n            reviewRequestEditor: this.model.reviewRequestEditor,\n        });\n\n        return false;\n    },\n\n    /**\n     * Handle a click on the \"Add Comment\" button.\n     *\n     * Displays a comment dialog.\n     *\n     * Returns:\n     *    boolean:\n     *    false, always.\n     */\n    _onAddCommentClicked() {\n        const pendingReview = this.model.get('pendingReview');\n        const comment = pendingReview.createGeneralComment(\n            undefined,\n            RB.UserSession.instance.get('commentsOpenAnIssue'));\n\n        this.listenTo(comment, 'saved',\n                      () => RB.DraftReviewBannerView.instance.show());\n\n        RB.CommentDialogView.create({\n            comment: comment,\n            reviewRequestEditor: this.model.reviewRequestEditor,\n        });\n\n        return false;\n    },\n\n    /**\n     * Handle a click on the \"Ship It\" button.\n     *\n     * Confirms that the user wants to post the review, and then posts it\n     * and reloads the page.\n     *\n     * Returns:\n     *    boolean:\n     *    false, always.\n     */\n    _onShipItClicked() {\n        if (confirm(gettext('Are you sure you want to post this review?'))) {\n            this.model.markShipIt();\n        }\n\n        return false;\n    },\n\n    /**\n     * Generic handler for menu clicks.\n     *\n     * This simply prevents the click from bubbling up or invoking the\n     * default action. This function is used for dropdown menu titles\n     * so that their links do not send a request to the server when one\n     * of their dropdown actions are clicked.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the action.\n     */\n    _onMenuClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n    },\n});\n\n\n})();\n"]}