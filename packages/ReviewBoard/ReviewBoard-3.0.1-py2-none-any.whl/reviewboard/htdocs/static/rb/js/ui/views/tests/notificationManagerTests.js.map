{"version":3,"sources":["notificationManagerTests.es6.js"],"names":[],"mappings":";;AAAA,MAAM,yCAAN,EAAiD,YAAM;AACnD,eAAW,YAAM;AACb,WAAG,mBAAH,CAAuB,QAAvB,CAAgC,KAAhC;AACH,KAFD;;AAIA,aAAS,sBAAT,EAAiC,YAAM;AACnC,WAAG,oBAAH,EAAyB,YAAM;AAC3B,kBAAM,GAAG,mBAAT,EAA8B,cAA9B,EACK,GADL,CACS,WADT,CACqB;AACb,uBAAO;AAAA,2BAAM,IAAN;AAAA;AADM,aADrB;;AAKA,eAAG,mBAAH,CAAuB,QAAvB,CAAgC,MAAhC,CAAuC;AACnC,uBAAO,MAD4B;AAEnC,sBAAM;AAF6B,aAAvC;;AAKA,mBAAO,GAAG,mBAAH,CAAuB,YAA9B,EACK,gBADL;AAEH,SAbD;;AAeA,WAAG,eAAH,EAAoB,YAAM;AACtB,eAAG,mBAAH,CAAuB,QAAvB,CAAgC,UAAhC,GAA6C,IAA7C;AACA,kBAAM,GAAG,mBAAH,CAAuB,QAA7B,EACM,8BADN,EACsC,GADtC,CAC0C,WAD1C,CACsD,IADtD;;AAGA,mBAAO,GAAG,mBAAH,CAAuB,QAAvB,CAAgC,YAAhC,EAAP,EAAuD,IAAvD,CAA4D,IAA5D;AACH,SAND;;AASA,WAAG,2CAAH,EAAgD,YAAM;AAClD,eAAG,mBAAH,CAAuB,QAAvB,CAAgC,UAAhC,GAA6C,KAA7C;AACA,kBAAM,GAAG,mBAAH,CAAuB,QAA7B,EACM,8BADN,EACsC,GADtC,CAC0C,WAD1C,CACsD,IADtD;;AAGA,mBAAO,GAAG,mBAAH,CAAuB,QAAvB,CAAgC,YAAhC,EAAP,EAAuD,IAAvD,CAA4D,KAA5D;AACH,SAND;;AAQC,WAAG,8CAAH,EAAmD,YAAM;AACtD,eAAG,mBAAH,CAAuB,QAAvB,CAAgC,UAAhC,GAA6C,IAA7C;AACA,kBAAM,GAAG,mBAAH,CAAuB,QAA7B,EACM,8BADN,EACsC,GADtC,CAC0C,WAD1C,CACsD,KADtD;;AAGA,mBAAO,GAAG,mBAAH,CAAuB,QAAvB,CAAgC,YAAhC,EAAP,EAAuD,IAAvD,CAA4D,KAA5D;AACH,SANA;AAOJ,KAxCD;AAyCH,CA9CD","file":"notificationManagerTests.js","sourcesContent":["suite('rb/ui/managers/NotificationManagerModel', () => {\n    beforeEach(() => {\n        RB.NotificationManager.instance.setup();\n    });\n\n    describe('Notification Manager', () => {\n        it('Calls external API', () => {\n            spyOn(RB.NotificationManager, 'Notification')\n                .and.returnValue({\n                    close: () => true\n                });\n\n            RB.NotificationManager.instance.notify({\n                title: 'Test',\n                body: 'This is a Test'\n            });\n\n            expect(RB.NotificationManager.Notification)\n                .toHaveBeenCalled();\n        });\n\n        it('Should notify', () => {\n            RB.NotificationManager.instance._canNotify = true;\n            spyOn(RB.NotificationManager.instance,\n                  '_haveNotificationPermissions').and.returnValue(true);\n\n            expect(RB.NotificationManager.instance.shouldNotify()).toBe(true);\n        });\n\n\n        it('Should not notify due to user permissions', () => {\n            RB.NotificationManager.instance._canNotify = false;\n            spyOn(RB.NotificationManager.instance,\n                  '_haveNotificationPermissions').and.returnValue(true);\n\n            expect(RB.NotificationManager.instance.shouldNotify()).toBe(false);\n        });\n\n         it('Should not notify due to browser permissions', () => {\n            RB.NotificationManager.instance._canNotify = true;\n            spyOn(RB.NotificationManager.instance,\n                  '_haveNotificationPermissions').and.returnValue(false);\n\n            expect(RB.NotificationManager.instance.shouldNotify()).toBe(false);\n        });\n    });\n});\n"]}