{"version":3,"sources":["notificationManager.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;AAUA,GAAG,mBAAH,GAAyB,SAAS,IAAT,CAAc,MAAd,CAAqB;AAC1C;;;;;;AAMA,cAP0C,wBAO7B;AACT,aAAK,aAAL,GAAqB,IAArB;AACH,KATyC;;;AAW3C;;;;;;;;;AASA,SApB2C,mBAoBnC;AACJ,aAAK,UAAL,GAAmB,KAAK,gBAAL,KAA0B,SAA1B,IACA,GAAG,WAAH,CAAe,QAAf,CAAwB,GAAxB,CACI,4BADJ,CADnB;;AAIA,YAAI,KAAK,UAAL,IAAmB,CAAC,KAAK,4BAAL,EAAxB,EAA6D;AACzD,iBAAK,gBAAL,CAAsB,iBAAtB;AACH;AACH,KA5ByC;;;AA8B1C;;;;;;;;AAQD,gCAtC2C,0CAsCZ;AAC3B,eAAO,KAAK,gBAAL,CAAsB,UAAtB,KAAqC,SAA5C;AACH,KAxC0C;;;AA0C1C;;;;;;;;;;AAUA,kBAAc,wBAAW;AACrB,eAAO,KAAK,UAAL,IAAmB,KAAK,4BAAL,EAA1B;AACH,KAtDyC;;AAwD1C;;;;;;;;;;;;;;;;;;;;;;AAsBA,UA9E0C,kBA8EnC,OA9EmC,EA8E1B;AACZ,YAAI,KAAK,aAAT,EAAwB;AACpB,iBAAK,aAAL,CAAmB,KAAnB;AACH;;AAED,gBAAQ,MAAR,CACI,QAAQ,cAAR,CAAuB,OAAvB,CADJ,EAEI,yDAFJ;;AAIA,aAAK,aAAL,GAAqB,IAAI,GAAG,mBAAH,CAAuB,YAA3B,CACjB,QAAQ,KADS,EACF;AACX,kBAAM,QAAQ,IADH;AAEX,kBAAM,QAAQ;AAFH,SADE,CAArB;;AAMA,YAAM,eAAe,KAAK,aAA1B;;AAEA,aAAK,aAAL,CAAmB,OAAnB,GAA6B,YAAW;AACpC,gBAAI,EAAE,UAAF,CAAa,QAAQ,OAArB,CAAJ,EAAmC;AAC/B,wBAAQ,OAAR;AACH;;AAED,yBAAa,KAAb;AACH,SAND;;AAQA,UAAE,KAAF,CAAQ,aAAa,KAAb,CAAmB,IAAnB,CAAwB,YAAxB,CAAR,EACQ,KAAK,2BADb;AAEF;AAzGwC,CAArB,EA0GtB;AACC,cAAU,IADX;;AAGC,iCAA6B,KAH9B;AAIC,kBAAc,OAAO,YAAP,IACA,OAAO,eADP,IAEA,OAAO;AANtB,CA1GsB,CAAzB;;AAoHA,GAAG,mBAAH,CAAuB,QAAvB,GAAkC,IAAI,GAAG,mBAAP,EAAlC","file":"notificationManager.js","sourcesContent":["/**\n * A manager for desktop notifications.\n *\n * Manages the sending of desktop notifications to the user, including\n * checking if certain user conditions are met and deciding which form\n * of notification to send depending on the user's browser.\n *\n * For desktop notifications to be sent to the user, the user must have\n * allowed notifications in their browser and account settings.\n */\nRB.NotificationManager = Backbone.View.extend({\n    /**\n     * Initialize the notification manager.\n     *\n     * Sets the initial values used by the notification manager.\n     *\n     */\n    initialize() {\n        this._notification = null;\n    },\n\n   /**\n    * Set up the notification manager.\n    *\n    * This function will request permission to send desktop notifications\n    * if notifications are allowed in the users preferences, and the\n    * browser supports notifications.\n    *\n    * It must be called before attempting to send notifications.\n    */\n   setup() {\n       this._canNotify = (this.NotificationType !== undefined &&\n                          RB.UserSession.instance.get(\n                              'enableDesktopNotifications'));\n\n       if (this._canNotify && !this._haveNotificationPermissions()) {\n           this.NotificationType.requestPermission();\n       }\n    },\n\n    /**\n     * Return whether we have permission to send notifications to the user.\n     *\n     * Returns:\n     *     boolean:\n     *     ``true`` if the user has enabled notifications in their browser\n     *     Otherwise, ``false`` will be returned.\n     */\n   _haveNotificationPermissions() {\n       return this.NotificationType.permission === 'granted';\n   },\n\n    /**\n     * Return whether or not we should send notifications to the user.\n     *\n     * Returns:\n     *     boolean:\n     *     ``true`` if the user has enabled notifications in their user\n     *     settings, the users current browser supports notifications, and\n     *     the user has granted permission for notifications to the\n     *     browser. Otherwise, ``false`` will be returned.\n     */\n    shouldNotify: function() {\n        return this._canNotify && this._haveNotificationPermissions();\n    },\n\n    /**\n     * Send a notification with the options specified.\n     *\n     * Args:\n     *     options (object):\n     *         The notification options.\n     *\n     * Option Args:\n     *     title (string):\n     *         The title of the notification.\n     *\n     *     body (string):\n     *         The body of the notification.\n     *\n     *     iconURL (string):\n     *         The URL of the icon to be used in the notification. Icons are\n     *         only supported in some browsers.\n     *\n     *     onClick (function):\n     *         The callback for when a user clicks the notification. The caller\n     *         needn't close the notification with this\n     */\n    notify(options) {\n        if (this._notification) {\n            this._notification.close();\n        }\n\n        console.assert(\n            options.hasOwnProperty('title'),\n            'RB.NotificationManager.notify requires \"title\" property');\n\n        this._notification = new RB.NotificationManager.Notification(\n            options.title, {\n                text: options.body,\n                icon: options.iconURL\n            });\n\n        const notification = this._notification;\n\n        this._notification.onclick = function() {\n            if (_.isFunction(options.onClick)) {\n                options.onclick();\n            }\n\n            notification.close();\n        };\n\n        _.delay(notification.close.bind(notification),\n                this.NOTIFICATION_LIFETIME_MSECS);\n     }\n}, {\n    instance: null,\n\n    NOTIFICATION_LIFETIME_MSECS: 10000,\n    Notification: window.Notification ||\n                  window.mozNotification ||\n                  window.webkitNotification,\n});\n\n\nRB.NotificationManager.instance = new RB.NotificationManager();\n"]}