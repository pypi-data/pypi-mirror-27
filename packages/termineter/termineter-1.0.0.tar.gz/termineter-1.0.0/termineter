#!/usr/bin/python3 -B
#
#  termineter.py
#
#  Copyright 2011 Spencer J. McIntyre <SMcIntyre [at] SecureState [dot] net>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.

from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import logging
import os
import sys

lib_directory = os.path.join(os.path.dirname(__file__), 'lib')
if os.path.isdir(os.path.join(lib_directory, 'termineter')):
	sys.path.insert(0, lib_directory)

from termineter import __version__
from termineter.interface import InteractiveInterpreter

def main():
	parser = argparse.ArgumentParser(description='Termineter: Python Smart Meter Testing Framework', conflict_handler='resolve')
	parser.add_argument('-v', '--version', action='version', version=parser.prog + ' Version: ' + __version__)
	parser.add_argument('-L', '--log', dest='loglvl', action='store', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], default='CRITICAL', help='set the logging level')
	parser.add_argument('-r', '--rc-file', dest='resource_file', action='store', default=True, help='execute a resource file')
	arguments = parser.parse_args()

	logging.getLogger('').setLevel(logging.DEBUG)
	console_log_handler = logging.StreamHandler()
	console_log_handler.setLevel(getattr(logging, arguments.loglvl))
	console_log_handler.setFormatter(logging.Formatter("%(levelname)-8s %(message)s"))
	logging.getLogger('').addHandler(console_log_handler)
	rc_file = arguments.resource_file
	del arguments, parser

	interpreter = InteractiveInterpreter(rc_file, log_handler=console_log_handler)
	interpreter.cmdloop()
	logging.shutdown()

if __name__ == '__main__':
	main()
