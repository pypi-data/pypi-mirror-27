# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetTransacAggregatedSmsReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'range': 'str',
        'requests': 'int',
        'delivered': 'int',
        'hard_bounces': 'int',
        'soft_bounces': 'int',
        'blocked': 'int',
        'unsubscribed': 'int',
        'replied': 'int',
        'accepted': 'int',
        'rejected': 'int'
    }

    attribute_map = {
        'range': 'range',
        'requests': 'requests',
        'delivered': 'delivered',
        'hard_bounces': 'hardBounces',
        'soft_bounces': 'softBounces',
        'blocked': 'blocked',
        'unsubscribed': 'unsubscribed',
        'replied': 'replied',
        'accepted': 'accepted',
        'rejected': 'rejected'
    }

    def __init__(self, range=None, requests=None, delivered=None, hard_bounces=None, soft_bounces=None, blocked=None, unsubscribed=None, replied=None, accepted=None, rejected=None):
        """
        GetTransacAggregatedSmsReport - a model defined in Swagger
        """

        self._range = None
        self._requests = None
        self._delivered = None
        self._hard_bounces = None
        self._soft_bounces = None
        self._blocked = None
        self._unsubscribed = None
        self._replied = None
        self._accepted = None
        self._rejected = None

        self.range = range
        self.requests = requests
        self.delivered = delivered
        self.hard_bounces = hard_bounces
        self.soft_bounces = soft_bounces
        self.blocked = blocked
        self.unsubscribed = unsubscribed
        self.replied = replied
        self.accepted = accepted
        self.rejected = rejected

    @property
    def range(self):
        """
        Gets the range of this GetTransacAggregatedSmsReport.
        Time frame of the report

        :return: The range of this GetTransacAggregatedSmsReport.
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """
        Sets the range of this GetTransacAggregatedSmsReport.
        Time frame of the report

        :param range: The range of this GetTransacAggregatedSmsReport.
        :type: str
        """
        if range is None:
            raise ValueError("Invalid value for `range`, must not be `None`")

        self._range = range

    @property
    def requests(self):
        """
        Gets the requests of this GetTransacAggregatedSmsReport.
        Number of requests for the timeframe

        :return: The requests of this GetTransacAggregatedSmsReport.
        :rtype: int
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """
        Sets the requests of this GetTransacAggregatedSmsReport.
        Number of requests for the timeframe

        :param requests: The requests of this GetTransacAggregatedSmsReport.
        :type: int
        """
        if requests is None:
            raise ValueError("Invalid value for `requests`, must not be `None`")

        self._requests = requests

    @property
    def delivered(self):
        """
        Gets the delivered of this GetTransacAggregatedSmsReport.
        Number of delivered SMS for the timeframe

        :return: The delivered of this GetTransacAggregatedSmsReport.
        :rtype: int
        """
        return self._delivered

    @delivered.setter
    def delivered(self, delivered):
        """
        Sets the delivered of this GetTransacAggregatedSmsReport.
        Number of delivered SMS for the timeframe

        :param delivered: The delivered of this GetTransacAggregatedSmsReport.
        :type: int
        """
        if delivered is None:
            raise ValueError("Invalid value for `delivered`, must not be `None`")

        self._delivered = delivered

    @property
    def hard_bounces(self):
        """
        Gets the hard_bounces of this GetTransacAggregatedSmsReport.
        Number of hardbounces for the timeframe

        :return: The hard_bounces of this GetTransacAggregatedSmsReport.
        :rtype: int
        """
        return self._hard_bounces

    @hard_bounces.setter
    def hard_bounces(self, hard_bounces):
        """
        Sets the hard_bounces of this GetTransacAggregatedSmsReport.
        Number of hardbounces for the timeframe

        :param hard_bounces: The hard_bounces of this GetTransacAggregatedSmsReport.
        :type: int
        """
        if hard_bounces is None:
            raise ValueError("Invalid value for `hard_bounces`, must not be `None`")

        self._hard_bounces = hard_bounces

    @property
    def soft_bounces(self):
        """
        Gets the soft_bounces of this GetTransacAggregatedSmsReport.
        Number of softbounces for the timeframe

        :return: The soft_bounces of this GetTransacAggregatedSmsReport.
        :rtype: int
        """
        return self._soft_bounces

    @soft_bounces.setter
    def soft_bounces(self, soft_bounces):
        """
        Sets the soft_bounces of this GetTransacAggregatedSmsReport.
        Number of softbounces for the timeframe

        :param soft_bounces: The soft_bounces of this GetTransacAggregatedSmsReport.
        :type: int
        """
        if soft_bounces is None:
            raise ValueError("Invalid value for `soft_bounces`, must not be `None`")

        self._soft_bounces = soft_bounces

    @property
    def blocked(self):
        """
        Gets the blocked of this GetTransacAggregatedSmsReport.
        Number of blocked contact for the timeframe

        :return: The blocked of this GetTransacAggregatedSmsReport.
        :rtype: int
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """
        Sets the blocked of this GetTransacAggregatedSmsReport.
        Number of blocked contact for the timeframe

        :param blocked: The blocked of this GetTransacAggregatedSmsReport.
        :type: int
        """
        if blocked is None:
            raise ValueError("Invalid value for `blocked`, must not be `None`")

        self._blocked = blocked

    @property
    def unsubscribed(self):
        """
        Gets the unsubscribed of this GetTransacAggregatedSmsReport.
        Number of unsubscription for the timeframe

        :return: The unsubscribed of this GetTransacAggregatedSmsReport.
        :rtype: int
        """
        return self._unsubscribed

    @unsubscribed.setter
    def unsubscribed(self, unsubscribed):
        """
        Sets the unsubscribed of this GetTransacAggregatedSmsReport.
        Number of unsubscription for the timeframe

        :param unsubscribed: The unsubscribed of this GetTransacAggregatedSmsReport.
        :type: int
        """
        if unsubscribed is None:
            raise ValueError("Invalid value for `unsubscribed`, must not be `None`")

        self._unsubscribed = unsubscribed

    @property
    def replied(self):
        """
        Gets the replied of this GetTransacAggregatedSmsReport.
        Number of answered SMS for the timeframe

        :return: The replied of this GetTransacAggregatedSmsReport.
        :rtype: int
        """
        return self._replied

    @replied.setter
    def replied(self, replied):
        """
        Sets the replied of this GetTransacAggregatedSmsReport.
        Number of answered SMS for the timeframe

        :param replied: The replied of this GetTransacAggregatedSmsReport.
        :type: int
        """
        if replied is None:
            raise ValueError("Invalid value for `replied`, must not be `None`")

        self._replied = replied

    @property
    def accepted(self):
        """
        Gets the accepted of this GetTransacAggregatedSmsReport.
        Number of accepted for the timeframe

        :return: The accepted of this GetTransacAggregatedSmsReport.
        :rtype: int
        """
        return self._accepted

    @accepted.setter
    def accepted(self, accepted):
        """
        Sets the accepted of this GetTransacAggregatedSmsReport.
        Number of accepted for the timeframe

        :param accepted: The accepted of this GetTransacAggregatedSmsReport.
        :type: int
        """
        if accepted is None:
            raise ValueError("Invalid value for `accepted`, must not be `None`")

        self._accepted = accepted

    @property
    def rejected(self):
        """
        Gets the rejected of this GetTransacAggregatedSmsReport.
        Number of rejected for the timeframe

        :return: The rejected of this GetTransacAggregatedSmsReport.
        :rtype: int
        """
        return self._rejected

    @rejected.setter
    def rejected(self, rejected):
        """
        Sets the rejected of this GetTransacAggregatedSmsReport.
        Number of rejected for the timeframe

        :param rejected: The rejected of this GetTransacAggregatedSmsReport.
        :type: int
        """
        if rejected is None:
            raise ValueError("Invalid value for `rejected`, must not be `None`")

        self._rejected = rejected

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetTransacAggregatedSmsReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
