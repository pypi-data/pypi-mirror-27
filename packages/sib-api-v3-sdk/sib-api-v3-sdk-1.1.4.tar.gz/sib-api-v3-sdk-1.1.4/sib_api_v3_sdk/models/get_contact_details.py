# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetContactDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'id': 'int',
        'email_blacklisted': 'bool',
        'sms_blacklisted': 'bool',
        'modified_at': 'datetime',
        'list_ids': 'list[int]',
        'list_unsubscribed': 'list[int]',
        'attributes': 'dict(str, str)'
    }

    attribute_map = {
        'email': 'email',
        'id': 'id',
        'email_blacklisted': 'emailBlacklisted',
        'sms_blacklisted': 'smsBlacklisted',
        'modified_at': 'modifiedAt',
        'list_ids': 'listIds',
        'list_unsubscribed': 'listUnsubscribed',
        'attributes': 'attributes'
    }

    def __init__(self, email=None, id=None, email_blacklisted=None, sms_blacklisted=None, modified_at=None, list_ids=None, list_unsubscribed=None, attributes=None):
        """
        GetContactDetails - a model defined in Swagger
        """

        self._email = None
        self._id = None
        self._email_blacklisted = None
        self._sms_blacklisted = None
        self._modified_at = None
        self._list_ids = None
        self._list_unsubscribed = None
        self._attributes = None

        self.email = email
        self.id = id
        self.email_blacklisted = email_blacklisted
        self.sms_blacklisted = sms_blacklisted
        self.modified_at = modified_at
        self.list_ids = list_ids
        if list_unsubscribed is not None:
          self.list_unsubscribed = list_unsubscribed
        self.attributes = attributes

    @property
    def email(self):
        """
        Gets the email of this GetContactDetails.
        Email address of the contact for which you requested the details

        :return: The email of this GetContactDetails.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this GetContactDetails.
        Email address of the contact for which you requested the details

        :param email: The email of this GetContactDetails.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def id(self):
        """
        Gets the id of this GetContactDetails.
        ID of the contact for which you requested the details

        :return: The id of this GetContactDetails.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GetContactDetails.
        ID of the contact for which you requested the details

        :param id: The id of this GetContactDetails.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def email_blacklisted(self):
        """
        Gets the email_blacklisted of this GetContactDetails.
        Blacklist status for email campaigns (true=blacklisted, false=not blacklisted)

        :return: The email_blacklisted of this GetContactDetails.
        :rtype: bool
        """
        return self._email_blacklisted

    @email_blacklisted.setter
    def email_blacklisted(self, email_blacklisted):
        """
        Sets the email_blacklisted of this GetContactDetails.
        Blacklist status for email campaigns (true=blacklisted, false=not blacklisted)

        :param email_blacklisted: The email_blacklisted of this GetContactDetails.
        :type: bool
        """
        if email_blacklisted is None:
            raise ValueError("Invalid value for `email_blacklisted`, must not be `None`")

        self._email_blacklisted = email_blacklisted

    @property
    def sms_blacklisted(self):
        """
        Gets the sms_blacklisted of this GetContactDetails.
        Blacklist status for SMS campaigns (true=blacklisted, false=not blacklisted)

        :return: The sms_blacklisted of this GetContactDetails.
        :rtype: bool
        """
        return self._sms_blacklisted

    @sms_blacklisted.setter
    def sms_blacklisted(self, sms_blacklisted):
        """
        Sets the sms_blacklisted of this GetContactDetails.
        Blacklist status for SMS campaigns (true=blacklisted, false=not blacklisted)

        :param sms_blacklisted: The sms_blacklisted of this GetContactDetails.
        :type: bool
        """
        if sms_blacklisted is None:
            raise ValueError("Invalid value for `sms_blacklisted`, must not be `None`")

        self._sms_blacklisted = sms_blacklisted

    @property
    def modified_at(self):
        """
        Gets the modified_at of this GetContactDetails.
        Last modification UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)

        :return: The modified_at of this GetContactDetails.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """
        Sets the modified_at of this GetContactDetails.
        Last modification UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)

        :param modified_at: The modified_at of this GetContactDetails.
        :type: datetime
        """
        if modified_at is None:
            raise ValueError("Invalid value for `modified_at`, must not be `None`")

        self._modified_at = modified_at

    @property
    def list_ids(self):
        """
        Gets the list_ids of this GetContactDetails.

        :return: The list_ids of this GetContactDetails.
        :rtype: list[int]
        """
        return self._list_ids

    @list_ids.setter
    def list_ids(self, list_ids):
        """
        Sets the list_ids of this GetContactDetails.

        :param list_ids: The list_ids of this GetContactDetails.
        :type: list[int]
        """
        if list_ids is None:
            raise ValueError("Invalid value for `list_ids`, must not be `None`")

        self._list_ids = list_ids

    @property
    def list_unsubscribed(self):
        """
        Gets the list_unsubscribed of this GetContactDetails.

        :return: The list_unsubscribed of this GetContactDetails.
        :rtype: list[int]
        """
        return self._list_unsubscribed

    @list_unsubscribed.setter
    def list_unsubscribed(self, list_unsubscribed):
        """
        Sets the list_unsubscribed of this GetContactDetails.

        :param list_unsubscribed: The list_unsubscribed of this GetContactDetails.
        :type: list[int]
        """

        self._list_unsubscribed = list_unsubscribed

    @property
    def attributes(self):
        """
        Gets the attributes of this GetContactDetails.

        :return: The attributes of this GetContactDetails.
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this GetContactDetails.

        :param attributes: The attributes of this GetContactDetails.
        :type: dict(str, str)
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetContactDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
