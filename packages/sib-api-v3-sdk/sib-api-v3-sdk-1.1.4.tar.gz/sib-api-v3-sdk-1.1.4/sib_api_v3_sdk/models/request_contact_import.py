# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RequestContactImport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_url': 'str',
        'file_body': 'str',
        'list_ids': 'list[int]',
        'notify_url': 'str',
        'new_list': 'RequestContactImportNewList'
    }

    attribute_map = {
        'file_url': 'fileUrl',
        'file_body': 'fileBody',
        'list_ids': 'listIds',
        'notify_url': 'notifyUrl',
        'new_list': 'newList'
    }

    def __init__(self, file_url=None, file_body=None, list_ids=None, notify_url=None, new_list=None):
        """
        RequestContactImport - a model defined in Swagger
        """

        self._file_url = None
        self._file_body = None
        self._list_ids = None
        self._notify_url = None
        self._new_list = None

        if file_url is not None:
          self.file_url = file_url
        if file_body is not None:
          self.file_body = file_body
        if list_ids is not None:
          self.list_ids = list_ids
        if notify_url is not None:
          self.notify_url = notify_url
        if new_list is not None:
          self.new_list = new_list

    @property
    def file_url(self):
        """
        Gets the file_url of this RequestContactImport.
        Mandatory if fileBody not defined. URL of the file to be imported (no local file). Possible file types: .txt, .csv

        :return: The file_url of this RequestContactImport.
        :rtype: str
        """
        return self._file_url

    @file_url.setter
    def file_url(self, file_url):
        """
        Sets the file_url of this RequestContactImport.
        Mandatory if fileBody not defined. URL of the file to be imported (no local file). Possible file types: .txt, .csv

        :param file_url: The file_url of this RequestContactImport.
        :type: str
        """

        self._file_url = file_url

    @property
    def file_body(self):
        """
        Gets the file_body of this RequestContactImport.
        Mandatory if fileUrl is not defined. CSV content to be imported. Use semicolon to separate multiple attributes

        :return: The file_body of this RequestContactImport.
        :rtype: str
        """
        return self._file_body

    @file_body.setter
    def file_body(self, file_body):
        """
        Sets the file_body of this RequestContactImport.
        Mandatory if fileUrl is not defined. CSV content to be imported. Use semicolon to separate multiple attributes

        :param file_body: The file_body of this RequestContactImport.
        :type: str
        """

        self._file_body = file_body

    @property
    def list_ids(self):
        """
        Gets the list_ids of this RequestContactImport.
        Manadatory if newList is not defined. Ids of the lists in which to add the contacts

        :return: The list_ids of this RequestContactImport.
        :rtype: list[int]
        """
        return self._list_ids

    @list_ids.setter
    def list_ids(self, list_ids):
        """
        Sets the list_ids of this RequestContactImport.
        Manadatory if newList is not defined. Ids of the lists in which to add the contacts

        :param list_ids: The list_ids of this RequestContactImport.
        :type: list[int]
        """

        self._list_ids = list_ids

    @property
    def notify_url(self):
        """
        Gets the notify_url of this RequestContactImport.
        URL that will be called once the export process is finished

        :return: The notify_url of this RequestContactImport.
        :rtype: str
        """
        return self._notify_url

    @notify_url.setter
    def notify_url(self, notify_url):
        """
        Sets the notify_url of this RequestContactImport.
        URL that will be called once the export process is finished

        :param notify_url: The notify_url of this RequestContactImport.
        :type: str
        """

        self._notify_url = notify_url

    @property
    def new_list(self):
        """
        Gets the new_list of this RequestContactImport.

        :return: The new_list of this RequestContactImport.
        :rtype: RequestContactImportNewList
        """
        return self._new_list

    @new_list.setter
    def new_list(self, new_list):
        """
        Sets the new_list of this RequestContactImport.

        :param new_list: The new_list of this RequestContactImport.
        :type: RequestContactImportNewList
        """

        self._new_list = new_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RequestContactImport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
