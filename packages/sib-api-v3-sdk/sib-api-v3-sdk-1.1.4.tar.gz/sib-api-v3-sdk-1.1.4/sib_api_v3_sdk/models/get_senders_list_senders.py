# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetSendersListSenders(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'email': 'str',
        'active': 'bool',
        'ips': 'list[GetSendersListIps]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'email': 'email',
        'active': 'active',
        'ips': 'ips'
    }

    def __init__(self, id=None, name=None, email=None, active=None, ips=None):
        """
        GetSendersListSenders - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._email = None
        self._active = None
        self._ips = None

        self.id = id
        self.name = name
        self.email = email
        self.active = active
        if ips is not None:
          self.ips = ips

    @property
    def id(self):
        """
        Gets the id of this GetSendersListSenders.
        Id of the sender

        :return: The id of this GetSendersListSenders.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GetSendersListSenders.
        Id of the sender

        :param id: The id of this GetSendersListSenders.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this GetSendersListSenders.
        From Name associated to the sender

        :return: The name of this GetSendersListSenders.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GetSendersListSenders.
        From Name associated to the sender

        :param name: The name of this GetSendersListSenders.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def email(self):
        """
        Gets the email of this GetSendersListSenders.
        From Email associated to the sender

        :return: The email of this GetSendersListSenders.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this GetSendersListSenders.
        From Email associated to the sender

        :param email: The email of this GetSendersListSenders.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def active(self):
        """
        Gets the active of this GetSendersListSenders.
        Status of sender (true=activated, false=deactivated)

        :return: The active of this GetSendersListSenders.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this GetSendersListSenders.
        Status of sender (true=activated, false=deactivated)

        :param active: The active of this GetSendersListSenders.
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def ips(self):
        """
        Gets the ips of this GetSendersListSenders.
        List of dedicated IP(s) available in the account. This data is displayed only for dedicated IPs

        :return: The ips of this GetSendersListSenders.
        :rtype: list[GetSendersListIps]
        """
        return self._ips

    @ips.setter
    def ips(self, ips):
        """
        Sets the ips of this GetSendersListSenders.
        List of dedicated IP(s) available in the account. This data is displayed only for dedicated IPs

        :param ips: The ips of this GetSendersListSenders.
        :type: list[GetSendersListIps]
        """

        self._ips = ips

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetSendersListSenders):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
