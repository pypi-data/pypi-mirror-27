import base64
from datetime import datetime

from atomicpay.mpesa import api
from atomicpay.mpesa import routes


class Lipa(object):

    def __init__(self, client):
        self.client = client

    def pay(self, phone, amount, description, reference, **kwargs):

        time = self.timestamp()

        passwd = self.generate_password(
            self.client.configs['LipaShortcode'],
            self.client.configs['LipaPassKey'],
            time
        )

        callback = kwargs.pop("callback", None)

        data = {
            "AccountReference": reference,
            "Amount": int(amount),
            "BusinessShortCode": int(self.client.configs['LipaShortcode']),
            "CallBackURL": kwargs.get('callback_url') or self.client.configs['URLS']['LIPA']['CallBackURL'],
            "PartyA": int(phone),
            "PartyB": int(self.client.configs['LipaShortcode']),
            "Password": passwd,
            "PhoneNumber": int(phone),
            "Timestamp": time,
            "TransactionDesc": description,
            "TransactionType": "CustomerPayBillOnline",
        }

        return api.call(
            route=routes.LNMOnlinePayment,
            data=data,
            access_token=self.client.auth.access_token,
            callback=callback
        )

    def query(self, checkout_id, **kwargs):
        time = self.timestamp()

        passwd = self.generate_password(
            self.client.configs['LipaShortcode'],
            self.client.configs['LipaPassKey'],
            time
        )

        callback = kwargs.pop("callback", None)

        data = {
            "BusinessShortCode": int(self.client.configs['LipaShortcode']),
            "CheckoutRequestID": checkout_id,
            "Password": passwd,
            "Timestamp": time
        }

        return api.call(
            route=routes.LNMQueryRequest,
            data=data,
            access_token=self.client.auth.access_token,
            callback=callback
        )

    @staticmethod
    def generate_password(shortcode, passkey, timestamp):
        """
        The password for encrypting the request.\n
        Generated by base64 encoding (BusinessShortcode, Passkey and Timestamp).
        """
        r = str(shortcode) + str(passkey) + str(timestamp)
        string_bytes = bytes(r, encoding='utf-8')

        encoded = base64.b64encode(string_bytes)

        return encoded.decode("utf-8")

    @staticmethod
    def timestamp():
        """Timestamp in the format yyyymmddhhiiss."""
        return datetime.now().strftime("%Y%m%d%H%M%S")
