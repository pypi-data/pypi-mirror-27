create
******


Description
===========

Creates a bucket in the given namespace with a bucket name and
optional user-defined metadata.

Example:
   oci os bucket create -ns mynamespace --name mybucket --compartment-
   id ocid1.compartment.oc1..aaaaaaaarhifmvrvuqtye5q65flzp3pp2jojdc6r
   ck6copzqck3ukcypxfga --metadata '{"key1":"value1","key2":"value2"}'


Usage
=====

   oci os bucket create [OPTIONS]


Options
=======


-ns, --namespace [text]
-----------------------

The top-level namespace used for the request. [required]


--compartment-id, -c [text]
---------------------------

The ID of the compartment in which to create the bucket. [required]


--name [text]
-------------

The name of the bucket.


--metadata [text]
-----------------

Arbitrary string keys and values for user-defined metadata. Must be in
JSON format. Example: '{"key1":"value1","key2":"value2"}'


--public-access-type [NoPublicAccess|ObjectRead]
------------------------------------------------

The type of public access available on this bucket. Allows
authenticated caller to access the bucket or contents of this bucket.
By default a bucket is set to NoPublicAccess. It is treated as
NoPublicAccess when this value is not specified. When the type is
NoPublicAccess the bucket does not allow any public access. When the
type is ObjectRead the bucket allows public access to the GetObject
operation only.


--storage-tier [Standard|Archive]
---------------------------------

The type of storage tier for this bucket. A bucket is set to Standard
tier by default, which means the bucket will be put in the standard
storage tier. When the Archive tier type is set explicitly, the bucket
is put in the Archive Storage tier. The storage-tier property is
immutable after bucket is created.


--generate-full-command-json-input
----------------------------------

Prints out a JSON document which represents all possible options that
can be provided to this command.

This JSON document can be saved to a file, modified with the
appropriate option values, and then passed back via the --from-json
option. This provides an alternative to typing options out on the
command line.


--generate-param-json-input [text]
----------------------------------

Complex input, such as arrays and objects, are passed in JSON format.

When passed the name of an option which takes complex input, this will
print out example JSON of what needs to be passed to that option.


--from-json [text]
------------------

Provide input to this command as a JSON document from a file.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used


-?, -h, --help
--------------

Show this message and exit.
