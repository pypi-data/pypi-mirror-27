list
****


Description
===========

Returns all audit events for the specified compartment that were
processed within the specified time range.


Usage
=====

   oci audit event list [OPTIONS]


Options
=======


--compartment-id, -c [text]
---------------------------

The OCID of the compartment. [required]


--start-time [datetime]
-----------------------

Returns events that were processed at or after this start date and
time, expressed in RFC 3339 timestamp format. For example, a start
value of *2017-01-15T11:30:00Z* will retrieve a list of all events
processed since 30 minutes after the 11th hour of January 15, 2017, in
Coordinated Universal Time (UTC). You can specify a value with
granularity to the minute. Seconds (and milliseconds, if included)
must be set to *0*. [required]


--end-time [datetime]
---------------------

Returns events that were processed before this end date and time,
expressed in RFC 3339 timestamp format. For example, a start value of
*2017-01-01T00:00:00Z* and an end value of *2017-01-02T00:00:00Z* will
retrieve a list of all events processed on January 1, 2017. Similarly,
a start value of *2017-01-01T00:00:00Z* and an end value of
*2017-02-01T00:00:00Z* will result in a list of all events processed
between January 1, 2017 and January 31, 2017. You can specify a value
with granularity to the minute. Seconds (and milliseconds, if
included) must be set to *0*. [required]


--page [text]
-------------

The value of the *opc-next-page* response header from the previous
list query.


--opc-request-id [text]
-----------------------

Unique Oracle-assigned identifier for the request. If you need to
contact Oracle about a particular request, please provide the request
ID.


--all
-----

Fetches all pages of results. If you provide this option, then you
cannot provide the --limit option.


--generate-full-command-json-input
----------------------------------

Prints out a JSON document which represents all possible options that
can be provided to this command.

This JSON document can be saved to a file, modified with the
appropriate option values, and then passed back via the --from-json
option. This provides an alternative to typing options out on the
command line.


--generate-param-json-input [text]
----------------------------------

Complex input, such as arrays and objects, are passed in JSON format.

When passed the name of an option which takes complex input, this will
print out example JSON of what needs to be passed to that option.


--from-json [text]
------------------

Provide input to this command as a JSON document from a file.

Options can still be provided on the command line. If an option exists
in both the JSON document and the command line then the command line
specified value will be used


-?, -h, --help
--------------

Show this message and exit.
