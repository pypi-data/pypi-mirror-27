#!/usr/bin env python3
"""
Python module for comments API.
This module used for Python wrapper for Qiscus SDK RESTful API
"""

import json
from requests import post, get


class Response():
    pass


class Comments:
    def __init__(self):
        self.secret_key = None
        self.base_url = None
        self.app_id = None

    def post_comment_text(self, sender_email, room_id, message, payload=None,
                          unique_temp_id=None, disable_link_preview=None):
        """
        This method used to post comment text type.

        :param sender_email: sender email
        :type sender_email: str
        :param room_id:it can be room_id or channel id specified by client or
        auto generated by server
        :type room_id: str
        :param message: message
        :type message: str
        :param payload: payload, optional parameter. default=null
        :type payload: str
        :param unique_temp_id: optional parameter. default=generated by backend.
        :type unique_temp_id: str
        :param disable_link_preview: optional parameter. default='false'
        :type disable_link_preview: bool
        :return: it will return object named room
        """
        headers = {
            "QISCUS_SDK_SECRET": self.secret_key,
            "QISCUS_SDK_APP_ID": self.app_id
        }

        data = {
            "sender_email": sender_email,
            "room_id": room_id,
            "message": message,
            "type": 'text',
            "payload": payload,
            "unique_temp_id": unique_temp_id,
            "disable_link_preview": disable_link_preview
        }

        url = self.base_url + 'post_comment'
        requests = post(url, data=data, headers=headers)
        result = requests.json()
        if 200 <= requests.status_code < 400:
            comment = Response()
            comment.comment_before_id = result['results']['comment']['comment_before_id']
            comment.comment_disable_link_preview = result['results']['comment']['disable_link_preview']
            comment.comment_user_email = result['results']['comment']['email']
            comment.comment_id = result['results']['comment']['id']
            comment.comment_message = result['results']['comment']['message']
            comment.comment_payload = result['results']['comment']['payload']
            comment.comment_room_id = result['results']['comment']['room_id']
            comment.comment_timestamp = result['results']['comment']['timestamp']
            comment.comment_unix_timestamp = result['results']['comment']['unix_timestamp']
            comment.comment_topic_id = result['results']['comment']['topic_id']
            comment.comment_type = result['results']['comment']['type']
            comment.comment_unique_temp_id = result['results']['comment']['unique_temp_id']
            comment.comment_user_avatar_url = result['results']['comment']['user_avatar_url']
            comment.comment_username = result['results']['comment']['username']
            comment.comment_info_as_json = json.dumps(requests.json())
            return comment
        else:
            comment = Response()
            comment.error_message = result['error']['message']
            comment.error_info_as_json = json.dumps(requests.json())
            comment.error_status_code = requests.status_code
            return comment

    def post_comment_buttons(self, sender_email, room_id, payload):
        """
        This method used to post comment buttons type.

        :param sender_email: sender email
        :type sender_email: str
        :param room_id:it can be room_id or channel id specified by client or
        auto generated by server
        :type room_id: str
        :param payload:
        :type payload: str
            Payload example:
                {
                    "text": "silahkan pencet",
                    "buttons": [
                        {
                            "label": "button1",
                            "type": "postback",
                            "payload": {
                                "url": "http://somewhere.com/button1",
                                "method": "get",
                                "payload": null
                            }
                        },
                        {
                            "label": "button2",
                            "type": "link",
                            "payload": {
                                "url": "http://somewhere.com/button2?id=123",
                                "method": "get",
                                "payload": null
                            }
                        }
                    ]
                }
        :return: it will return object named room
        """
        headers = {
            "QISCUS_SDK_SECRET": self.secret_key,
            "QISCUS_SDK_APP_ID": self.app_id
        }

        data = {
            "sender_email": sender_email,
            "room_id": room_id,
            "type": 'buttons',
            "payload": payload
        }

        url = self.base_url + 'post_comment'
        requests = post(url, data=data, headers=headers)
        result = requests.json()
        if 200 <= requests.status_code < 400:
            comment = Response()
            comment_payload_buttons = []
            for i in result['results']['comment']['payload']['buttons']:
                comment = Response()
                comment.label = i['label']
                comment.type = i['type']
                comment.payload = i['payload']
                comment.info_as_json = json.dumps(result['results']['comment']['payload']['buttons'])
                comment_payload_buttons.append(comment)
            comment.comment_payload_buttons = comment_payload_buttons
            comment.comment_payload = result['results']['comment']['payload']
            comment.comment_room_id = result['results']['comment']['room_id']
            comment.comment_timestamp = result['results']['comment']['timestamp']
            comment.comment_topic_id = result['results']['comment']['topic_id']
            comment.comment_type = result['results']['comment']['type']
            comment.comment_unique_temp_id = result['results']['comment']['unique_temp_id']
            comment.comment_unix_nano_timestamp = result['results']['comment']['unix_nano_timestamp']
            comment.comment_unix_timestamp = result['results']['comment']['unix_timestamp']
            comment.comment_user_avatar_url = result['results']['comment']['user_avatar_url']
            comment.comment_user_id = result['results']['comment']['user_id']
            comment.comment_username = result['results']['comment']['username']
            comment.comment_before_id = result['results']['comment']['comment_before_id']
            comment.comment_disable_link_preview = result['results']['comment']['disable_link_preview']
            comment.comment_email = result['results']['comment']['email']
            comment.comment_id = result['results']['comment']['id']
            comment.comment_message = result['results']['comment']['message']
            comment.comment_payload_text = result['results']['comment']['payload']['text']
            comment.comment_info_as_json = json.dumps(requests.json())
            return comment
        else:
            comment = Response()
            comment.error_message = result['error']['message']
            comment.error_as_json = json.dumps(requests.json())
            comment.error_status_code = requests.status_code
            return comment

    def post_comment_card(self, sender_email, room_id, payload):
        """
        This method used to post comment card type.

        :param sender_email:
        :type sender_email: str
        :param room_id:
        :type room_id: str
        :param payload:
            payload example:
                {
                    "text": "Special deal buat sista nih..",
                    "image": "http://url.com/gambar.jpg",
                    "title": "Atasan Blouse Tunik Wanita Baju Muslim Worie Longtop",
                    "description": "Oleh sippnshop\n96% (666 feedback)\nRp 49.000.00,-\nBUY 2 GET 1 FREE!!!",
                    "url": "http://url.com/baju?id=123&track_from_chat_room=123",
                    "buttons": [
                        {
                            "label": "button1",
                            "type": "postback",
                            "payload": {
                                "url": "http://somewhere.com/button1",
                                "method": "get",
                                "payload": null
                            }
                        },
                        {
                            "label": "button2",
                            "type": "link",
                            "payload": {
                                "url": "http://somewhere.com/button2?id=123",
                                "method": "get",
                                "payload": null
                            }
                        }
                    ]
                }
        :type payload: str
        :return: it will return object named room
        """
        headers = {
            "QISCUS_SDK_SECRET": self.secret_key,
            "QISCUS_SDK_APP_ID": self.app_id
        }

        data = {
            "sender_email": sender_email,
            "room_id": room_id,
            "type": 'card',
            "payload": payload.replace("\n", " ")
        }

        url = self.base_url + 'post_comment'
        requests = post(url, data=data, headers=headers)
        result = requests.json()
        if 200 <= requests.status_code < 400:
            comment = Response()
            comment.comment_before_id = result['results']['comment']['comment_before_id']
            comment.comment_disable_link_preview = result['results']['comment']['disable_link_preview']
            comment.comment_user_email = result['results']['comment']['email']
            comment.comment_id = result['results']['comment']['id']
            comment.comment_message = result['results']['comment']['message']
            comment.comment_payload = result['results']['comment']['payload']
            comment.comment_payload_description = result['results']['comment']['payload']['description']
            comment.comment_payload_image = result['results']['comment']['payload']['image']
            comment.comment_payload_text = result['results']['comment']['payload']['text']
            comment.comment_payload_title = result['results']['comment']['payload']['title']
            comment.comment_payload_url = result['results']['comment']['payload']['url']
            comment.comment_room_id = result['results']['comment']['room_id']
            comment.comment_status = result['results']['comment']['status']
            comment.comment_timestamp = result['results']['comment']['timestamp']
            comment.comment_topic_id = result['results']['comment']['topic_id']
            comment.comment_user_avatar_url = result['results']['comment']['user_avatar_url']
            comment.comment_user_id = result['results']['comment']['user_id']
            comment.comment_username = result['results']['comment']['username']
            comment.comment_info_as_json = json.dumps(requests.json())
            return comment
        else:
            comment = Response()
            comment.error_message = result['error']['message']
            comment.error_as_json = json.dumps(requests.json())
            comment.error_status_code = requests.status_code
            return comment

    def post_comment_custom(self, sender_email, room_id, payload):
        """
        This method used to post comment custom type.

        :param sender_email:
        :type sender_email: str
        :param room_id:
        :type room_id: str
        :param payload: can be anything: object, array, string, number in JSON
            payload example 1:
                {
                    "type": "typecustom",
                    "content": {
                          "foo": "bar"
                }
            payload example 2:
                {
                    "type": "promo", // sub type of custom payload
                    "content": {
                        "date": "2017-09-09"
                    }
                }
        :type payload: str
        :return: it will return object named room
        """
        headers = {
            "QISCUS_SDK_SECRET": self.secret_key,
            "QISCUS_SDK_APP_ID": self.app_id
        }

        data = {
            "sender_email": sender_email,
            "room_id": room_id,
            "type": 'custom',
            "payload": payload.replace("\n", " ")
        }

        url = self.base_url + 'post_comment'
        requests = post(url, data=data, headers=headers)
        result = requests.json()
        if 200 <= requests.status_code < 400:
            comment = Response()
            comment.comment_before_id = result['results']['comment']['comment_before_id']
            comment.comment_disable_link_preview = result['results']['comment']['disable_link_preview']
            comment.comment_user_email = result['results']['comment']['email']
            comment.comment_id = result['results']['comment']['id']
            comment.comment_message = result['results']['comment']['message']
            comment.comment_payload = result['results']['comment']['payload']
            comment.comment_room_id = result['results']['comment']['room_id']
            comment.comment_status = result['results']['comment']['status']
            comment.comment_timestamp = result['results']['comment']['timestamp']
            comment.comment_topic_id = result['results']['comment']['topic_id']
            comment.comment_user_avatar_url = result['results']['comment']['user_avatar_url']
            comment.comment_user_id = result['results']['comment']['user_id']
            comment.comment_username = result['results']['comment']['username']
            comment.comment_info_as_json = json.dumps(requests.json())
            return comment
        else:
            comment = Response()
            comment.error_message = result['error']['message']
            comment.error_as_json = json.dumps(requests.json())
            comment.error_status_code = requests.status_code
            return comment

    def post_comment_account_linking(self, sender_email, room_id, payload):
        """
        This method used to post comment account linking type.

        :param sender_email:
        :type sender_email: str
        :param room_id:
        :type room_id: str
        :param payload:
            payload example:
                {
                    "text": "silahkan login",
                    "url": "http://google.com",
                    "redirect_url": "http://google.com/redirect",
                    "params": {
                        "user_id": 1,
                        "topic_id": 1,
                        "button_text": "ini button",
                        "view_title": "title",
                        "success_message": "sip!"
                    }
                }
        :type payload: str
        :return: it will return object named room
        """
        headers = {
            "QISCUS_SDK_SECRET": self.secret_key,
            "QISCUS_SDK_APP_ID": self.app_id
        }

        data = {
            "sender_email": sender_email,
            "room_id": room_id,
            "type": 'account_linking',
            "payload": payload.replace("\n", " ")
        }

        url = self.base_url + 'post_comment'
        requests = post(url, data=data, headers=headers)
        result = requests.json()
        if 200 <= requests.status_code < 400:
            comment = Response()
            comment.comment_message = result['results']['comment']['message']
            comment.comment_user_avatar_url = result['results']['comment']['user_avatar_url']
            comment.comment_before_id_str = result['results']['comment']['comment_before_id_str']
            comment.comment_user_id = result['results']['comment']['user_id']
            comment.comment_disable_link_preview = result['results']['comment']['disable_link_preview']
            comment.comment_unix_nano_timestamp = result['results']['comment']['unix_nano_timestamp']
            comment.comment_topic_id = result['results']['comment']['topic_id']
            comment.comment_type = result['results']['comment']['type']
            comment.comment_id = result['results']['comment']['id']
            comment.comment_extras = result['results']['comment']['extras']
            comment.comment_unix_timestamp = result['results']['comment']['unix_timestamp']
            comment.comment_payload = result['results']['comment']['payload']
            comment.payload_url = result['results']['comment']['payload']['url']
            comment.payload_redirect_url = result['results']['comment']['payload']['redirect_url']
            comment.payload_text = result['results']['comment']['payload']['text']
            comment.payload_params = result['results']['comment']['payload']['params']
            comment.payload_params_topic_id = result['results']['comment']['payload']['params']['topic_id']
            comment.payload_params_user_id = result['results']['comment']['payload']['params']['user_id']
            comment.payload_params_button_text = result['results']['comment']['payload']['params']['button_text']
            comment.payload_params_view_title = result['results']['comment']['payload']['params']['view_title']
            comment.payload_params_success_message = result['results']['comment']['payload']['params']['success_message']
            comment.comment_before_id = result['results']['comment']['comment_before_id']
            comment.comment_username = result['results']['comment']['username']
            comment.comment_timestamp = result['results']['comment']['timestamp']
            comment.comment_email = result['results']['comment']['email']
            comment.comment_room_id = result['results']['comment']['room_id']
            comment.comment_status = result['results']['comment']['status']
            comment.comment_unique_temp_id = result['results']['comment']['unique_temp_id']
            comment.comment_info_as_json = json.dumps(requests.json())
            return comment
        else:
            comment = Response()
            comment.error_message = result['error']['message']
            comment.error_as_json = json.dumps(requests.json())
            comment.error_status_code = requests.status_code
            return comment

    def post_comment_postback_button(self, sender_email, room_id, payload):
        """

        :param sender_email:
        :param room_id:
        :param payload:
            payload example:
                {
                    "url": "http://telkomnews.bots.qiscus.com/v1/postback",
                    "method": "post",
                    "payload": {
                        "intent": "POPULER_NEWS"
                    }
                }
        :return:
        """
        headers = {
            "QISCUS_SDK_SECRET": self.secret_key,
            "QISCUS_SDK_APP_ID": self.app_id
        }

        data = {
            "sender_email": sender_email,
            "room_id": room_id,
            "type": 'button_postback_response',
            "payload": payload.replace("\n", " ")
        }

        url = self.base_url + 'post_comment'
        requests = post(url, data=data, headers=headers)
        result = requests.json()
        if 200 <= requests.status_code < 400:
            comment = Response()
            comment.comment_before_id = result['results']['comment']['comment_before_id']
            comment.comment_disable_link_preview = result['results']['comment']['disable_link_preview']
            comment.comment_email = result['results']['comment']['email']
            comment.comment_extras = result['results']['comment']['extras']
            comment.comment_id = result['results']['comment']['id']
            comment.comment_message = result['results']['comment']['message']
            comment.comment_payload = result['results']['comment']['payload']
            comment.payload_url = result['results']['comment']['payload']['url']
            comment.payload_method = result['results']['comment']['payload']['method']
            comment.payload_payload = result['results']['comment']['payload']['payload']
            comment.comment_room_id = result['results']['comment']['room_id']
            comment.comment_status = result['results']['comment']['status']
            comment.comment_timestamp = result['results']['comment']['timestamp']
            comment.comment_topic_id = result['results']['comment']['topic_id']
            comment.comment_type = result['results']['comment']['type']
            comment.comment_unique_temp_id = result['results']['comment']['unique_temp_id']
            comment.comment_unix_nano_timestamp = result['results']['comment']['unix_nano_timestamp']
            comment.comment_unix_timestamp = result['results']['comment']['unix_timestamp']
            comment.comment_user_avatar_url = result['results']['comment']['user_avatar_url']
            comment.comment_user_id = result['results']['comment']['user_id']
            comment.comment_username = result['results']['comment']['username']
            comment.comment_info_as_json = json.dumps(requests.json())
            return comment
        else:
            comment = Response()
            comment.error_message = result['error']['message']
            comment.error_as_json = json.dumps(requests.json())
            comment.error_status_code = requests.status_code
            return comment

    def load_comments(self, room_id, page='1', limit='20'):
        """
        This method used to load comments in specific room

        :param room_id:
        :type room_id: int
        :param page: optional default=1
        :type page: int
        :param limit: optional default=20
        :type limit: int
        :return: it will return object named room
        """
        headers = {
            "QISCUS_SDK_SECRET": self.secret_key,
            "QISCUS_SDK_APP_ID": self.app_id
        }

        url = self.base_url + 'load_comments?room_id=' + \
            room_id + '&page=' + page + '&limit=' + limit
        requests = get(url, headers=headers)
        result = requests.json()
        if 200 <= requests.status_code < 400:
            comment = Response()
            comments_detail = []
            for i in result['results']['comments']:
                comments = Response()
                comments.comment_before_id = i['comment_before_id']
                comments.disable_link_preview = i['disable_link_preview']
                comments.user_email = i['email']
                comments.comments_id = i['id']
                comments.message = i['message']
                comments.room_id = i['room_id']
                comments.room_name = i['room_name']
                comments.timestamp = i['timestamp']
                comments.unique_temp_id = i['unique_temp_id']
                comments.user_avatar_url = i['user_avatar_url']
                comments.username = i['username']
                comments.info_as_json = json.dumps(result['results']['comments'])
                comments_detail.append(comments)
            comment.comments_info = comments_detail
            comment.comment_info_as_json = json.dumps(requests.json())
            return comment
        else:
            comment = Response()
            comment.error_message = result['error']['message']
            comment.error_info_as_json = json.dumps(requests.json())
            comment.error_status_code = requests.status_code
            return comment

    def search_messages(self, user_email, query, room_id=None):
        """
        This method used to search messages in specific room

        :param user_email:
        :type user_email: str
        :param query:keyword to search
        :type query: str
        :param room_id: optional, send this param if you want
        search message in specific room
        :type room_id: str
        :return: it will return object named room
        """
        headers = {
            "QISCUS_SDK_SECRET": self.secret_key,
            "QISCUS_SDK_APP_ID": self.app_id
        }
        data = {
            "user_email": user_email,
            "query": query,
            "room_id": room_id
        }

        url = self.base_url + 'search_messages'
        requests = post(url, data=data, headers=headers)
        result = requests.json()
        if 200 <= requests.status_code < 400:
            message = Response()
            message_details = []
            for i in result['results']['comments']:
                messages = Response()
                messages.chat_type = i['chat_type']
                messages.comment_before_id = i['comment_before_id']
                messages.disable_link_preview = i['disable_link_preview']
                messages.user_email = i['email']
                messages.comments_id = i['id']
                messages.message = i['message']
                messages.payload = i['payload']
                messages.room_id = i['room_id']
                messages.room_name = i['room_name']
                messages.timestamp = i['timestamp']
                messages.topic_id = i['topic_id']
                messages.type = i['type']
                messages.unique_temp_id = i['unique_temp_id']
                messages.unix_timestamp = i['unix_timestamp']
                messages.user_avatar_url = i['user_avatar_url']
                messages.user_id = i['user_id']
                messages.username = i['username']
                messages.info_as_json = json.dumps(result['results']['comments'])
                message_details.append(messages)
            message.messages_info = message_details
            message.info_as_json = json.dumps(requests.json())
            return message
        else:
            message = Response()
            message.error_message = result['error']['message']
            message.error_info_as_json = json.dumps(requests.json())
            message.error_status_code = requests.status_code
            return message

    def post_system_event_message(self, system_event_type, room_id, subject_email,
                                  object_email=None, updated_room_name=None):
        """
        This method used to post all type of system event message

        :param system_event_type: valid value is: "create_room", "add_member",
        "join_room", "remove_member", "left_room", "change_room_name", "change_room_avatar"
        :type system_event_type: str
        :param room_id: room id to post
        :type room_id: str
        :param subject_email: person who create a room, add member to room,
        join room, remove member from room, left from room,
        change room name and/or room avatar
        :type subject_email: str
        :param object_email: array of string. optional, only required when
        system event type is add_member or remove_member
        :type object_email: str
        :param updated_room_name: only required when system event message
        type is change_room_name or create_room
        :type updated_room_name: str
        :return: it will return object named room
        """
        headers = {
            "QISCUS_SDK_SECRET": self.secret_key,
            "QISCUS_SDK_APP_ID": self.app_id
        }

        data = {
            "system_event_type": system_event_type,
            "room_id": room_id,
            "subject_email": subject_email,
            "updated_room_name": updated_room_name
        }

        url = self.base_url + 'post_system_event_message'
        requests = post(url, data=data, headers=headers)
        result = requests.json()
        if 200 <= requests.status_code < 400:
            comment = Response()
            comment.comment_before_id = json.dumps(result['results']['comment']['comment_before_id'])
            comment.disable_link_preview = json.dumps(result['results']['comment']['disable_link_preview'])
            comment.user_email = json.dumps(result['results']['comment']['email'])
            comment.comment_id = json.dumps(result['results']['comment']['id'])
            comment.message = json.dumps(result['results']['comment']['message'])
            comment.payload = json.dumps(result['results']['comment']['payload'])
            comment.room_id = json.dumps(result['results']['comment']['room_id'])
            comment.status = json.dumps(result['results']['comment']['status'])
            comment.timestamp = json.dumps(result['results']['comment']['timestamp'])
            comment.topic_id = json.dumps(result['results']['comment']['topic_id'])
            comment.type = json.dumps(result['results']['comment']['type'])
            comment.unique_temp_id = json.dumps(result['results']['comment']['unique_temp_id'])
            comment.unix_nano_timestamp = json.dumps(result['results']['comment']['unix_nano_timestamp'])
            comment.unix_timestamp = json.dumps(result['results']['comment']['unix_timestamp'])
            comment.user_avatar_url = json.dumps(result['results']['comment']['user_avatar_url'])
            comment.user_id = json.dumps(result['results']['comment']['user_id'])
            comment.username = json.dumps(result['results']['comment']['username'])
            comment.info_as_json = json.dumps(requests.json())
            return comment
        else:
            comment = Response()
            comment.error_message = json.dumps(result['error']['message'])
            comment.error_status_code = json.dumps(requests.status_code)
            comment.error_info_as_json = json.dumps(requests.json())
            return comment
