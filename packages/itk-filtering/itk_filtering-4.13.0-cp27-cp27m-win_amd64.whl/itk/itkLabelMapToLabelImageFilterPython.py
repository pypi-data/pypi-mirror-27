# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkLabelMapToLabelImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkLabelMapToLabelImageFilterPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkLabelMapToLabelImageFilterPython')
    _itkLabelMapToLabelImageFilterPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkLabelMapToLabelImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkLabelMapToLabelImageFilterPython
            return _itkLabelMapToLabelImageFilterPython
        try:
            _mod = imp.load_module('_itkLabelMapToLabelImageFilterPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkLabelMapToLabelImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkLabelMapToLabelImageFilterPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkLabelMapFilterPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkStatisticsLabelObjectPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkAffineTransformPython
import itkCovariantVectorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkTransformBasePython
import itkDiffusionTensor3DPython
import itkSymmetricSecondRankTensorPython
import itkOptimizerParametersPython
import itkArrayPython
import itkArray2DPython
import itkVariableLengthVectorPython
import itkMatrixOffsetTransformBasePython
import itkHistogramPython
import itkSamplePython
import itkShapeLabelObjectPython
import itkLabelObjectPython
import itkLabelObjectLinePython
import ITKLabelMapBasePython
import itkImagePython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkImageToImageFilterCommonPython

def itkLabelMapToLabelImageFilterLM3IUC3_New():
  return itkLabelMapToLabelImageFilterLM3IUC3.New()


def itkLabelMapToLabelImageFilterLM2IUC2_New():
  return itkLabelMapToLabelImageFilterLM2IUC2.New()

class itkLabelMapToLabelImageFilterLM2IUC2(itkLabelMapFilterPython.itkLabelMapFilterLM2IUC2):
    """


    Converts a LabelMap to a labeled image.

    LabelMapToBinaryImageFilter to a label image.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584 orhttp://www
    .insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapMaskImageFilter Wiki
    Examples:

    All Examples

    https://www.itk.org/Wiki/ITK/Examples/ImageProcessing/LabelMapToLabelI
    mageFilter Convert a LabelMap to a normal image with different values
    representing each region

    C++ includes: itkLabelMapToLabelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkLabelMapToLabelImageFilterLM2IUC2_Pointer"""
        return _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkLabelMapToLabelImageFilterLM2IUC2 self) -> itkLabelMapToLabelImageFilterLM2IUC2_Pointer"""
        return _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM2IUC2_Clone(self)

    SameDimensionCheck = _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM2IUC2_SameDimensionCheck
    __swig_destroy__ = _itkLabelMapToLabelImageFilterPython.delete_itkLabelMapToLabelImageFilterLM2IUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkLabelMapToLabelImageFilterLM2IUC2"""
        return _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM2IUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkLabelMapToLabelImageFilterLM2IUC2 self) -> itkLabelMapToLabelImageFilterLM2IUC2"""
        return _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM2IUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkLabelMapToLabelImageFilterLM2IUC2

        Create a new object of the class itkLabelMapToLabelImageFilterLM2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapToLabelImageFilterLM2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLabelMapToLabelImageFilterLM2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLabelMapToLabelImageFilterLM2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLabelMapToLabelImageFilterLM2IUC2.Clone = new_instancemethod(_itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM2IUC2_Clone, None, itkLabelMapToLabelImageFilterLM2IUC2)
itkLabelMapToLabelImageFilterLM2IUC2.GetPointer = new_instancemethod(_itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM2IUC2_GetPointer, None, itkLabelMapToLabelImageFilterLM2IUC2)
itkLabelMapToLabelImageFilterLM2IUC2_swigregister = _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM2IUC2_swigregister
itkLabelMapToLabelImageFilterLM2IUC2_swigregister(itkLabelMapToLabelImageFilterLM2IUC2)

def itkLabelMapToLabelImageFilterLM2IUC2___New_orig__():
    """itkLabelMapToLabelImageFilterLM2IUC2___New_orig__() -> itkLabelMapToLabelImageFilterLM2IUC2_Pointer"""
    return _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM2IUC2___New_orig__()

def itkLabelMapToLabelImageFilterLM2IUC2_cast(obj):
    """itkLabelMapToLabelImageFilterLM2IUC2_cast(itkLightObject obj) -> itkLabelMapToLabelImageFilterLM2IUC2"""
    return _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM2IUC2_cast(obj)

class itkLabelMapToLabelImageFilterLM3IUC3(itkLabelMapFilterPython.itkLabelMapFilterLM3IUC3):
    """


    Converts a LabelMap to a labeled image.

    LabelMapToBinaryImageFilter to a label image.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584 orhttp://www
    .insight-journal.org/browse/publication/176

    See:   LabelMapToBinaryImageFilter, LabelMapMaskImageFilter Wiki
    Examples:

    All Examples

    https://www.itk.org/Wiki/ITK/Examples/ImageProcessing/LabelMapToLabelI
    mageFilter Convert a LabelMap to a normal image with different values
    representing each region

    C++ includes: itkLabelMapToLabelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkLabelMapToLabelImageFilterLM3IUC3_Pointer"""
        return _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkLabelMapToLabelImageFilterLM3IUC3 self) -> itkLabelMapToLabelImageFilterLM3IUC3_Pointer"""
        return _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM3IUC3_Clone(self)

    SameDimensionCheck = _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM3IUC3_SameDimensionCheck
    __swig_destroy__ = _itkLabelMapToLabelImageFilterPython.delete_itkLabelMapToLabelImageFilterLM3IUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkLabelMapToLabelImageFilterLM3IUC3"""
        return _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM3IUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkLabelMapToLabelImageFilterLM3IUC3 self) -> itkLabelMapToLabelImageFilterLM3IUC3"""
        return _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM3IUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkLabelMapToLabelImageFilterLM3IUC3

        Create a new object of the class itkLabelMapToLabelImageFilterLM3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapToLabelImageFilterLM3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLabelMapToLabelImageFilterLM3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLabelMapToLabelImageFilterLM3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLabelMapToLabelImageFilterLM3IUC3.Clone = new_instancemethod(_itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM3IUC3_Clone, None, itkLabelMapToLabelImageFilterLM3IUC3)
itkLabelMapToLabelImageFilterLM3IUC3.GetPointer = new_instancemethod(_itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM3IUC3_GetPointer, None, itkLabelMapToLabelImageFilterLM3IUC3)
itkLabelMapToLabelImageFilterLM3IUC3_swigregister = _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM3IUC3_swigregister
itkLabelMapToLabelImageFilterLM3IUC3_swigregister(itkLabelMapToLabelImageFilterLM3IUC3)

def itkLabelMapToLabelImageFilterLM3IUC3___New_orig__():
    """itkLabelMapToLabelImageFilterLM3IUC3___New_orig__() -> itkLabelMapToLabelImageFilterLM3IUC3_Pointer"""
    return _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM3IUC3___New_orig__()

def itkLabelMapToLabelImageFilterLM3IUC3_cast(obj):
    """itkLabelMapToLabelImageFilterLM3IUC3_cast(itkLightObject obj) -> itkLabelMapToLabelImageFilterLM3IUC3"""
    return _itkLabelMapToLabelImageFilterPython.itkLabelMapToLabelImageFilterLM3IUC3_cast(obj)



