# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkHuangThresholdCalculatorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkHuangThresholdCalculatorPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkHuangThresholdCalculatorPython')
    _itkHuangThresholdCalculatorPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkHuangThresholdCalculatorPython', [dirname(__file__)])
        except ImportError:
            import _itkHuangThresholdCalculatorPython
            return _itkHuangThresholdCalculatorPython
        try:
            _mod = imp.load_module('_itkHuangThresholdCalculatorPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkHuangThresholdCalculatorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkHuangThresholdCalculatorPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkHistogramThresholdCalculatorPython
import itkSimpleDataObjectDecoratorPython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkArrayPython
import ITKCommonBasePython
import itkHistogramPython
import itkSamplePython

def itkHuangThresholdCalculatorHFF_New():
  return itkHuangThresholdCalculatorHFF.New()


def itkHuangThresholdCalculatorHDF_New():
  return itkHuangThresholdCalculatorHDF.New()


def itkHuangThresholdCalculatorHFUC_New():
  return itkHuangThresholdCalculatorHFUC.New()


def itkHuangThresholdCalculatorHDUC_New():
  return itkHuangThresholdCalculatorHDUC.New()


def itkHuangThresholdCalculatorHFSS_New():
  return itkHuangThresholdCalculatorHFSS.New()


def itkHuangThresholdCalculatorHDSS_New():
  return itkHuangThresholdCalculatorHDSS.New()

class itkHuangThresholdCalculatorHDF(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF):
    """


    Computes the Huang's threshold for an image.

    This calculator computes the Huang's fuzzy threshold which separates
    an image into foreground and background components. Uses Shannon's
    entropy function (one can also use Yager's entropy function) Huang
    L.-K. and Wang M.-J.J. (1995) "Image Thresholding by Minimizing the
    Measures of Fuzziness" Pattern Recognition, 28(1): 41-51
    Reimplemented (to handle 16-bit efficiently) by Johannes Schindelin
    Jan 31, 2011

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    C++ includes: itkHuangThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkHuangThresholdCalculatorHDF_Pointer"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkHuangThresholdCalculatorHDF self) -> itkHuangThresholdCalculatorHDF_Pointer"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDF_Clone(self)

    __swig_destroy__ = _itkHuangThresholdCalculatorPython.delete_itkHuangThresholdCalculatorHDF

    def cast(obj):
        """cast(itkLightObject obj) -> itkHuangThresholdCalculatorHDF"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDF_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkHuangThresholdCalculatorHDF self) -> itkHuangThresholdCalculatorHDF"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDF_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkHuangThresholdCalculatorHDF

        Create a new object of the class itkHuangThresholdCalculatorHDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHuangThresholdCalculatorHDF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHuangThresholdCalculatorHDF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHuangThresholdCalculatorHDF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHuangThresholdCalculatorHDF.Clone = new_instancemethod(_itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDF_Clone, None, itkHuangThresholdCalculatorHDF)
itkHuangThresholdCalculatorHDF.GetPointer = new_instancemethod(_itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDF_GetPointer, None, itkHuangThresholdCalculatorHDF)
itkHuangThresholdCalculatorHDF_swigregister = _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDF_swigregister
itkHuangThresholdCalculatorHDF_swigregister(itkHuangThresholdCalculatorHDF)

def itkHuangThresholdCalculatorHDF___New_orig__():
    """itkHuangThresholdCalculatorHDF___New_orig__() -> itkHuangThresholdCalculatorHDF_Pointer"""
    return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDF___New_orig__()

def itkHuangThresholdCalculatorHDF_cast(obj):
    """itkHuangThresholdCalculatorHDF_cast(itkLightObject obj) -> itkHuangThresholdCalculatorHDF"""
    return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDF_cast(obj)

class itkHuangThresholdCalculatorHDSS(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS):
    """


    Computes the Huang's threshold for an image.

    This calculator computes the Huang's fuzzy threshold which separates
    an image into foreground and background components. Uses Shannon's
    entropy function (one can also use Yager's entropy function) Huang
    L.-K. and Wang M.-J.J. (1995) "Image Thresholding by Minimizing the
    Measures of Fuzziness" Pattern Recognition, 28(1): 41-51
    Reimplemented (to handle 16-bit efficiently) by Johannes Schindelin
    Jan 31, 2011

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    C++ includes: itkHuangThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkHuangThresholdCalculatorHDSS_Pointer"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkHuangThresholdCalculatorHDSS self) -> itkHuangThresholdCalculatorHDSS_Pointer"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDSS_Clone(self)

    __swig_destroy__ = _itkHuangThresholdCalculatorPython.delete_itkHuangThresholdCalculatorHDSS

    def cast(obj):
        """cast(itkLightObject obj) -> itkHuangThresholdCalculatorHDSS"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDSS_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkHuangThresholdCalculatorHDSS self) -> itkHuangThresholdCalculatorHDSS"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDSS_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkHuangThresholdCalculatorHDSS

        Create a new object of the class itkHuangThresholdCalculatorHDSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHuangThresholdCalculatorHDSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHuangThresholdCalculatorHDSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHuangThresholdCalculatorHDSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHuangThresholdCalculatorHDSS.Clone = new_instancemethod(_itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDSS_Clone, None, itkHuangThresholdCalculatorHDSS)
itkHuangThresholdCalculatorHDSS.GetPointer = new_instancemethod(_itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDSS_GetPointer, None, itkHuangThresholdCalculatorHDSS)
itkHuangThresholdCalculatorHDSS_swigregister = _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDSS_swigregister
itkHuangThresholdCalculatorHDSS_swigregister(itkHuangThresholdCalculatorHDSS)

def itkHuangThresholdCalculatorHDSS___New_orig__():
    """itkHuangThresholdCalculatorHDSS___New_orig__() -> itkHuangThresholdCalculatorHDSS_Pointer"""
    return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDSS___New_orig__()

def itkHuangThresholdCalculatorHDSS_cast(obj):
    """itkHuangThresholdCalculatorHDSS_cast(itkLightObject obj) -> itkHuangThresholdCalculatorHDSS"""
    return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDSS_cast(obj)

class itkHuangThresholdCalculatorHDUC(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC):
    """


    Computes the Huang's threshold for an image.

    This calculator computes the Huang's fuzzy threshold which separates
    an image into foreground and background components. Uses Shannon's
    entropy function (one can also use Yager's entropy function) Huang
    L.-K. and Wang M.-J.J. (1995) "Image Thresholding by Minimizing the
    Measures of Fuzziness" Pattern Recognition, 28(1): 41-51
    Reimplemented (to handle 16-bit efficiently) by Johannes Schindelin
    Jan 31, 2011

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    C++ includes: itkHuangThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkHuangThresholdCalculatorHDUC_Pointer"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkHuangThresholdCalculatorHDUC self) -> itkHuangThresholdCalculatorHDUC_Pointer"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDUC_Clone(self)

    __swig_destroy__ = _itkHuangThresholdCalculatorPython.delete_itkHuangThresholdCalculatorHDUC

    def cast(obj):
        """cast(itkLightObject obj) -> itkHuangThresholdCalculatorHDUC"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDUC_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkHuangThresholdCalculatorHDUC self) -> itkHuangThresholdCalculatorHDUC"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDUC_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkHuangThresholdCalculatorHDUC

        Create a new object of the class itkHuangThresholdCalculatorHDUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHuangThresholdCalculatorHDUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHuangThresholdCalculatorHDUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHuangThresholdCalculatorHDUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHuangThresholdCalculatorHDUC.Clone = new_instancemethod(_itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDUC_Clone, None, itkHuangThresholdCalculatorHDUC)
itkHuangThresholdCalculatorHDUC.GetPointer = new_instancemethod(_itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDUC_GetPointer, None, itkHuangThresholdCalculatorHDUC)
itkHuangThresholdCalculatorHDUC_swigregister = _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDUC_swigregister
itkHuangThresholdCalculatorHDUC_swigregister(itkHuangThresholdCalculatorHDUC)

def itkHuangThresholdCalculatorHDUC___New_orig__():
    """itkHuangThresholdCalculatorHDUC___New_orig__() -> itkHuangThresholdCalculatorHDUC_Pointer"""
    return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDUC___New_orig__()

def itkHuangThresholdCalculatorHDUC_cast(obj):
    """itkHuangThresholdCalculatorHDUC_cast(itkLightObject obj) -> itkHuangThresholdCalculatorHDUC"""
    return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHDUC_cast(obj)

class itkHuangThresholdCalculatorHFF(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF):
    """


    Computes the Huang's threshold for an image.

    This calculator computes the Huang's fuzzy threshold which separates
    an image into foreground and background components. Uses Shannon's
    entropy function (one can also use Yager's entropy function) Huang
    L.-K. and Wang M.-J.J. (1995) "Image Thresholding by Minimizing the
    Measures of Fuzziness" Pattern Recognition, 28(1): 41-51
    Reimplemented (to handle 16-bit efficiently) by Johannes Schindelin
    Jan 31, 2011

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    C++ includes: itkHuangThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkHuangThresholdCalculatorHFF_Pointer"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkHuangThresholdCalculatorHFF self) -> itkHuangThresholdCalculatorHFF_Pointer"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFF_Clone(self)

    __swig_destroy__ = _itkHuangThresholdCalculatorPython.delete_itkHuangThresholdCalculatorHFF

    def cast(obj):
        """cast(itkLightObject obj) -> itkHuangThresholdCalculatorHFF"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFF_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkHuangThresholdCalculatorHFF self) -> itkHuangThresholdCalculatorHFF"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFF_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkHuangThresholdCalculatorHFF

        Create a new object of the class itkHuangThresholdCalculatorHFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHuangThresholdCalculatorHFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHuangThresholdCalculatorHFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHuangThresholdCalculatorHFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHuangThresholdCalculatorHFF.Clone = new_instancemethod(_itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFF_Clone, None, itkHuangThresholdCalculatorHFF)
itkHuangThresholdCalculatorHFF.GetPointer = new_instancemethod(_itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFF_GetPointer, None, itkHuangThresholdCalculatorHFF)
itkHuangThresholdCalculatorHFF_swigregister = _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFF_swigregister
itkHuangThresholdCalculatorHFF_swigregister(itkHuangThresholdCalculatorHFF)

def itkHuangThresholdCalculatorHFF___New_orig__():
    """itkHuangThresholdCalculatorHFF___New_orig__() -> itkHuangThresholdCalculatorHFF_Pointer"""
    return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFF___New_orig__()

def itkHuangThresholdCalculatorHFF_cast(obj):
    """itkHuangThresholdCalculatorHFF_cast(itkLightObject obj) -> itkHuangThresholdCalculatorHFF"""
    return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFF_cast(obj)

class itkHuangThresholdCalculatorHFSS(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS):
    """


    Computes the Huang's threshold for an image.

    This calculator computes the Huang's fuzzy threshold which separates
    an image into foreground and background components. Uses Shannon's
    entropy function (one can also use Yager's entropy function) Huang
    L.-K. and Wang M.-J.J. (1995) "Image Thresholding by Minimizing the
    Measures of Fuzziness" Pattern Recognition, 28(1): 41-51
    Reimplemented (to handle 16-bit efficiently) by Johannes Schindelin
    Jan 31, 2011

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    C++ includes: itkHuangThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkHuangThresholdCalculatorHFSS_Pointer"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkHuangThresholdCalculatorHFSS self) -> itkHuangThresholdCalculatorHFSS_Pointer"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFSS_Clone(self)

    __swig_destroy__ = _itkHuangThresholdCalculatorPython.delete_itkHuangThresholdCalculatorHFSS

    def cast(obj):
        """cast(itkLightObject obj) -> itkHuangThresholdCalculatorHFSS"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFSS_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkHuangThresholdCalculatorHFSS self) -> itkHuangThresholdCalculatorHFSS"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFSS_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkHuangThresholdCalculatorHFSS

        Create a new object of the class itkHuangThresholdCalculatorHFSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHuangThresholdCalculatorHFSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHuangThresholdCalculatorHFSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHuangThresholdCalculatorHFSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHuangThresholdCalculatorHFSS.Clone = new_instancemethod(_itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFSS_Clone, None, itkHuangThresholdCalculatorHFSS)
itkHuangThresholdCalculatorHFSS.GetPointer = new_instancemethod(_itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFSS_GetPointer, None, itkHuangThresholdCalculatorHFSS)
itkHuangThresholdCalculatorHFSS_swigregister = _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFSS_swigregister
itkHuangThresholdCalculatorHFSS_swigregister(itkHuangThresholdCalculatorHFSS)

def itkHuangThresholdCalculatorHFSS___New_orig__():
    """itkHuangThresholdCalculatorHFSS___New_orig__() -> itkHuangThresholdCalculatorHFSS_Pointer"""
    return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFSS___New_orig__()

def itkHuangThresholdCalculatorHFSS_cast(obj):
    """itkHuangThresholdCalculatorHFSS_cast(itkLightObject obj) -> itkHuangThresholdCalculatorHFSS"""
    return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFSS_cast(obj)

class itkHuangThresholdCalculatorHFUC(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC):
    """


    Computes the Huang's threshold for an image.

    This calculator computes the Huang's fuzzy threshold which separates
    an image into foreground and background components. Uses Shannon's
    entropy function (one can also use Yager's entropy function) Huang
    L.-K. and Wang M.-J.J. (1995) "Image Thresholding by Minimizing the
    Measures of Fuzziness" Pattern Recognition, 28(1): 41-51
    Reimplemented (to handle 16-bit efficiently) by Johannes Schindelin
    Jan 31, 2011

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    C++ includes: itkHuangThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkHuangThresholdCalculatorHFUC_Pointer"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkHuangThresholdCalculatorHFUC self) -> itkHuangThresholdCalculatorHFUC_Pointer"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFUC_Clone(self)

    __swig_destroy__ = _itkHuangThresholdCalculatorPython.delete_itkHuangThresholdCalculatorHFUC

    def cast(obj):
        """cast(itkLightObject obj) -> itkHuangThresholdCalculatorHFUC"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFUC_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkHuangThresholdCalculatorHFUC self) -> itkHuangThresholdCalculatorHFUC"""
        return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFUC_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkHuangThresholdCalculatorHFUC

        Create a new object of the class itkHuangThresholdCalculatorHFUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHuangThresholdCalculatorHFUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHuangThresholdCalculatorHFUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHuangThresholdCalculatorHFUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHuangThresholdCalculatorHFUC.Clone = new_instancemethod(_itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFUC_Clone, None, itkHuangThresholdCalculatorHFUC)
itkHuangThresholdCalculatorHFUC.GetPointer = new_instancemethod(_itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFUC_GetPointer, None, itkHuangThresholdCalculatorHFUC)
itkHuangThresholdCalculatorHFUC_swigregister = _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFUC_swigregister
itkHuangThresholdCalculatorHFUC_swigregister(itkHuangThresholdCalculatorHFUC)

def itkHuangThresholdCalculatorHFUC___New_orig__():
    """itkHuangThresholdCalculatorHFUC___New_orig__() -> itkHuangThresholdCalculatorHFUC_Pointer"""
    return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFUC___New_orig__()

def itkHuangThresholdCalculatorHFUC_cast(obj):
    """itkHuangThresholdCalculatorHFUC_cast(itkLightObject obj) -> itkHuangThresholdCalculatorHFUC"""
    return _itkHuangThresholdCalculatorPython.itkHuangThresholdCalculatorHFUC_cast(obj)



