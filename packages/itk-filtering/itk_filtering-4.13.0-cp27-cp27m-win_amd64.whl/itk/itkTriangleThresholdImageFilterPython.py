# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkTriangleThresholdImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkTriangleThresholdImageFilterPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkTriangleThresholdImageFilterPython')
    _itkTriangleThresholdImageFilterPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkTriangleThresholdImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkTriangleThresholdImageFilterPython
            return _itkTriangleThresholdImageFilterPython
        try:
            _mod = imp.load_module('_itkTriangleThresholdImageFilterPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkTriangleThresholdImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkTriangleThresholdImageFilterPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkHistogramThresholdImageFilterPython
import itkHistogramThresholdCalculatorPython
import itkSimpleDataObjectDecoratorPython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkArrayPython
import ITKCommonBasePython
import itkHistogramPython
import itkSamplePython
import itkImagePython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkTriangleThresholdImageFilterIF3IUC3_New():
  return itkTriangleThresholdImageFilterIF3IUC3.New()


def itkTriangleThresholdImageFilterIF2IUC2_New():
  return itkTriangleThresholdImageFilterIF2IUC2.New()


def itkTriangleThresholdImageFilterIF3ISS3_New():
  return itkTriangleThresholdImageFilterIF3ISS3.New()


def itkTriangleThresholdImageFilterIF2ISS2_New():
  return itkTriangleThresholdImageFilterIF2ISS2.New()


def itkTriangleThresholdImageFilterIUC3IUC3_New():
  return itkTriangleThresholdImageFilterIUC3IUC3.New()


def itkTriangleThresholdImageFilterIUC2IUC2_New():
  return itkTriangleThresholdImageFilterIUC2IUC2.New()


def itkTriangleThresholdImageFilterIUC3ISS3_New():
  return itkTriangleThresholdImageFilterIUC3ISS3.New()


def itkTriangleThresholdImageFilterIUC2ISS2_New():
  return itkTriangleThresholdImageFilterIUC2ISS2.New()


def itkTriangleThresholdImageFilterISS3IUC3_New():
  return itkTriangleThresholdImageFilterISS3IUC3.New()


def itkTriangleThresholdImageFilterISS2IUC2_New():
  return itkTriangleThresholdImageFilterISS2IUC2.New()


def itkTriangleThresholdImageFilterISS3ISS3_New():
  return itkTriangleThresholdImageFilterISS3ISS3.New()


def itkTriangleThresholdImageFilterISS2ISS2_New():
  return itkTriangleThresholdImageFilterISS2ISS2.New()

class itkTriangleThresholdImageFilterIF2ISS2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF2ISS2):
    """


    Threshold an image using the Triangle Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the TriangleThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkTriangleThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkTriangleThresholdImageFilterIF2ISS2_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkTriangleThresholdImageFilterIF2ISS2 self) -> itkTriangleThresholdImageFilterIF2ISS2_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2ISS2_Clone(self)

    __swig_destroy__ = _itkTriangleThresholdImageFilterPython.delete_itkTriangleThresholdImageFilterIF2ISS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIF2ISS2"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2ISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkTriangleThresholdImageFilterIF2ISS2 self) -> itkTriangleThresholdImageFilterIF2ISS2"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2ISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkTriangleThresholdImageFilterIF2ISS2

        Create a new object of the class itkTriangleThresholdImageFilterIF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleThresholdImageFilterIF2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleThresholdImageFilterIF2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleThresholdImageFilterIF2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleThresholdImageFilterIF2ISS2.Clone = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2ISS2_Clone, None, itkTriangleThresholdImageFilterIF2ISS2)
itkTriangleThresholdImageFilterIF2ISS2.GetPointer = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2ISS2_GetPointer, None, itkTriangleThresholdImageFilterIF2ISS2)
itkTriangleThresholdImageFilterIF2ISS2_swigregister = _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2ISS2_swigregister
itkTriangleThresholdImageFilterIF2ISS2_swigregister(itkTriangleThresholdImageFilterIF2ISS2)

def itkTriangleThresholdImageFilterIF2ISS2___New_orig__():
    """itkTriangleThresholdImageFilterIF2ISS2___New_orig__() -> itkTriangleThresholdImageFilterIF2ISS2_Pointer"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2ISS2___New_orig__()

def itkTriangleThresholdImageFilterIF2ISS2_cast(obj):
    """itkTriangleThresholdImageFilterIF2ISS2_cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIF2ISS2"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2ISS2_cast(obj)

class itkTriangleThresholdImageFilterIF2IUC2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF2IUC2):
    """


    Threshold an image using the Triangle Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the TriangleThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkTriangleThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkTriangleThresholdImageFilterIF2IUC2_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkTriangleThresholdImageFilterIF2IUC2 self) -> itkTriangleThresholdImageFilterIF2IUC2_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2IUC2_Clone(self)

    __swig_destroy__ = _itkTriangleThresholdImageFilterPython.delete_itkTriangleThresholdImageFilterIF2IUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIF2IUC2"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2IUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkTriangleThresholdImageFilterIF2IUC2 self) -> itkTriangleThresholdImageFilterIF2IUC2"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2IUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkTriangleThresholdImageFilterIF2IUC2

        Create a new object of the class itkTriangleThresholdImageFilterIF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleThresholdImageFilterIF2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleThresholdImageFilterIF2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleThresholdImageFilterIF2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleThresholdImageFilterIF2IUC2.Clone = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2IUC2_Clone, None, itkTriangleThresholdImageFilterIF2IUC2)
itkTriangleThresholdImageFilterIF2IUC2.GetPointer = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2IUC2_GetPointer, None, itkTriangleThresholdImageFilterIF2IUC2)
itkTriangleThresholdImageFilterIF2IUC2_swigregister = _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2IUC2_swigregister
itkTriangleThresholdImageFilterIF2IUC2_swigregister(itkTriangleThresholdImageFilterIF2IUC2)

def itkTriangleThresholdImageFilterIF2IUC2___New_orig__():
    """itkTriangleThresholdImageFilterIF2IUC2___New_orig__() -> itkTriangleThresholdImageFilterIF2IUC2_Pointer"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2IUC2___New_orig__()

def itkTriangleThresholdImageFilterIF2IUC2_cast(obj):
    """itkTriangleThresholdImageFilterIF2IUC2_cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIF2IUC2"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF2IUC2_cast(obj)

class itkTriangleThresholdImageFilterIF3ISS3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF3ISS3):
    """


    Threshold an image using the Triangle Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the TriangleThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkTriangleThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkTriangleThresholdImageFilterIF3ISS3_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkTriangleThresholdImageFilterIF3ISS3 self) -> itkTriangleThresholdImageFilterIF3ISS3_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3ISS3_Clone(self)

    __swig_destroy__ = _itkTriangleThresholdImageFilterPython.delete_itkTriangleThresholdImageFilterIF3ISS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIF3ISS3"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3ISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkTriangleThresholdImageFilterIF3ISS3 self) -> itkTriangleThresholdImageFilterIF3ISS3"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3ISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkTriangleThresholdImageFilterIF3ISS3

        Create a new object of the class itkTriangleThresholdImageFilterIF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleThresholdImageFilterIF3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleThresholdImageFilterIF3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleThresholdImageFilterIF3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleThresholdImageFilterIF3ISS3.Clone = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3ISS3_Clone, None, itkTriangleThresholdImageFilterIF3ISS3)
itkTriangleThresholdImageFilterIF3ISS3.GetPointer = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3ISS3_GetPointer, None, itkTriangleThresholdImageFilterIF3ISS3)
itkTriangleThresholdImageFilterIF3ISS3_swigregister = _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3ISS3_swigregister
itkTriangleThresholdImageFilterIF3ISS3_swigregister(itkTriangleThresholdImageFilterIF3ISS3)

def itkTriangleThresholdImageFilterIF3ISS3___New_orig__():
    """itkTriangleThresholdImageFilterIF3ISS3___New_orig__() -> itkTriangleThresholdImageFilterIF3ISS3_Pointer"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3ISS3___New_orig__()

def itkTriangleThresholdImageFilterIF3ISS3_cast(obj):
    """itkTriangleThresholdImageFilterIF3ISS3_cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIF3ISS3"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3ISS3_cast(obj)

class itkTriangleThresholdImageFilterIF3IUC3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF3IUC3):
    """


    Threshold an image using the Triangle Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the TriangleThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkTriangleThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkTriangleThresholdImageFilterIF3IUC3_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkTriangleThresholdImageFilterIF3IUC3 self) -> itkTriangleThresholdImageFilterIF3IUC3_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3IUC3_Clone(self)

    __swig_destroy__ = _itkTriangleThresholdImageFilterPython.delete_itkTriangleThresholdImageFilterIF3IUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIF3IUC3"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3IUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkTriangleThresholdImageFilterIF3IUC3 self) -> itkTriangleThresholdImageFilterIF3IUC3"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3IUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkTriangleThresholdImageFilterIF3IUC3

        Create a new object of the class itkTriangleThresholdImageFilterIF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleThresholdImageFilterIF3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleThresholdImageFilterIF3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleThresholdImageFilterIF3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleThresholdImageFilterIF3IUC3.Clone = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3IUC3_Clone, None, itkTriangleThresholdImageFilterIF3IUC3)
itkTriangleThresholdImageFilterIF3IUC3.GetPointer = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3IUC3_GetPointer, None, itkTriangleThresholdImageFilterIF3IUC3)
itkTriangleThresholdImageFilterIF3IUC3_swigregister = _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3IUC3_swigregister
itkTriangleThresholdImageFilterIF3IUC3_swigregister(itkTriangleThresholdImageFilterIF3IUC3)

def itkTriangleThresholdImageFilterIF3IUC3___New_orig__():
    """itkTriangleThresholdImageFilterIF3IUC3___New_orig__() -> itkTriangleThresholdImageFilterIF3IUC3_Pointer"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3IUC3___New_orig__()

def itkTriangleThresholdImageFilterIF3IUC3_cast(obj):
    """itkTriangleThresholdImageFilterIF3IUC3_cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIF3IUC3"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIF3IUC3_cast(obj)

class itkTriangleThresholdImageFilterISS2ISS2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS2ISS2):
    """


    Threshold an image using the Triangle Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the TriangleThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkTriangleThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkTriangleThresholdImageFilterISS2ISS2_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkTriangleThresholdImageFilterISS2ISS2 self) -> itkTriangleThresholdImageFilterISS2ISS2_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2ISS2_Clone(self)

    __swig_destroy__ = _itkTriangleThresholdImageFilterPython.delete_itkTriangleThresholdImageFilterISS2ISS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkTriangleThresholdImageFilterISS2ISS2"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkTriangleThresholdImageFilterISS2ISS2 self) -> itkTriangleThresholdImageFilterISS2ISS2"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2ISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkTriangleThresholdImageFilterISS2ISS2

        Create a new object of the class itkTriangleThresholdImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleThresholdImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleThresholdImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleThresholdImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleThresholdImageFilterISS2ISS2.Clone = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2ISS2_Clone, None, itkTriangleThresholdImageFilterISS2ISS2)
itkTriangleThresholdImageFilterISS2ISS2.GetPointer = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2ISS2_GetPointer, None, itkTriangleThresholdImageFilterISS2ISS2)
itkTriangleThresholdImageFilterISS2ISS2_swigregister = _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2ISS2_swigregister
itkTriangleThresholdImageFilterISS2ISS2_swigregister(itkTriangleThresholdImageFilterISS2ISS2)

def itkTriangleThresholdImageFilterISS2ISS2___New_orig__():
    """itkTriangleThresholdImageFilterISS2ISS2___New_orig__() -> itkTriangleThresholdImageFilterISS2ISS2_Pointer"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2ISS2___New_orig__()

def itkTriangleThresholdImageFilterISS2ISS2_cast(obj):
    """itkTriangleThresholdImageFilterISS2ISS2_cast(itkLightObject obj) -> itkTriangleThresholdImageFilterISS2ISS2"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2ISS2_cast(obj)

class itkTriangleThresholdImageFilterISS2IUC2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS2IUC2):
    """


    Threshold an image using the Triangle Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the TriangleThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkTriangleThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkTriangleThresholdImageFilterISS2IUC2_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkTriangleThresholdImageFilterISS2IUC2 self) -> itkTriangleThresholdImageFilterISS2IUC2_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2IUC2_Clone(self)

    __swig_destroy__ = _itkTriangleThresholdImageFilterPython.delete_itkTriangleThresholdImageFilterISS2IUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkTriangleThresholdImageFilterISS2IUC2"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2IUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkTriangleThresholdImageFilterISS2IUC2 self) -> itkTriangleThresholdImageFilterISS2IUC2"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2IUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkTriangleThresholdImageFilterISS2IUC2

        Create a new object of the class itkTriangleThresholdImageFilterISS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleThresholdImageFilterISS2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleThresholdImageFilterISS2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleThresholdImageFilterISS2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleThresholdImageFilterISS2IUC2.Clone = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2IUC2_Clone, None, itkTriangleThresholdImageFilterISS2IUC2)
itkTriangleThresholdImageFilterISS2IUC2.GetPointer = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2IUC2_GetPointer, None, itkTriangleThresholdImageFilterISS2IUC2)
itkTriangleThresholdImageFilterISS2IUC2_swigregister = _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2IUC2_swigregister
itkTriangleThresholdImageFilterISS2IUC2_swigregister(itkTriangleThresholdImageFilterISS2IUC2)

def itkTriangleThresholdImageFilterISS2IUC2___New_orig__():
    """itkTriangleThresholdImageFilterISS2IUC2___New_orig__() -> itkTriangleThresholdImageFilterISS2IUC2_Pointer"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2IUC2___New_orig__()

def itkTriangleThresholdImageFilterISS2IUC2_cast(obj):
    """itkTriangleThresholdImageFilterISS2IUC2_cast(itkLightObject obj) -> itkTriangleThresholdImageFilterISS2IUC2"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS2IUC2_cast(obj)

class itkTriangleThresholdImageFilterISS3ISS3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS3ISS3):
    """


    Threshold an image using the Triangle Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the TriangleThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkTriangleThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkTriangleThresholdImageFilterISS3ISS3_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkTriangleThresholdImageFilterISS3ISS3 self) -> itkTriangleThresholdImageFilterISS3ISS3_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3ISS3_Clone(self)

    __swig_destroy__ = _itkTriangleThresholdImageFilterPython.delete_itkTriangleThresholdImageFilterISS3ISS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkTriangleThresholdImageFilterISS3ISS3"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkTriangleThresholdImageFilterISS3ISS3 self) -> itkTriangleThresholdImageFilterISS3ISS3"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3ISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkTriangleThresholdImageFilterISS3ISS3

        Create a new object of the class itkTriangleThresholdImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleThresholdImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleThresholdImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleThresholdImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleThresholdImageFilterISS3ISS3.Clone = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3ISS3_Clone, None, itkTriangleThresholdImageFilterISS3ISS3)
itkTriangleThresholdImageFilterISS3ISS3.GetPointer = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3ISS3_GetPointer, None, itkTriangleThresholdImageFilterISS3ISS3)
itkTriangleThresholdImageFilterISS3ISS3_swigregister = _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3ISS3_swigregister
itkTriangleThresholdImageFilterISS3ISS3_swigregister(itkTriangleThresholdImageFilterISS3ISS3)

def itkTriangleThresholdImageFilterISS3ISS3___New_orig__():
    """itkTriangleThresholdImageFilterISS3ISS3___New_orig__() -> itkTriangleThresholdImageFilterISS3ISS3_Pointer"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3ISS3___New_orig__()

def itkTriangleThresholdImageFilterISS3ISS3_cast(obj):
    """itkTriangleThresholdImageFilterISS3ISS3_cast(itkLightObject obj) -> itkTriangleThresholdImageFilterISS3ISS3"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3ISS3_cast(obj)

class itkTriangleThresholdImageFilterISS3IUC3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS3IUC3):
    """


    Threshold an image using the Triangle Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the TriangleThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkTriangleThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkTriangleThresholdImageFilterISS3IUC3_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkTriangleThresholdImageFilterISS3IUC3 self) -> itkTriangleThresholdImageFilterISS3IUC3_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3IUC3_Clone(self)

    __swig_destroy__ = _itkTriangleThresholdImageFilterPython.delete_itkTriangleThresholdImageFilterISS3IUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkTriangleThresholdImageFilterISS3IUC3"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3IUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkTriangleThresholdImageFilterISS3IUC3 self) -> itkTriangleThresholdImageFilterISS3IUC3"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3IUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkTriangleThresholdImageFilterISS3IUC3

        Create a new object of the class itkTriangleThresholdImageFilterISS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleThresholdImageFilterISS3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleThresholdImageFilterISS3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleThresholdImageFilterISS3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleThresholdImageFilterISS3IUC3.Clone = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3IUC3_Clone, None, itkTriangleThresholdImageFilterISS3IUC3)
itkTriangleThresholdImageFilterISS3IUC3.GetPointer = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3IUC3_GetPointer, None, itkTriangleThresholdImageFilterISS3IUC3)
itkTriangleThresholdImageFilterISS3IUC3_swigregister = _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3IUC3_swigregister
itkTriangleThresholdImageFilterISS3IUC3_swigregister(itkTriangleThresholdImageFilterISS3IUC3)

def itkTriangleThresholdImageFilterISS3IUC3___New_orig__():
    """itkTriangleThresholdImageFilterISS3IUC3___New_orig__() -> itkTriangleThresholdImageFilterISS3IUC3_Pointer"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3IUC3___New_orig__()

def itkTriangleThresholdImageFilterISS3IUC3_cast(obj):
    """itkTriangleThresholdImageFilterISS3IUC3_cast(itkLightObject obj) -> itkTriangleThresholdImageFilterISS3IUC3"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterISS3IUC3_cast(obj)

class itkTriangleThresholdImageFilterIUC2ISS2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC2ISS2):
    """


    Threshold an image using the Triangle Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the TriangleThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkTriangleThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkTriangleThresholdImageFilterIUC2ISS2_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkTriangleThresholdImageFilterIUC2ISS2 self) -> itkTriangleThresholdImageFilterIUC2ISS2_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2ISS2_Clone(self)

    __swig_destroy__ = _itkTriangleThresholdImageFilterPython.delete_itkTriangleThresholdImageFilterIUC2ISS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIUC2ISS2"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2ISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkTriangleThresholdImageFilterIUC2ISS2 self) -> itkTriangleThresholdImageFilterIUC2ISS2"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2ISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkTriangleThresholdImageFilterIUC2ISS2

        Create a new object of the class itkTriangleThresholdImageFilterIUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleThresholdImageFilterIUC2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleThresholdImageFilterIUC2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleThresholdImageFilterIUC2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleThresholdImageFilterIUC2ISS2.Clone = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2ISS2_Clone, None, itkTriangleThresholdImageFilterIUC2ISS2)
itkTriangleThresholdImageFilterIUC2ISS2.GetPointer = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2ISS2_GetPointer, None, itkTriangleThresholdImageFilterIUC2ISS2)
itkTriangleThresholdImageFilterIUC2ISS2_swigregister = _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2ISS2_swigregister
itkTriangleThresholdImageFilterIUC2ISS2_swigregister(itkTriangleThresholdImageFilterIUC2ISS2)

def itkTriangleThresholdImageFilterIUC2ISS2___New_orig__():
    """itkTriangleThresholdImageFilterIUC2ISS2___New_orig__() -> itkTriangleThresholdImageFilterIUC2ISS2_Pointer"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2ISS2___New_orig__()

def itkTriangleThresholdImageFilterIUC2ISS2_cast(obj):
    """itkTriangleThresholdImageFilterIUC2ISS2_cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIUC2ISS2"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2ISS2_cast(obj)

class itkTriangleThresholdImageFilterIUC2IUC2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC2IUC2):
    """


    Threshold an image using the Triangle Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the TriangleThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkTriangleThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkTriangleThresholdImageFilterIUC2IUC2_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkTriangleThresholdImageFilterIUC2IUC2 self) -> itkTriangleThresholdImageFilterIUC2IUC2_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2IUC2_Clone(self)

    __swig_destroy__ = _itkTriangleThresholdImageFilterPython.delete_itkTriangleThresholdImageFilterIUC2IUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIUC2IUC2"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkTriangleThresholdImageFilterIUC2IUC2 self) -> itkTriangleThresholdImageFilterIUC2IUC2"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2IUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkTriangleThresholdImageFilterIUC2IUC2

        Create a new object of the class itkTriangleThresholdImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleThresholdImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleThresholdImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleThresholdImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleThresholdImageFilterIUC2IUC2.Clone = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2IUC2_Clone, None, itkTriangleThresholdImageFilterIUC2IUC2)
itkTriangleThresholdImageFilterIUC2IUC2.GetPointer = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2IUC2_GetPointer, None, itkTriangleThresholdImageFilterIUC2IUC2)
itkTriangleThresholdImageFilterIUC2IUC2_swigregister = _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2IUC2_swigregister
itkTriangleThresholdImageFilterIUC2IUC2_swigregister(itkTriangleThresholdImageFilterIUC2IUC2)

def itkTriangleThresholdImageFilterIUC2IUC2___New_orig__():
    """itkTriangleThresholdImageFilterIUC2IUC2___New_orig__() -> itkTriangleThresholdImageFilterIUC2IUC2_Pointer"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2IUC2___New_orig__()

def itkTriangleThresholdImageFilterIUC2IUC2_cast(obj):
    """itkTriangleThresholdImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIUC2IUC2"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC2IUC2_cast(obj)

class itkTriangleThresholdImageFilterIUC3ISS3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC3ISS3):
    """


    Threshold an image using the Triangle Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the TriangleThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkTriangleThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkTriangleThresholdImageFilterIUC3ISS3_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkTriangleThresholdImageFilterIUC3ISS3 self) -> itkTriangleThresholdImageFilterIUC3ISS3_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3ISS3_Clone(self)

    __swig_destroy__ = _itkTriangleThresholdImageFilterPython.delete_itkTriangleThresholdImageFilterIUC3ISS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIUC3ISS3"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3ISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkTriangleThresholdImageFilterIUC3ISS3 self) -> itkTriangleThresholdImageFilterIUC3ISS3"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3ISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkTriangleThresholdImageFilterIUC3ISS3

        Create a new object of the class itkTriangleThresholdImageFilterIUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleThresholdImageFilterIUC3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleThresholdImageFilterIUC3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleThresholdImageFilterIUC3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleThresholdImageFilterIUC3ISS3.Clone = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3ISS3_Clone, None, itkTriangleThresholdImageFilterIUC3ISS3)
itkTriangleThresholdImageFilterIUC3ISS3.GetPointer = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3ISS3_GetPointer, None, itkTriangleThresholdImageFilterIUC3ISS3)
itkTriangleThresholdImageFilterIUC3ISS3_swigregister = _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3ISS3_swigregister
itkTriangleThresholdImageFilterIUC3ISS3_swigregister(itkTriangleThresholdImageFilterIUC3ISS3)

def itkTriangleThresholdImageFilterIUC3ISS3___New_orig__():
    """itkTriangleThresholdImageFilterIUC3ISS3___New_orig__() -> itkTriangleThresholdImageFilterIUC3ISS3_Pointer"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3ISS3___New_orig__()

def itkTriangleThresholdImageFilterIUC3ISS3_cast(obj):
    """itkTriangleThresholdImageFilterIUC3ISS3_cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIUC3ISS3"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3ISS3_cast(obj)

class itkTriangleThresholdImageFilterIUC3IUC3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC3IUC3):
    """


    Threshold an image using the Triangle Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the TriangleThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkTriangleThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkTriangleThresholdImageFilterIUC3IUC3_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkTriangleThresholdImageFilterIUC3IUC3 self) -> itkTriangleThresholdImageFilterIUC3IUC3_Pointer"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3IUC3_Clone(self)

    __swig_destroy__ = _itkTriangleThresholdImageFilterPython.delete_itkTriangleThresholdImageFilterIUC3IUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIUC3IUC3"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkTriangleThresholdImageFilterIUC3IUC3 self) -> itkTriangleThresholdImageFilterIUC3IUC3"""
        return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3IUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkTriangleThresholdImageFilterIUC3IUC3

        Create a new object of the class itkTriangleThresholdImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleThresholdImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleThresholdImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleThresholdImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleThresholdImageFilterIUC3IUC3.Clone = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3IUC3_Clone, None, itkTriangleThresholdImageFilterIUC3IUC3)
itkTriangleThresholdImageFilterIUC3IUC3.GetPointer = new_instancemethod(_itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3IUC3_GetPointer, None, itkTriangleThresholdImageFilterIUC3IUC3)
itkTriangleThresholdImageFilterIUC3IUC3_swigregister = _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3IUC3_swigregister
itkTriangleThresholdImageFilterIUC3IUC3_swigregister(itkTriangleThresholdImageFilterIUC3IUC3)

def itkTriangleThresholdImageFilterIUC3IUC3___New_orig__():
    """itkTriangleThresholdImageFilterIUC3IUC3___New_orig__() -> itkTriangleThresholdImageFilterIUC3IUC3_Pointer"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3IUC3___New_orig__()

def itkTriangleThresholdImageFilterIUC3IUC3_cast(obj):
    """itkTriangleThresholdImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkTriangleThresholdImageFilterIUC3IUC3"""
    return _itkTriangleThresholdImageFilterPython.itkTriangleThresholdImageFilterIUC3IUC3_cast(obj)



