# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkIntermodesThresholdImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkIntermodesThresholdImageFilterPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkIntermodesThresholdImageFilterPython')
    _itkIntermodesThresholdImageFilterPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkIntermodesThresholdImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkIntermodesThresholdImageFilterPython
            return _itkIntermodesThresholdImageFilterPython
        try:
            _mod = imp.load_module('_itkIntermodesThresholdImageFilterPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkIntermodesThresholdImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkIntermodesThresholdImageFilterPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkHistogramThresholdImageFilterPython
import itkHistogramThresholdCalculatorPython
import itkSimpleDataObjectDecoratorPython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkArrayPython
import itkHistogramPython
import itkSamplePython
import itkImagePython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkIntermodesThresholdImageFilterIF3IUC3_New():
  return itkIntermodesThresholdImageFilterIF3IUC3.New()


def itkIntermodesThresholdImageFilterIF2IUC2_New():
  return itkIntermodesThresholdImageFilterIF2IUC2.New()


def itkIntermodesThresholdImageFilterIF3ISS3_New():
  return itkIntermodesThresholdImageFilterIF3ISS3.New()


def itkIntermodesThresholdImageFilterIF2ISS2_New():
  return itkIntermodesThresholdImageFilterIF2ISS2.New()


def itkIntermodesThresholdImageFilterIUC3IUC3_New():
  return itkIntermodesThresholdImageFilterIUC3IUC3.New()


def itkIntermodesThresholdImageFilterIUC2IUC2_New():
  return itkIntermodesThresholdImageFilterIUC2IUC2.New()


def itkIntermodesThresholdImageFilterIUC3ISS3_New():
  return itkIntermodesThresholdImageFilterIUC3ISS3.New()


def itkIntermodesThresholdImageFilterIUC2ISS2_New():
  return itkIntermodesThresholdImageFilterIUC2ISS2.New()


def itkIntermodesThresholdImageFilterISS3IUC3_New():
  return itkIntermodesThresholdImageFilterISS3IUC3.New()


def itkIntermodesThresholdImageFilterISS2IUC2_New():
  return itkIntermodesThresholdImageFilterISS2IUC2.New()


def itkIntermodesThresholdImageFilterISS3ISS3_New():
  return itkIntermodesThresholdImageFilterISS3ISS3.New()


def itkIntermodesThresholdImageFilterISS2ISS2_New():
  return itkIntermodesThresholdImageFilterISS2ISS2.New()

class itkIntermodesThresholdImageFilterIF2ISS2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF2ISS2):
    """


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkIntermodesThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkIntermodesThresholdImageFilterIF2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkIntermodesThresholdImageFilterIF2ISS2 self) -> itkIntermodesThresholdImageFilterIF2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_Clone(self)


    def SetMaximumSmoothingIterations(self, maxSmoothingIterations):
        """SetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIF2ISS2 self, unsigned long long maxSmoothingIterations)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_SetMaximumSmoothingIterations(self, maxSmoothingIterations)


    def GetMaximumSmoothingIterations(self):
        """GetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIF2ISS2 self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, useIntermode):
        """
        SetUseInterMode(itkIntermodesThresholdImageFilterIF2ISS2 self, bool useIntermode)

        Select whether
        midpoint (intermode=true) or minimum between peaks is used. 
        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_SetUseInterMode(self, useIntermode)


    def GetUseInterMode(self):
        """GetUseInterMode(itkIntermodesThresholdImageFilterIF2ISS2 self) -> bool"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_GetUseInterMode(self)

    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF2ISS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIF2ISS2"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkIntermodesThresholdImageFilterIF2ISS2 self) -> itkIntermodesThresholdImageFilterIF2ISS2"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF2ISS2

        Create a new object of the class itkIntermodesThresholdImageFilterIF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdImageFilterIF2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdImageFilterIF2ISS2.Clone = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_Clone, None, itkIntermodesThresholdImageFilterIF2ISS2)
itkIntermodesThresholdImageFilterIF2ISS2.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_SetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIF2ISS2)
itkIntermodesThresholdImageFilterIF2ISS2.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_GetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIF2ISS2)
itkIntermodesThresholdImageFilterIF2ISS2.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_SetUseInterMode, None, itkIntermodesThresholdImageFilterIF2ISS2)
itkIntermodesThresholdImageFilterIF2ISS2.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_GetUseInterMode, None, itkIntermodesThresholdImageFilterIF2ISS2)
itkIntermodesThresholdImageFilterIF2ISS2.GetPointer = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_GetPointer, None, itkIntermodesThresholdImageFilterIF2ISS2)
itkIntermodesThresholdImageFilterIF2ISS2_swigregister = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_swigregister
itkIntermodesThresholdImageFilterIF2ISS2_swigregister(itkIntermodesThresholdImageFilterIF2ISS2)

def itkIntermodesThresholdImageFilterIF2ISS2___New_orig__():
    """itkIntermodesThresholdImageFilterIF2ISS2___New_orig__() -> itkIntermodesThresholdImageFilterIF2ISS2_Pointer"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2___New_orig__()

def itkIntermodesThresholdImageFilterIF2ISS2_cast(obj):
    """itkIntermodesThresholdImageFilterIF2ISS2_cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIF2ISS2"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2ISS2_cast(obj)

class itkIntermodesThresholdImageFilterIF2IUC2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF2IUC2):
    """


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkIntermodesThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkIntermodesThresholdImageFilterIF2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkIntermodesThresholdImageFilterIF2IUC2 self) -> itkIntermodesThresholdImageFilterIF2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_Clone(self)


    def SetMaximumSmoothingIterations(self, maxSmoothingIterations):
        """SetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIF2IUC2 self, unsigned long long maxSmoothingIterations)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_SetMaximumSmoothingIterations(self, maxSmoothingIterations)


    def GetMaximumSmoothingIterations(self):
        """GetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIF2IUC2 self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, useIntermode):
        """
        SetUseInterMode(itkIntermodesThresholdImageFilterIF2IUC2 self, bool useIntermode)

        Select whether
        midpoint (intermode=true) or minimum between peaks is used. 
        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_SetUseInterMode(self, useIntermode)


    def GetUseInterMode(self):
        """GetUseInterMode(itkIntermodesThresholdImageFilterIF2IUC2 self) -> bool"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_GetUseInterMode(self)

    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF2IUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIF2IUC2"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkIntermodesThresholdImageFilterIF2IUC2 self) -> itkIntermodesThresholdImageFilterIF2IUC2"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF2IUC2

        Create a new object of the class itkIntermodesThresholdImageFilterIF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdImageFilterIF2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdImageFilterIF2IUC2.Clone = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_Clone, None, itkIntermodesThresholdImageFilterIF2IUC2)
itkIntermodesThresholdImageFilterIF2IUC2.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_SetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIF2IUC2)
itkIntermodesThresholdImageFilterIF2IUC2.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_GetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIF2IUC2)
itkIntermodesThresholdImageFilterIF2IUC2.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_SetUseInterMode, None, itkIntermodesThresholdImageFilterIF2IUC2)
itkIntermodesThresholdImageFilterIF2IUC2.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_GetUseInterMode, None, itkIntermodesThresholdImageFilterIF2IUC2)
itkIntermodesThresholdImageFilterIF2IUC2.GetPointer = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_GetPointer, None, itkIntermodesThresholdImageFilterIF2IUC2)
itkIntermodesThresholdImageFilterIF2IUC2_swigregister = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_swigregister
itkIntermodesThresholdImageFilterIF2IUC2_swigregister(itkIntermodesThresholdImageFilterIF2IUC2)

def itkIntermodesThresholdImageFilterIF2IUC2___New_orig__():
    """itkIntermodesThresholdImageFilterIF2IUC2___New_orig__() -> itkIntermodesThresholdImageFilterIF2IUC2_Pointer"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2___New_orig__()

def itkIntermodesThresholdImageFilterIF2IUC2_cast(obj):
    """itkIntermodesThresholdImageFilterIF2IUC2_cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIF2IUC2"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF2IUC2_cast(obj)

class itkIntermodesThresholdImageFilterIF3ISS3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF3ISS3):
    """


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkIntermodesThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkIntermodesThresholdImageFilterIF3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkIntermodesThresholdImageFilterIF3ISS3 self) -> itkIntermodesThresholdImageFilterIF3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_Clone(self)


    def SetMaximumSmoothingIterations(self, maxSmoothingIterations):
        """SetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIF3ISS3 self, unsigned long long maxSmoothingIterations)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_SetMaximumSmoothingIterations(self, maxSmoothingIterations)


    def GetMaximumSmoothingIterations(self):
        """GetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIF3ISS3 self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, useIntermode):
        """
        SetUseInterMode(itkIntermodesThresholdImageFilterIF3ISS3 self, bool useIntermode)

        Select whether
        midpoint (intermode=true) or minimum between peaks is used. 
        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_SetUseInterMode(self, useIntermode)


    def GetUseInterMode(self):
        """GetUseInterMode(itkIntermodesThresholdImageFilterIF3ISS3 self) -> bool"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_GetUseInterMode(self)

    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF3ISS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIF3ISS3"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkIntermodesThresholdImageFilterIF3ISS3 self) -> itkIntermodesThresholdImageFilterIF3ISS3"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF3ISS3

        Create a new object of the class itkIntermodesThresholdImageFilterIF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdImageFilterIF3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdImageFilterIF3ISS3.Clone = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_Clone, None, itkIntermodesThresholdImageFilterIF3ISS3)
itkIntermodesThresholdImageFilterIF3ISS3.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_SetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIF3ISS3)
itkIntermodesThresholdImageFilterIF3ISS3.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_GetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIF3ISS3)
itkIntermodesThresholdImageFilterIF3ISS3.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_SetUseInterMode, None, itkIntermodesThresholdImageFilterIF3ISS3)
itkIntermodesThresholdImageFilterIF3ISS3.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_GetUseInterMode, None, itkIntermodesThresholdImageFilterIF3ISS3)
itkIntermodesThresholdImageFilterIF3ISS3.GetPointer = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_GetPointer, None, itkIntermodesThresholdImageFilterIF3ISS3)
itkIntermodesThresholdImageFilterIF3ISS3_swigregister = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_swigregister
itkIntermodesThresholdImageFilterIF3ISS3_swigregister(itkIntermodesThresholdImageFilterIF3ISS3)

def itkIntermodesThresholdImageFilterIF3ISS3___New_orig__():
    """itkIntermodesThresholdImageFilterIF3ISS3___New_orig__() -> itkIntermodesThresholdImageFilterIF3ISS3_Pointer"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3___New_orig__()

def itkIntermodesThresholdImageFilterIF3ISS3_cast(obj):
    """itkIntermodesThresholdImageFilterIF3ISS3_cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIF3ISS3"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3ISS3_cast(obj)

class itkIntermodesThresholdImageFilterIF3IUC3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF3IUC3):
    """


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkIntermodesThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkIntermodesThresholdImageFilterIF3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkIntermodesThresholdImageFilterIF3IUC3 self) -> itkIntermodesThresholdImageFilterIF3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_Clone(self)


    def SetMaximumSmoothingIterations(self, maxSmoothingIterations):
        """SetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIF3IUC3 self, unsigned long long maxSmoothingIterations)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_SetMaximumSmoothingIterations(self, maxSmoothingIterations)


    def GetMaximumSmoothingIterations(self):
        """GetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIF3IUC3 self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, useIntermode):
        """
        SetUseInterMode(itkIntermodesThresholdImageFilterIF3IUC3 self, bool useIntermode)

        Select whether
        midpoint (intermode=true) or minimum between peaks is used. 
        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_SetUseInterMode(self, useIntermode)


    def GetUseInterMode(self):
        """GetUseInterMode(itkIntermodesThresholdImageFilterIF3IUC3 self) -> bool"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_GetUseInterMode(self)

    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIF3IUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIF3IUC3"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkIntermodesThresholdImageFilterIF3IUC3 self) -> itkIntermodesThresholdImageFilterIF3IUC3"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIF3IUC3

        Create a new object of the class itkIntermodesThresholdImageFilterIF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIF3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIF3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdImageFilterIF3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdImageFilterIF3IUC3.Clone = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_Clone, None, itkIntermodesThresholdImageFilterIF3IUC3)
itkIntermodesThresholdImageFilterIF3IUC3.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_SetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIF3IUC3)
itkIntermodesThresholdImageFilterIF3IUC3.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_GetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIF3IUC3)
itkIntermodesThresholdImageFilterIF3IUC3.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_SetUseInterMode, None, itkIntermodesThresholdImageFilterIF3IUC3)
itkIntermodesThresholdImageFilterIF3IUC3.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_GetUseInterMode, None, itkIntermodesThresholdImageFilterIF3IUC3)
itkIntermodesThresholdImageFilterIF3IUC3.GetPointer = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_GetPointer, None, itkIntermodesThresholdImageFilterIF3IUC3)
itkIntermodesThresholdImageFilterIF3IUC3_swigregister = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_swigregister
itkIntermodesThresholdImageFilterIF3IUC3_swigregister(itkIntermodesThresholdImageFilterIF3IUC3)

def itkIntermodesThresholdImageFilterIF3IUC3___New_orig__():
    """itkIntermodesThresholdImageFilterIF3IUC3___New_orig__() -> itkIntermodesThresholdImageFilterIF3IUC3_Pointer"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3___New_orig__()

def itkIntermodesThresholdImageFilterIF3IUC3_cast(obj):
    """itkIntermodesThresholdImageFilterIF3IUC3_cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIF3IUC3"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIF3IUC3_cast(obj)

class itkIntermodesThresholdImageFilterISS2ISS2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS2ISS2):
    """


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkIntermodesThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkIntermodesThresholdImageFilterISS2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkIntermodesThresholdImageFilterISS2ISS2 self) -> itkIntermodesThresholdImageFilterISS2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_Clone(self)


    def SetMaximumSmoothingIterations(self, maxSmoothingIterations):
        """SetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterISS2ISS2 self, unsigned long long maxSmoothingIterations)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_SetMaximumSmoothingIterations(self, maxSmoothingIterations)


    def GetMaximumSmoothingIterations(self):
        """GetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterISS2ISS2 self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, useIntermode):
        """
        SetUseInterMode(itkIntermodesThresholdImageFilterISS2ISS2 self, bool useIntermode)

        Select whether
        midpoint (intermode=true) or minimum between peaks is used. 
        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_SetUseInterMode(self, useIntermode)


    def GetUseInterMode(self):
        """GetUseInterMode(itkIntermodesThresholdImageFilterISS2ISS2 self) -> bool"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_GetUseInterMode(self)

    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS2ISS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterISS2ISS2"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkIntermodesThresholdImageFilterISS2ISS2 self) -> itkIntermodesThresholdImageFilterISS2ISS2"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS2ISS2

        Create a new object of the class itkIntermodesThresholdImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdImageFilterISS2ISS2.Clone = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_Clone, None, itkIntermodesThresholdImageFilterISS2ISS2)
itkIntermodesThresholdImageFilterISS2ISS2.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_SetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterISS2ISS2)
itkIntermodesThresholdImageFilterISS2ISS2.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_GetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterISS2ISS2)
itkIntermodesThresholdImageFilterISS2ISS2.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_SetUseInterMode, None, itkIntermodesThresholdImageFilterISS2ISS2)
itkIntermodesThresholdImageFilterISS2ISS2.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_GetUseInterMode, None, itkIntermodesThresholdImageFilterISS2ISS2)
itkIntermodesThresholdImageFilterISS2ISS2.GetPointer = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_GetPointer, None, itkIntermodesThresholdImageFilterISS2ISS2)
itkIntermodesThresholdImageFilterISS2ISS2_swigregister = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_swigregister
itkIntermodesThresholdImageFilterISS2ISS2_swigregister(itkIntermodesThresholdImageFilterISS2ISS2)

def itkIntermodesThresholdImageFilterISS2ISS2___New_orig__():
    """itkIntermodesThresholdImageFilterISS2ISS2___New_orig__() -> itkIntermodesThresholdImageFilterISS2ISS2_Pointer"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2___New_orig__()

def itkIntermodesThresholdImageFilterISS2ISS2_cast(obj):
    """itkIntermodesThresholdImageFilterISS2ISS2_cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterISS2ISS2"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2ISS2_cast(obj)

class itkIntermodesThresholdImageFilterISS2IUC2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS2IUC2):
    """


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkIntermodesThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkIntermodesThresholdImageFilterISS2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkIntermodesThresholdImageFilterISS2IUC2 self) -> itkIntermodesThresholdImageFilterISS2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_Clone(self)


    def SetMaximumSmoothingIterations(self, maxSmoothingIterations):
        """SetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterISS2IUC2 self, unsigned long long maxSmoothingIterations)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_SetMaximumSmoothingIterations(self, maxSmoothingIterations)


    def GetMaximumSmoothingIterations(self):
        """GetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterISS2IUC2 self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, useIntermode):
        """
        SetUseInterMode(itkIntermodesThresholdImageFilterISS2IUC2 self, bool useIntermode)

        Select whether
        midpoint (intermode=true) or minimum between peaks is used. 
        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_SetUseInterMode(self, useIntermode)


    def GetUseInterMode(self):
        """GetUseInterMode(itkIntermodesThresholdImageFilterISS2IUC2 self) -> bool"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_GetUseInterMode(self)

    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS2IUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterISS2IUC2"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkIntermodesThresholdImageFilterISS2IUC2 self) -> itkIntermodesThresholdImageFilterISS2IUC2"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS2IUC2

        Create a new object of the class itkIntermodesThresholdImageFilterISS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdImageFilterISS2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdImageFilterISS2IUC2.Clone = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_Clone, None, itkIntermodesThresholdImageFilterISS2IUC2)
itkIntermodesThresholdImageFilterISS2IUC2.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_SetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterISS2IUC2)
itkIntermodesThresholdImageFilterISS2IUC2.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_GetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterISS2IUC2)
itkIntermodesThresholdImageFilterISS2IUC2.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_SetUseInterMode, None, itkIntermodesThresholdImageFilterISS2IUC2)
itkIntermodesThresholdImageFilterISS2IUC2.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_GetUseInterMode, None, itkIntermodesThresholdImageFilterISS2IUC2)
itkIntermodesThresholdImageFilterISS2IUC2.GetPointer = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_GetPointer, None, itkIntermodesThresholdImageFilterISS2IUC2)
itkIntermodesThresholdImageFilterISS2IUC2_swigregister = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_swigregister
itkIntermodesThresholdImageFilterISS2IUC2_swigregister(itkIntermodesThresholdImageFilterISS2IUC2)

def itkIntermodesThresholdImageFilterISS2IUC2___New_orig__():
    """itkIntermodesThresholdImageFilterISS2IUC2___New_orig__() -> itkIntermodesThresholdImageFilterISS2IUC2_Pointer"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2___New_orig__()

def itkIntermodesThresholdImageFilterISS2IUC2_cast(obj):
    """itkIntermodesThresholdImageFilterISS2IUC2_cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterISS2IUC2"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS2IUC2_cast(obj)

class itkIntermodesThresholdImageFilterISS3ISS3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS3ISS3):
    """


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkIntermodesThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkIntermodesThresholdImageFilterISS3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkIntermodesThresholdImageFilterISS3ISS3 self) -> itkIntermodesThresholdImageFilterISS3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_Clone(self)


    def SetMaximumSmoothingIterations(self, maxSmoothingIterations):
        """SetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterISS3ISS3 self, unsigned long long maxSmoothingIterations)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_SetMaximumSmoothingIterations(self, maxSmoothingIterations)


    def GetMaximumSmoothingIterations(self):
        """GetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterISS3ISS3 self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, useIntermode):
        """
        SetUseInterMode(itkIntermodesThresholdImageFilterISS3ISS3 self, bool useIntermode)

        Select whether
        midpoint (intermode=true) or minimum between peaks is used. 
        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_SetUseInterMode(self, useIntermode)


    def GetUseInterMode(self):
        """GetUseInterMode(itkIntermodesThresholdImageFilterISS3ISS3 self) -> bool"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_GetUseInterMode(self)

    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS3ISS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterISS3ISS3"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkIntermodesThresholdImageFilterISS3ISS3 self) -> itkIntermodesThresholdImageFilterISS3ISS3"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS3ISS3

        Create a new object of the class itkIntermodesThresholdImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdImageFilterISS3ISS3.Clone = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_Clone, None, itkIntermodesThresholdImageFilterISS3ISS3)
itkIntermodesThresholdImageFilterISS3ISS3.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_SetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterISS3ISS3)
itkIntermodesThresholdImageFilterISS3ISS3.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_GetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterISS3ISS3)
itkIntermodesThresholdImageFilterISS3ISS3.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_SetUseInterMode, None, itkIntermodesThresholdImageFilterISS3ISS3)
itkIntermodesThresholdImageFilterISS3ISS3.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_GetUseInterMode, None, itkIntermodesThresholdImageFilterISS3ISS3)
itkIntermodesThresholdImageFilterISS3ISS3.GetPointer = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_GetPointer, None, itkIntermodesThresholdImageFilterISS3ISS3)
itkIntermodesThresholdImageFilterISS3ISS3_swigregister = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_swigregister
itkIntermodesThresholdImageFilterISS3ISS3_swigregister(itkIntermodesThresholdImageFilterISS3ISS3)

def itkIntermodesThresholdImageFilterISS3ISS3___New_orig__():
    """itkIntermodesThresholdImageFilterISS3ISS3___New_orig__() -> itkIntermodesThresholdImageFilterISS3ISS3_Pointer"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3___New_orig__()

def itkIntermodesThresholdImageFilterISS3ISS3_cast(obj):
    """itkIntermodesThresholdImageFilterISS3ISS3_cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterISS3ISS3"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3ISS3_cast(obj)

class itkIntermodesThresholdImageFilterISS3IUC3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS3IUC3):
    """


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkIntermodesThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkIntermodesThresholdImageFilterISS3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkIntermodesThresholdImageFilterISS3IUC3 self) -> itkIntermodesThresholdImageFilterISS3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_Clone(self)


    def SetMaximumSmoothingIterations(self, maxSmoothingIterations):
        """SetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterISS3IUC3 self, unsigned long long maxSmoothingIterations)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_SetMaximumSmoothingIterations(self, maxSmoothingIterations)


    def GetMaximumSmoothingIterations(self):
        """GetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterISS3IUC3 self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, useIntermode):
        """
        SetUseInterMode(itkIntermodesThresholdImageFilterISS3IUC3 self, bool useIntermode)

        Select whether
        midpoint (intermode=true) or minimum between peaks is used. 
        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_SetUseInterMode(self, useIntermode)


    def GetUseInterMode(self):
        """GetUseInterMode(itkIntermodesThresholdImageFilterISS3IUC3 self) -> bool"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_GetUseInterMode(self)

    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterISS3IUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterISS3IUC3"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkIntermodesThresholdImageFilterISS3IUC3 self) -> itkIntermodesThresholdImageFilterISS3IUC3"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterISS3IUC3

        Create a new object of the class itkIntermodesThresholdImageFilterISS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterISS3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterISS3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdImageFilterISS3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdImageFilterISS3IUC3.Clone = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_Clone, None, itkIntermodesThresholdImageFilterISS3IUC3)
itkIntermodesThresholdImageFilterISS3IUC3.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_SetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterISS3IUC3)
itkIntermodesThresholdImageFilterISS3IUC3.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_GetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterISS3IUC3)
itkIntermodesThresholdImageFilterISS3IUC3.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_SetUseInterMode, None, itkIntermodesThresholdImageFilterISS3IUC3)
itkIntermodesThresholdImageFilterISS3IUC3.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_GetUseInterMode, None, itkIntermodesThresholdImageFilterISS3IUC3)
itkIntermodesThresholdImageFilterISS3IUC3.GetPointer = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_GetPointer, None, itkIntermodesThresholdImageFilterISS3IUC3)
itkIntermodesThresholdImageFilterISS3IUC3_swigregister = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_swigregister
itkIntermodesThresholdImageFilterISS3IUC3_swigregister(itkIntermodesThresholdImageFilterISS3IUC3)

def itkIntermodesThresholdImageFilterISS3IUC3___New_orig__():
    """itkIntermodesThresholdImageFilterISS3IUC3___New_orig__() -> itkIntermodesThresholdImageFilterISS3IUC3_Pointer"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3___New_orig__()

def itkIntermodesThresholdImageFilterISS3IUC3_cast(obj):
    """itkIntermodesThresholdImageFilterISS3IUC3_cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterISS3IUC3"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterISS3IUC3_cast(obj)

class itkIntermodesThresholdImageFilterIUC2ISS2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC2ISS2):
    """


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkIntermodesThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkIntermodesThresholdImageFilterIUC2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkIntermodesThresholdImageFilterIUC2ISS2 self) -> itkIntermodesThresholdImageFilterIUC2ISS2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_Clone(self)


    def SetMaximumSmoothingIterations(self, maxSmoothingIterations):
        """SetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIUC2ISS2 self, unsigned long long maxSmoothingIterations)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_SetMaximumSmoothingIterations(self, maxSmoothingIterations)


    def GetMaximumSmoothingIterations(self):
        """GetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIUC2ISS2 self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, useIntermode):
        """
        SetUseInterMode(itkIntermodesThresholdImageFilterIUC2ISS2 self, bool useIntermode)

        Select whether
        midpoint (intermode=true) or minimum between peaks is used. 
        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_SetUseInterMode(self, useIntermode)


    def GetUseInterMode(self):
        """GetUseInterMode(itkIntermodesThresholdImageFilterIUC2ISS2 self) -> bool"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_GetUseInterMode(self)

    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC2ISS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIUC2ISS2"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkIntermodesThresholdImageFilterIUC2ISS2 self) -> itkIntermodesThresholdImageFilterIUC2ISS2"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC2ISS2

        Create a new object of the class itkIntermodesThresholdImageFilterIUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdImageFilterIUC2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdImageFilterIUC2ISS2.Clone = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_Clone, None, itkIntermodesThresholdImageFilterIUC2ISS2)
itkIntermodesThresholdImageFilterIUC2ISS2.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_SetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIUC2ISS2)
itkIntermodesThresholdImageFilterIUC2ISS2.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_GetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIUC2ISS2)
itkIntermodesThresholdImageFilterIUC2ISS2.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_SetUseInterMode, None, itkIntermodesThresholdImageFilterIUC2ISS2)
itkIntermodesThresholdImageFilterIUC2ISS2.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_GetUseInterMode, None, itkIntermodesThresholdImageFilterIUC2ISS2)
itkIntermodesThresholdImageFilterIUC2ISS2.GetPointer = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_GetPointer, None, itkIntermodesThresholdImageFilterIUC2ISS2)
itkIntermodesThresholdImageFilterIUC2ISS2_swigregister = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_swigregister
itkIntermodesThresholdImageFilterIUC2ISS2_swigregister(itkIntermodesThresholdImageFilterIUC2ISS2)

def itkIntermodesThresholdImageFilterIUC2ISS2___New_orig__():
    """itkIntermodesThresholdImageFilterIUC2ISS2___New_orig__() -> itkIntermodesThresholdImageFilterIUC2ISS2_Pointer"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2___New_orig__()

def itkIntermodesThresholdImageFilterIUC2ISS2_cast(obj):
    """itkIntermodesThresholdImageFilterIUC2ISS2_cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIUC2ISS2"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2ISS2_cast(obj)

class itkIntermodesThresholdImageFilterIUC2IUC2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC2IUC2):
    """


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkIntermodesThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkIntermodesThresholdImageFilterIUC2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkIntermodesThresholdImageFilterIUC2IUC2 self) -> itkIntermodesThresholdImageFilterIUC2IUC2_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_Clone(self)


    def SetMaximumSmoothingIterations(self, maxSmoothingIterations):
        """SetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIUC2IUC2 self, unsigned long long maxSmoothingIterations)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_SetMaximumSmoothingIterations(self, maxSmoothingIterations)


    def GetMaximumSmoothingIterations(self):
        """GetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIUC2IUC2 self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, useIntermode):
        """
        SetUseInterMode(itkIntermodesThresholdImageFilterIUC2IUC2 self, bool useIntermode)

        Select whether
        midpoint (intermode=true) or minimum between peaks is used. 
        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_SetUseInterMode(self, useIntermode)


    def GetUseInterMode(self):
        """GetUseInterMode(itkIntermodesThresholdImageFilterIUC2IUC2 self) -> bool"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_GetUseInterMode(self)

    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC2IUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIUC2IUC2"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkIntermodesThresholdImageFilterIUC2IUC2 self) -> itkIntermodesThresholdImageFilterIUC2IUC2"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC2IUC2

        Create a new object of the class itkIntermodesThresholdImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdImageFilterIUC2IUC2.Clone = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_Clone, None, itkIntermodesThresholdImageFilterIUC2IUC2)
itkIntermodesThresholdImageFilterIUC2IUC2.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_SetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIUC2IUC2)
itkIntermodesThresholdImageFilterIUC2IUC2.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_GetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIUC2IUC2)
itkIntermodesThresholdImageFilterIUC2IUC2.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_SetUseInterMode, None, itkIntermodesThresholdImageFilterIUC2IUC2)
itkIntermodesThresholdImageFilterIUC2IUC2.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_GetUseInterMode, None, itkIntermodesThresholdImageFilterIUC2IUC2)
itkIntermodesThresholdImageFilterIUC2IUC2.GetPointer = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_GetPointer, None, itkIntermodesThresholdImageFilterIUC2IUC2)
itkIntermodesThresholdImageFilterIUC2IUC2_swigregister = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_swigregister
itkIntermodesThresholdImageFilterIUC2IUC2_swigregister(itkIntermodesThresholdImageFilterIUC2IUC2)

def itkIntermodesThresholdImageFilterIUC2IUC2___New_orig__():
    """itkIntermodesThresholdImageFilterIUC2IUC2___New_orig__() -> itkIntermodesThresholdImageFilterIUC2IUC2_Pointer"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2___New_orig__()

def itkIntermodesThresholdImageFilterIUC2IUC2_cast(obj):
    """itkIntermodesThresholdImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIUC2IUC2"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC2IUC2_cast(obj)

class itkIntermodesThresholdImageFilterIUC3ISS3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC3ISS3):
    """


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkIntermodesThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkIntermodesThresholdImageFilterIUC3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkIntermodesThresholdImageFilterIUC3ISS3 self) -> itkIntermodesThresholdImageFilterIUC3ISS3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_Clone(self)


    def SetMaximumSmoothingIterations(self, maxSmoothingIterations):
        """SetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIUC3ISS3 self, unsigned long long maxSmoothingIterations)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_SetMaximumSmoothingIterations(self, maxSmoothingIterations)


    def GetMaximumSmoothingIterations(self):
        """GetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIUC3ISS3 self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, useIntermode):
        """
        SetUseInterMode(itkIntermodesThresholdImageFilterIUC3ISS3 self, bool useIntermode)

        Select whether
        midpoint (intermode=true) or minimum between peaks is used. 
        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_SetUseInterMode(self, useIntermode)


    def GetUseInterMode(self):
        """GetUseInterMode(itkIntermodesThresholdImageFilterIUC3ISS3 self) -> bool"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_GetUseInterMode(self)

    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC3ISS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIUC3ISS3"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkIntermodesThresholdImageFilterIUC3ISS3 self) -> itkIntermodesThresholdImageFilterIUC3ISS3"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC3ISS3

        Create a new object of the class itkIntermodesThresholdImageFilterIUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdImageFilterIUC3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdImageFilterIUC3ISS3.Clone = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_Clone, None, itkIntermodesThresholdImageFilterIUC3ISS3)
itkIntermodesThresholdImageFilterIUC3ISS3.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_SetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIUC3ISS3)
itkIntermodesThresholdImageFilterIUC3ISS3.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_GetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIUC3ISS3)
itkIntermodesThresholdImageFilterIUC3ISS3.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_SetUseInterMode, None, itkIntermodesThresholdImageFilterIUC3ISS3)
itkIntermodesThresholdImageFilterIUC3ISS3.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_GetUseInterMode, None, itkIntermodesThresholdImageFilterIUC3ISS3)
itkIntermodesThresholdImageFilterIUC3ISS3.GetPointer = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_GetPointer, None, itkIntermodesThresholdImageFilterIUC3ISS3)
itkIntermodesThresholdImageFilterIUC3ISS3_swigregister = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_swigregister
itkIntermodesThresholdImageFilterIUC3ISS3_swigregister(itkIntermodesThresholdImageFilterIUC3ISS3)

def itkIntermodesThresholdImageFilterIUC3ISS3___New_orig__():
    """itkIntermodesThresholdImageFilterIUC3ISS3___New_orig__() -> itkIntermodesThresholdImageFilterIUC3ISS3_Pointer"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3___New_orig__()

def itkIntermodesThresholdImageFilterIUC3ISS3_cast(obj):
    """itkIntermodesThresholdImageFilterIUC3ISS3_cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIUC3ISS3"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3ISS3_cast(obj)

class itkIntermodesThresholdImageFilterIUC3IUC3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC3IUC3):
    """


    Threshold an image using the Intermodes Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the IntermodesThresholdCalculator and applies that
    threshold to the input image using the BinaryThresholdImageFilter.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279 orhttp://www
    .insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkIntermodesThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkIntermodesThresholdImageFilterIUC3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkIntermodesThresholdImageFilterIUC3IUC3 self) -> itkIntermodesThresholdImageFilterIUC3IUC3_Pointer"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_Clone(self)


    def SetMaximumSmoothingIterations(self, maxSmoothingIterations):
        """SetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIUC3IUC3 self, unsigned long long maxSmoothingIterations)"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_SetMaximumSmoothingIterations(self, maxSmoothingIterations)


    def GetMaximumSmoothingIterations(self):
        """GetMaximumSmoothingIterations(itkIntermodesThresholdImageFilterIUC3IUC3 self) -> unsigned long long"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_GetMaximumSmoothingIterations(self)


    def SetUseInterMode(self, useIntermode):
        """
        SetUseInterMode(itkIntermodesThresholdImageFilterIUC3IUC3 self, bool useIntermode)

        Select whether
        midpoint (intermode=true) or minimum between peaks is used. 
        """
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_SetUseInterMode(self, useIntermode)


    def GetUseInterMode(self):
        """GetUseInterMode(itkIntermodesThresholdImageFilterIUC3IUC3 self) -> bool"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_GetUseInterMode(self)

    __swig_destroy__ = _itkIntermodesThresholdImageFilterPython.delete_itkIntermodesThresholdImageFilterIUC3IUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIUC3IUC3"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkIntermodesThresholdImageFilterIUC3IUC3 self) -> itkIntermodesThresholdImageFilterIUC3IUC3"""
        return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkIntermodesThresholdImageFilterIUC3IUC3

        Create a new object of the class itkIntermodesThresholdImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIntermodesThresholdImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIntermodesThresholdImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIntermodesThresholdImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIntermodesThresholdImageFilterIUC3IUC3.Clone = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_Clone, None, itkIntermodesThresholdImageFilterIUC3IUC3)
itkIntermodesThresholdImageFilterIUC3IUC3.SetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_SetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIUC3IUC3)
itkIntermodesThresholdImageFilterIUC3IUC3.GetMaximumSmoothingIterations = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_GetMaximumSmoothingIterations, None, itkIntermodesThresholdImageFilterIUC3IUC3)
itkIntermodesThresholdImageFilterIUC3IUC3.SetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_SetUseInterMode, None, itkIntermodesThresholdImageFilterIUC3IUC3)
itkIntermodesThresholdImageFilterIUC3IUC3.GetUseInterMode = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_GetUseInterMode, None, itkIntermodesThresholdImageFilterIUC3IUC3)
itkIntermodesThresholdImageFilterIUC3IUC3.GetPointer = new_instancemethod(_itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_GetPointer, None, itkIntermodesThresholdImageFilterIUC3IUC3)
itkIntermodesThresholdImageFilterIUC3IUC3_swigregister = _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_swigregister
itkIntermodesThresholdImageFilterIUC3IUC3_swigregister(itkIntermodesThresholdImageFilterIUC3IUC3)

def itkIntermodesThresholdImageFilterIUC3IUC3___New_orig__():
    """itkIntermodesThresholdImageFilterIUC3IUC3___New_orig__() -> itkIntermodesThresholdImageFilterIUC3IUC3_Pointer"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3___New_orig__()

def itkIntermodesThresholdImageFilterIUC3IUC3_cast(obj):
    """itkIntermodesThresholdImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkIntermodesThresholdImageFilterIUC3IUC3"""
    return _itkIntermodesThresholdImageFilterPython.itkIntermodesThresholdImageFilterIUC3IUC3_cast(obj)



