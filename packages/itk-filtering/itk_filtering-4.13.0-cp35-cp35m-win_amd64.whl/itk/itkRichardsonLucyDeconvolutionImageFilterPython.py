# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkRichardsonLucyDeconvolutionImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkRichardsonLucyDeconvolutionImageFilterPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkRichardsonLucyDeconvolutionImageFilterPython')
    _itkRichardsonLucyDeconvolutionImageFilterPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkRichardsonLucyDeconvolutionImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkRichardsonLucyDeconvolutionImageFilterPython
            return _itkRichardsonLucyDeconvolutionImageFilterPython
        try:
            _mod = imp.load_module('_itkRichardsonLucyDeconvolutionImageFilterPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkRichardsonLucyDeconvolutionImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkRichardsonLucyDeconvolutionImageFilterPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkIterativeDeconvolutionImageFilterPython
import itkFFTConvolutionImageFilterPython
import itkSizePython
import itkImagePython
import itkOffsetPython
import itkRGBPixelPython
import itkFixedArrayPython
import itkRGBAPixelPython
import itkIndexPython
import itkPointPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkVectorPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageRegionPython
import itkConvolutionImageFilterBasePython
import itkImageBoundaryConditionPython
import itkImageToImageFilterAPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython

def itkRichardsonLucyDeconvolutionImageFilterIF3IF3_New():
  return itkRichardsonLucyDeconvolutionImageFilterIF3IF3.New()


def itkRichardsonLucyDeconvolutionImageFilterIF2IF2_New():
  return itkRichardsonLucyDeconvolutionImageFilterIF2IF2.New()


def itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_New():
  return itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3.New()


def itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_New():
  return itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2.New()


def itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_New():
  return itkRichardsonLucyDeconvolutionImageFilterISS3ISS3.New()


def itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_New():
  return itkRichardsonLucyDeconvolutionImageFilterISS2ISS2.New()

class itkRichardsonLucyDeconvolutionImageFilterIF2IF2(itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF2IF2):
    """


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter

    C++ includes: itkRichardsonLucyDeconvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRichardsonLucyDeconvolutionImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkRichardsonLucyDeconvolutionImageFilterIF2IF2_Pointer"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRichardsonLucyDeconvolutionImageFilterIF2IF2_Pointer":
        """Clone(itkRichardsonLucyDeconvolutionImageFilterIF2IF2 self) -> itkRichardsonLucyDeconvolutionImageFilterIF2IF2_Pointer"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF2IF2_Clone(self)

    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkRichardsonLucyDeconvolutionImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkRichardsonLucyDeconvolutionImageFilterIF2IF2"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkRichardsonLucyDeconvolutionImageFilterIF2IF2 *":
        """GetPointer(itkRichardsonLucyDeconvolutionImageFilterIF2IF2 self) -> itkRichardsonLucyDeconvolutionImageFilterIF2IF2"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF2IF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterIF2IF2

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRichardsonLucyDeconvolutionImageFilterIF2IF2.Clone = new_instancemethod(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF2IF2_Clone, None, itkRichardsonLucyDeconvolutionImageFilterIF2IF2)
itkRichardsonLucyDeconvolutionImageFilterIF2IF2.GetPointer = new_instancemethod(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF2IF2_GetPointer, None, itkRichardsonLucyDeconvolutionImageFilterIF2IF2)
itkRichardsonLucyDeconvolutionImageFilterIF2IF2_swigregister = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF2IF2_swigregister
itkRichardsonLucyDeconvolutionImageFilterIF2IF2_swigregister(itkRichardsonLucyDeconvolutionImageFilterIF2IF2)

def itkRichardsonLucyDeconvolutionImageFilterIF2IF2___New_orig__() -> "itkRichardsonLucyDeconvolutionImageFilterIF2IF2_Pointer":
    """itkRichardsonLucyDeconvolutionImageFilterIF2IF2___New_orig__() -> itkRichardsonLucyDeconvolutionImageFilterIF2IF2_Pointer"""
    return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF2IF2___New_orig__()

def itkRichardsonLucyDeconvolutionImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkRichardsonLucyDeconvolutionImageFilterIF2IF2 *":
    """itkRichardsonLucyDeconvolutionImageFilterIF2IF2_cast(itkLightObject obj) -> itkRichardsonLucyDeconvolutionImageFilterIF2IF2"""
    return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF2IF2_cast(obj)

class itkRichardsonLucyDeconvolutionImageFilterIF3IF3(itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF3IF3):
    """


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter

    C++ includes: itkRichardsonLucyDeconvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRichardsonLucyDeconvolutionImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkRichardsonLucyDeconvolutionImageFilterIF3IF3_Pointer"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRichardsonLucyDeconvolutionImageFilterIF3IF3_Pointer":
        """Clone(itkRichardsonLucyDeconvolutionImageFilterIF3IF3 self) -> itkRichardsonLucyDeconvolutionImageFilterIF3IF3_Pointer"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF3IF3_Clone(self)

    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkRichardsonLucyDeconvolutionImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkRichardsonLucyDeconvolutionImageFilterIF3IF3"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkRichardsonLucyDeconvolutionImageFilterIF3IF3 *":
        """GetPointer(itkRichardsonLucyDeconvolutionImageFilterIF3IF3 self) -> itkRichardsonLucyDeconvolutionImageFilterIF3IF3"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF3IF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterIF3IF3

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRichardsonLucyDeconvolutionImageFilterIF3IF3.Clone = new_instancemethod(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF3IF3_Clone, None, itkRichardsonLucyDeconvolutionImageFilterIF3IF3)
itkRichardsonLucyDeconvolutionImageFilterIF3IF3.GetPointer = new_instancemethod(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF3IF3_GetPointer, None, itkRichardsonLucyDeconvolutionImageFilterIF3IF3)
itkRichardsonLucyDeconvolutionImageFilterIF3IF3_swigregister = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF3IF3_swigregister
itkRichardsonLucyDeconvolutionImageFilterIF3IF3_swigregister(itkRichardsonLucyDeconvolutionImageFilterIF3IF3)

def itkRichardsonLucyDeconvolutionImageFilterIF3IF3___New_orig__() -> "itkRichardsonLucyDeconvolutionImageFilterIF3IF3_Pointer":
    """itkRichardsonLucyDeconvolutionImageFilterIF3IF3___New_orig__() -> itkRichardsonLucyDeconvolutionImageFilterIF3IF3_Pointer"""
    return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF3IF3___New_orig__()

def itkRichardsonLucyDeconvolutionImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkRichardsonLucyDeconvolutionImageFilterIF3IF3 *":
    """itkRichardsonLucyDeconvolutionImageFilterIF3IF3_cast(itkLightObject obj) -> itkRichardsonLucyDeconvolutionImageFilterIF3IF3"""
    return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIF3IF3_cast(obj)

class itkRichardsonLucyDeconvolutionImageFilterISS2ISS2(itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS2ISS2):
    """


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter

    C++ includes: itkRichardsonLucyDeconvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_Pointer"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_Pointer":
        """Clone(itkRichardsonLucyDeconvolutionImageFilterISS2ISS2 self) -> itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_Pointer"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_Clone(self)

    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkRichardsonLucyDeconvolutionImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkRichardsonLucyDeconvolutionImageFilterISS2ISS2"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkRichardsonLucyDeconvolutionImageFilterISS2ISS2 *":
        """GetPointer(itkRichardsonLucyDeconvolutionImageFilterISS2ISS2 self) -> itkRichardsonLucyDeconvolutionImageFilterISS2ISS2"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterISS2ISS2

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRichardsonLucyDeconvolutionImageFilterISS2ISS2.Clone = new_instancemethod(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_Clone, None, itkRichardsonLucyDeconvolutionImageFilterISS2ISS2)
itkRichardsonLucyDeconvolutionImageFilterISS2ISS2.GetPointer = new_instancemethod(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_GetPointer, None, itkRichardsonLucyDeconvolutionImageFilterISS2ISS2)
itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_swigregister = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_swigregister
itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_swigregister(itkRichardsonLucyDeconvolutionImageFilterISS2ISS2)

def itkRichardsonLucyDeconvolutionImageFilterISS2ISS2___New_orig__() -> "itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_Pointer":
    """itkRichardsonLucyDeconvolutionImageFilterISS2ISS2___New_orig__() -> itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_Pointer"""
    return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS2ISS2___New_orig__()

def itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkRichardsonLucyDeconvolutionImageFilterISS2ISS2 *":
    """itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_cast(itkLightObject obj) -> itkRichardsonLucyDeconvolutionImageFilterISS2ISS2"""
    return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS2ISS2_cast(obj)

class itkRichardsonLucyDeconvolutionImageFilterISS3ISS3(itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS3ISS3):
    """


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter

    C++ includes: itkRichardsonLucyDeconvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_Pointer"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_Pointer":
        """Clone(itkRichardsonLucyDeconvolutionImageFilterISS3ISS3 self) -> itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_Pointer"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_Clone(self)

    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkRichardsonLucyDeconvolutionImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkRichardsonLucyDeconvolutionImageFilterISS3ISS3"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkRichardsonLucyDeconvolutionImageFilterISS3ISS3 *":
        """GetPointer(itkRichardsonLucyDeconvolutionImageFilterISS3ISS3 self) -> itkRichardsonLucyDeconvolutionImageFilterISS3ISS3"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterISS3ISS3

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRichardsonLucyDeconvolutionImageFilterISS3ISS3.Clone = new_instancemethod(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_Clone, None, itkRichardsonLucyDeconvolutionImageFilterISS3ISS3)
itkRichardsonLucyDeconvolutionImageFilterISS3ISS3.GetPointer = new_instancemethod(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_GetPointer, None, itkRichardsonLucyDeconvolutionImageFilterISS3ISS3)
itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_swigregister = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_swigregister
itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_swigregister(itkRichardsonLucyDeconvolutionImageFilterISS3ISS3)

def itkRichardsonLucyDeconvolutionImageFilterISS3ISS3___New_orig__() -> "itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_Pointer":
    """itkRichardsonLucyDeconvolutionImageFilterISS3ISS3___New_orig__() -> itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_Pointer"""
    return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS3ISS3___New_orig__()

def itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkRichardsonLucyDeconvolutionImageFilterISS3ISS3 *":
    """itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_cast(itkLightObject obj) -> itkRichardsonLucyDeconvolutionImageFilterISS3ISS3"""
    return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterISS3ISS3_cast(obj)

class itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2(itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC2IUC2):
    """


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter

    C++ includes: itkRichardsonLucyDeconvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_Pointer":
        """Clone(itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2 self) -> itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_Clone(self)

    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2 *":
        """GetPointer(itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2 self) -> itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2.Clone = new_instancemethod(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_Clone, None, itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2)
itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2.GetPointer = new_instancemethod(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_GetPointer, None, itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2)
itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_swigregister = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_swigregister
itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_swigregister(itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2)

def itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2___New_orig__() -> "itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_Pointer":
    """itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2___New_orig__() -> itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_Pointer"""
    return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2___New_orig__()

def itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2 *":
    """itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2"""
    return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC2IUC2_cast(obj)

class itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3(itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC3IUC3):
    """


    Deconvolve an image using the Richardson-Lucy deconvolution algorithm.

    This filter implements the Richardson-Lucy deconvolution algorithm as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Richardson-Lucy algorithm assumes that noise in the image follows
    a Poisson distribution and that the distribution for each pixel is
    independent of the other pixels.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   LandweberDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter

    C++ includes: itkRichardsonLucyDeconvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_Pointer":
        """Clone(itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3 self) -> itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_Clone(self)

    __swig_destroy__ = _itkRichardsonLucyDeconvolutionImageFilterPython.delete_itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3 *":
        """GetPointer(itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3 self) -> itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3"""
        return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3

        Create a new object of the class itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3.Clone = new_instancemethod(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_Clone, None, itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3)
itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3.GetPointer = new_instancemethod(_itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_GetPointer, None, itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3)
itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_swigregister = _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_swigregister
itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_swigregister(itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3)

def itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3___New_orig__() -> "itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_Pointer":
    """itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3___New_orig__() -> itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_Pointer"""
    return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3___New_orig__()

def itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3 *":
    """itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3"""
    return _itkRichardsonLucyDeconvolutionImageFilterPython.itkRichardsonLucyDeconvolutionImageFilterIUC3IUC3_cast(obj)



