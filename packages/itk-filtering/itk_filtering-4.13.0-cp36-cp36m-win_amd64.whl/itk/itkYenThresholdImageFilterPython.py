# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkYenThresholdImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkYenThresholdImageFilterPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkYenThresholdImageFilterPython')
    _itkYenThresholdImageFilterPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkYenThresholdImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkYenThresholdImageFilterPython
            return _itkYenThresholdImageFilterPython
        try:
            _mod = imp.load_module('_itkYenThresholdImageFilterPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkYenThresholdImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkYenThresholdImageFilterPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkHistogramThresholdImageFilterPython
import itkImagePython
import itkCovariantVectorPython
import itkFixedArrayPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkVectorPython
import itkSizePython
import itkPointPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkImageToImageFilterAPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkHistogramThresholdCalculatorPython
import itkHistogramPython
import itkArrayPython
import itkSamplePython
import itkSimpleDataObjectDecoratorPython

def itkYenThresholdImageFilterIF3IUC3_New():
  return itkYenThresholdImageFilterIF3IUC3.New()


def itkYenThresholdImageFilterIF2IUC2_New():
  return itkYenThresholdImageFilterIF2IUC2.New()


def itkYenThresholdImageFilterIF3ISS3_New():
  return itkYenThresholdImageFilterIF3ISS3.New()


def itkYenThresholdImageFilterIF2ISS2_New():
  return itkYenThresholdImageFilterIF2ISS2.New()


def itkYenThresholdImageFilterIUC3IUC3_New():
  return itkYenThresholdImageFilterIUC3IUC3.New()


def itkYenThresholdImageFilterIUC2IUC2_New():
  return itkYenThresholdImageFilterIUC2IUC2.New()


def itkYenThresholdImageFilterIUC3ISS3_New():
  return itkYenThresholdImageFilterIUC3ISS3.New()


def itkYenThresholdImageFilterIUC2ISS2_New():
  return itkYenThresholdImageFilterIUC2ISS2.New()


def itkYenThresholdImageFilterISS3IUC3_New():
  return itkYenThresholdImageFilterISS3IUC3.New()


def itkYenThresholdImageFilterISS2IUC2_New():
  return itkYenThresholdImageFilterISS2IUC2.New()


def itkYenThresholdImageFilterISS3ISS3_New():
  return itkYenThresholdImageFilterISS3ISS3.New()


def itkYenThresholdImageFilterISS2ISS2_New():
  return itkYenThresholdImageFilterISS2ISS2.New()

class itkYenThresholdImageFilterIF2ISS2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF2ISS2):
    """


    Threshold an image using the Yen Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the YenThresholdCalculator and applies that threshold
    to the input image using the BinaryThresholdImageFilter.

    Richard Beare

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkYenThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkYenThresholdImageFilterIF2ISS2_Pointer":
        """__New_orig__() -> itkYenThresholdImageFilterIF2ISS2_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkYenThresholdImageFilterIF2ISS2_Pointer":
        """Clone(itkYenThresholdImageFilterIF2ISS2 self) -> itkYenThresholdImageFilterIF2ISS2_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2ISS2_Clone(self)

    __swig_destroy__ = _itkYenThresholdImageFilterPython.delete_itkYenThresholdImageFilterIF2ISS2

    def cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIF2ISS2 *":
        """cast(itkLightObject obj) -> itkYenThresholdImageFilterIF2ISS2"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2ISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkYenThresholdImageFilterIF2ISS2 *":
        """GetPointer(itkYenThresholdImageFilterIF2ISS2 self) -> itkYenThresholdImageFilterIF2ISS2"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2ISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkYenThresholdImageFilterIF2ISS2

        Create a new object of the class itkYenThresholdImageFilterIF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdImageFilterIF2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkYenThresholdImageFilterIF2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkYenThresholdImageFilterIF2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkYenThresholdImageFilterIF2ISS2.Clone = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2ISS2_Clone, None, itkYenThresholdImageFilterIF2ISS2)
itkYenThresholdImageFilterIF2ISS2.GetPointer = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2ISS2_GetPointer, None, itkYenThresholdImageFilterIF2ISS2)
itkYenThresholdImageFilterIF2ISS2_swigregister = _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2ISS2_swigregister
itkYenThresholdImageFilterIF2ISS2_swigregister(itkYenThresholdImageFilterIF2ISS2)

def itkYenThresholdImageFilterIF2ISS2___New_orig__() -> "itkYenThresholdImageFilterIF2ISS2_Pointer":
    """itkYenThresholdImageFilterIF2ISS2___New_orig__() -> itkYenThresholdImageFilterIF2ISS2_Pointer"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2ISS2___New_orig__()

def itkYenThresholdImageFilterIF2ISS2_cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIF2ISS2 *":
    """itkYenThresholdImageFilterIF2ISS2_cast(itkLightObject obj) -> itkYenThresholdImageFilterIF2ISS2"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2ISS2_cast(obj)

class itkYenThresholdImageFilterIF2IUC2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF2IUC2):
    """


    Threshold an image using the Yen Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the YenThresholdCalculator and applies that threshold
    to the input image using the BinaryThresholdImageFilter.

    Richard Beare

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkYenThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkYenThresholdImageFilterIF2IUC2_Pointer":
        """__New_orig__() -> itkYenThresholdImageFilterIF2IUC2_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkYenThresholdImageFilterIF2IUC2_Pointer":
        """Clone(itkYenThresholdImageFilterIF2IUC2 self) -> itkYenThresholdImageFilterIF2IUC2_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2IUC2_Clone(self)

    __swig_destroy__ = _itkYenThresholdImageFilterPython.delete_itkYenThresholdImageFilterIF2IUC2

    def cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIF2IUC2 *":
        """cast(itkLightObject obj) -> itkYenThresholdImageFilterIF2IUC2"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2IUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkYenThresholdImageFilterIF2IUC2 *":
        """GetPointer(itkYenThresholdImageFilterIF2IUC2 self) -> itkYenThresholdImageFilterIF2IUC2"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2IUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkYenThresholdImageFilterIF2IUC2

        Create a new object of the class itkYenThresholdImageFilterIF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdImageFilterIF2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkYenThresholdImageFilterIF2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkYenThresholdImageFilterIF2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkYenThresholdImageFilterIF2IUC2.Clone = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2IUC2_Clone, None, itkYenThresholdImageFilterIF2IUC2)
itkYenThresholdImageFilterIF2IUC2.GetPointer = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2IUC2_GetPointer, None, itkYenThresholdImageFilterIF2IUC2)
itkYenThresholdImageFilterIF2IUC2_swigregister = _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2IUC2_swigregister
itkYenThresholdImageFilterIF2IUC2_swigregister(itkYenThresholdImageFilterIF2IUC2)

def itkYenThresholdImageFilterIF2IUC2___New_orig__() -> "itkYenThresholdImageFilterIF2IUC2_Pointer":
    """itkYenThresholdImageFilterIF2IUC2___New_orig__() -> itkYenThresholdImageFilterIF2IUC2_Pointer"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2IUC2___New_orig__()

def itkYenThresholdImageFilterIF2IUC2_cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIF2IUC2 *":
    """itkYenThresholdImageFilterIF2IUC2_cast(itkLightObject obj) -> itkYenThresholdImageFilterIF2IUC2"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF2IUC2_cast(obj)

class itkYenThresholdImageFilterIF3ISS3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF3ISS3):
    """


    Threshold an image using the Yen Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the YenThresholdCalculator and applies that threshold
    to the input image using the BinaryThresholdImageFilter.

    Richard Beare

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkYenThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkYenThresholdImageFilterIF3ISS3_Pointer":
        """__New_orig__() -> itkYenThresholdImageFilterIF3ISS3_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkYenThresholdImageFilterIF3ISS3_Pointer":
        """Clone(itkYenThresholdImageFilterIF3ISS3 self) -> itkYenThresholdImageFilterIF3ISS3_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3ISS3_Clone(self)

    __swig_destroy__ = _itkYenThresholdImageFilterPython.delete_itkYenThresholdImageFilterIF3ISS3

    def cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIF3ISS3 *":
        """cast(itkLightObject obj) -> itkYenThresholdImageFilterIF3ISS3"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3ISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkYenThresholdImageFilterIF3ISS3 *":
        """GetPointer(itkYenThresholdImageFilterIF3ISS3 self) -> itkYenThresholdImageFilterIF3ISS3"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3ISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkYenThresholdImageFilterIF3ISS3

        Create a new object of the class itkYenThresholdImageFilterIF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdImageFilterIF3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkYenThresholdImageFilterIF3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkYenThresholdImageFilterIF3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkYenThresholdImageFilterIF3ISS3.Clone = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3ISS3_Clone, None, itkYenThresholdImageFilterIF3ISS3)
itkYenThresholdImageFilterIF3ISS3.GetPointer = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3ISS3_GetPointer, None, itkYenThresholdImageFilterIF3ISS3)
itkYenThresholdImageFilterIF3ISS3_swigregister = _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3ISS3_swigregister
itkYenThresholdImageFilterIF3ISS3_swigregister(itkYenThresholdImageFilterIF3ISS3)

def itkYenThresholdImageFilterIF3ISS3___New_orig__() -> "itkYenThresholdImageFilterIF3ISS3_Pointer":
    """itkYenThresholdImageFilterIF3ISS3___New_orig__() -> itkYenThresholdImageFilterIF3ISS3_Pointer"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3ISS3___New_orig__()

def itkYenThresholdImageFilterIF3ISS3_cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIF3ISS3 *":
    """itkYenThresholdImageFilterIF3ISS3_cast(itkLightObject obj) -> itkYenThresholdImageFilterIF3ISS3"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3ISS3_cast(obj)

class itkYenThresholdImageFilterIF3IUC3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIF3IUC3):
    """


    Threshold an image using the Yen Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the YenThresholdCalculator and applies that threshold
    to the input image using the BinaryThresholdImageFilter.

    Richard Beare

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkYenThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkYenThresholdImageFilterIF3IUC3_Pointer":
        """__New_orig__() -> itkYenThresholdImageFilterIF3IUC3_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkYenThresholdImageFilterIF3IUC3_Pointer":
        """Clone(itkYenThresholdImageFilterIF3IUC3 self) -> itkYenThresholdImageFilterIF3IUC3_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3IUC3_Clone(self)

    __swig_destroy__ = _itkYenThresholdImageFilterPython.delete_itkYenThresholdImageFilterIF3IUC3

    def cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIF3IUC3 *":
        """cast(itkLightObject obj) -> itkYenThresholdImageFilterIF3IUC3"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3IUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkYenThresholdImageFilterIF3IUC3 *":
        """GetPointer(itkYenThresholdImageFilterIF3IUC3 self) -> itkYenThresholdImageFilterIF3IUC3"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3IUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkYenThresholdImageFilterIF3IUC3

        Create a new object of the class itkYenThresholdImageFilterIF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdImageFilterIF3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkYenThresholdImageFilterIF3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkYenThresholdImageFilterIF3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkYenThresholdImageFilterIF3IUC3.Clone = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3IUC3_Clone, None, itkYenThresholdImageFilterIF3IUC3)
itkYenThresholdImageFilterIF3IUC3.GetPointer = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3IUC3_GetPointer, None, itkYenThresholdImageFilterIF3IUC3)
itkYenThresholdImageFilterIF3IUC3_swigregister = _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3IUC3_swigregister
itkYenThresholdImageFilterIF3IUC3_swigregister(itkYenThresholdImageFilterIF3IUC3)

def itkYenThresholdImageFilterIF3IUC3___New_orig__() -> "itkYenThresholdImageFilterIF3IUC3_Pointer":
    """itkYenThresholdImageFilterIF3IUC3___New_orig__() -> itkYenThresholdImageFilterIF3IUC3_Pointer"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3IUC3___New_orig__()

def itkYenThresholdImageFilterIF3IUC3_cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIF3IUC3 *":
    """itkYenThresholdImageFilterIF3IUC3_cast(itkLightObject obj) -> itkYenThresholdImageFilterIF3IUC3"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIF3IUC3_cast(obj)

class itkYenThresholdImageFilterISS2ISS2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS2ISS2):
    """


    Threshold an image using the Yen Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the YenThresholdCalculator and applies that threshold
    to the input image using the BinaryThresholdImageFilter.

    Richard Beare

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkYenThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkYenThresholdImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkYenThresholdImageFilterISS2ISS2_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkYenThresholdImageFilterISS2ISS2_Pointer":
        """Clone(itkYenThresholdImageFilterISS2ISS2 self) -> itkYenThresholdImageFilterISS2ISS2_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2ISS2_Clone(self)

    __swig_destroy__ = _itkYenThresholdImageFilterPython.delete_itkYenThresholdImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkYenThresholdImageFilterISS2ISS2"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkYenThresholdImageFilterISS2ISS2 *":
        """GetPointer(itkYenThresholdImageFilterISS2ISS2 self) -> itkYenThresholdImageFilterISS2ISS2"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2ISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkYenThresholdImageFilterISS2ISS2

        Create a new object of the class itkYenThresholdImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkYenThresholdImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkYenThresholdImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkYenThresholdImageFilterISS2ISS2.Clone = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2ISS2_Clone, None, itkYenThresholdImageFilterISS2ISS2)
itkYenThresholdImageFilterISS2ISS2.GetPointer = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2ISS2_GetPointer, None, itkYenThresholdImageFilterISS2ISS2)
itkYenThresholdImageFilterISS2ISS2_swigregister = _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2ISS2_swigregister
itkYenThresholdImageFilterISS2ISS2_swigregister(itkYenThresholdImageFilterISS2ISS2)

def itkYenThresholdImageFilterISS2ISS2___New_orig__() -> "itkYenThresholdImageFilterISS2ISS2_Pointer":
    """itkYenThresholdImageFilterISS2ISS2___New_orig__() -> itkYenThresholdImageFilterISS2ISS2_Pointer"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2ISS2___New_orig__()

def itkYenThresholdImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterISS2ISS2 *":
    """itkYenThresholdImageFilterISS2ISS2_cast(itkLightObject obj) -> itkYenThresholdImageFilterISS2ISS2"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2ISS2_cast(obj)

class itkYenThresholdImageFilterISS2IUC2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS2IUC2):
    """


    Threshold an image using the Yen Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the YenThresholdCalculator and applies that threshold
    to the input image using the BinaryThresholdImageFilter.

    Richard Beare

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkYenThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkYenThresholdImageFilterISS2IUC2_Pointer":
        """__New_orig__() -> itkYenThresholdImageFilterISS2IUC2_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkYenThresholdImageFilterISS2IUC2_Pointer":
        """Clone(itkYenThresholdImageFilterISS2IUC2 self) -> itkYenThresholdImageFilterISS2IUC2_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2IUC2_Clone(self)

    __swig_destroy__ = _itkYenThresholdImageFilterPython.delete_itkYenThresholdImageFilterISS2IUC2

    def cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterISS2IUC2 *":
        """cast(itkLightObject obj) -> itkYenThresholdImageFilterISS2IUC2"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2IUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkYenThresholdImageFilterISS2IUC2 *":
        """GetPointer(itkYenThresholdImageFilterISS2IUC2 self) -> itkYenThresholdImageFilterISS2IUC2"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2IUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkYenThresholdImageFilterISS2IUC2

        Create a new object of the class itkYenThresholdImageFilterISS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdImageFilterISS2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkYenThresholdImageFilterISS2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkYenThresholdImageFilterISS2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkYenThresholdImageFilterISS2IUC2.Clone = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2IUC2_Clone, None, itkYenThresholdImageFilterISS2IUC2)
itkYenThresholdImageFilterISS2IUC2.GetPointer = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2IUC2_GetPointer, None, itkYenThresholdImageFilterISS2IUC2)
itkYenThresholdImageFilterISS2IUC2_swigregister = _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2IUC2_swigregister
itkYenThresholdImageFilterISS2IUC2_swigregister(itkYenThresholdImageFilterISS2IUC2)

def itkYenThresholdImageFilterISS2IUC2___New_orig__() -> "itkYenThresholdImageFilterISS2IUC2_Pointer":
    """itkYenThresholdImageFilterISS2IUC2___New_orig__() -> itkYenThresholdImageFilterISS2IUC2_Pointer"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2IUC2___New_orig__()

def itkYenThresholdImageFilterISS2IUC2_cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterISS2IUC2 *":
    """itkYenThresholdImageFilterISS2IUC2_cast(itkLightObject obj) -> itkYenThresholdImageFilterISS2IUC2"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS2IUC2_cast(obj)

class itkYenThresholdImageFilterISS3ISS3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS3ISS3):
    """


    Threshold an image using the Yen Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the YenThresholdCalculator and applies that threshold
    to the input image using the BinaryThresholdImageFilter.

    Richard Beare

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkYenThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkYenThresholdImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkYenThresholdImageFilterISS3ISS3_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkYenThresholdImageFilterISS3ISS3_Pointer":
        """Clone(itkYenThresholdImageFilterISS3ISS3 self) -> itkYenThresholdImageFilterISS3ISS3_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3ISS3_Clone(self)

    __swig_destroy__ = _itkYenThresholdImageFilterPython.delete_itkYenThresholdImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkYenThresholdImageFilterISS3ISS3"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkYenThresholdImageFilterISS3ISS3 *":
        """GetPointer(itkYenThresholdImageFilterISS3ISS3 self) -> itkYenThresholdImageFilterISS3ISS3"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3ISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkYenThresholdImageFilterISS3ISS3

        Create a new object of the class itkYenThresholdImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkYenThresholdImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkYenThresholdImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkYenThresholdImageFilterISS3ISS3.Clone = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3ISS3_Clone, None, itkYenThresholdImageFilterISS3ISS3)
itkYenThresholdImageFilterISS3ISS3.GetPointer = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3ISS3_GetPointer, None, itkYenThresholdImageFilterISS3ISS3)
itkYenThresholdImageFilterISS3ISS3_swigregister = _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3ISS3_swigregister
itkYenThresholdImageFilterISS3ISS3_swigregister(itkYenThresholdImageFilterISS3ISS3)

def itkYenThresholdImageFilterISS3ISS3___New_orig__() -> "itkYenThresholdImageFilterISS3ISS3_Pointer":
    """itkYenThresholdImageFilterISS3ISS3___New_orig__() -> itkYenThresholdImageFilterISS3ISS3_Pointer"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3ISS3___New_orig__()

def itkYenThresholdImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterISS3ISS3 *":
    """itkYenThresholdImageFilterISS3ISS3_cast(itkLightObject obj) -> itkYenThresholdImageFilterISS3ISS3"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3ISS3_cast(obj)

class itkYenThresholdImageFilterISS3IUC3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterISS3IUC3):
    """


    Threshold an image using the Yen Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the YenThresholdCalculator and applies that threshold
    to the input image using the BinaryThresholdImageFilter.

    Richard Beare

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkYenThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkYenThresholdImageFilterISS3IUC3_Pointer":
        """__New_orig__() -> itkYenThresholdImageFilterISS3IUC3_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkYenThresholdImageFilterISS3IUC3_Pointer":
        """Clone(itkYenThresholdImageFilterISS3IUC3 self) -> itkYenThresholdImageFilterISS3IUC3_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3IUC3_Clone(self)

    __swig_destroy__ = _itkYenThresholdImageFilterPython.delete_itkYenThresholdImageFilterISS3IUC3

    def cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterISS3IUC3 *":
        """cast(itkLightObject obj) -> itkYenThresholdImageFilterISS3IUC3"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3IUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkYenThresholdImageFilterISS3IUC3 *":
        """GetPointer(itkYenThresholdImageFilterISS3IUC3 self) -> itkYenThresholdImageFilterISS3IUC3"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3IUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkYenThresholdImageFilterISS3IUC3

        Create a new object of the class itkYenThresholdImageFilterISS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdImageFilterISS3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkYenThresholdImageFilterISS3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkYenThresholdImageFilterISS3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkYenThresholdImageFilterISS3IUC3.Clone = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3IUC3_Clone, None, itkYenThresholdImageFilterISS3IUC3)
itkYenThresholdImageFilterISS3IUC3.GetPointer = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3IUC3_GetPointer, None, itkYenThresholdImageFilterISS3IUC3)
itkYenThresholdImageFilterISS3IUC3_swigregister = _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3IUC3_swigregister
itkYenThresholdImageFilterISS3IUC3_swigregister(itkYenThresholdImageFilterISS3IUC3)

def itkYenThresholdImageFilterISS3IUC3___New_orig__() -> "itkYenThresholdImageFilterISS3IUC3_Pointer":
    """itkYenThresholdImageFilterISS3IUC3___New_orig__() -> itkYenThresholdImageFilterISS3IUC3_Pointer"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3IUC3___New_orig__()

def itkYenThresholdImageFilterISS3IUC3_cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterISS3IUC3 *":
    """itkYenThresholdImageFilterISS3IUC3_cast(itkLightObject obj) -> itkYenThresholdImageFilterISS3IUC3"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterISS3IUC3_cast(obj)

class itkYenThresholdImageFilterIUC2ISS2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC2ISS2):
    """


    Threshold an image using the Yen Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the YenThresholdCalculator and applies that threshold
    to the input image using the BinaryThresholdImageFilter.

    Richard Beare

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkYenThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkYenThresholdImageFilterIUC2ISS2_Pointer":
        """__New_orig__() -> itkYenThresholdImageFilterIUC2ISS2_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkYenThresholdImageFilterIUC2ISS2_Pointer":
        """Clone(itkYenThresholdImageFilterIUC2ISS2 self) -> itkYenThresholdImageFilterIUC2ISS2_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2ISS2_Clone(self)

    __swig_destroy__ = _itkYenThresholdImageFilterPython.delete_itkYenThresholdImageFilterIUC2ISS2

    def cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIUC2ISS2 *":
        """cast(itkLightObject obj) -> itkYenThresholdImageFilterIUC2ISS2"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2ISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkYenThresholdImageFilterIUC2ISS2 *":
        """GetPointer(itkYenThresholdImageFilterIUC2ISS2 self) -> itkYenThresholdImageFilterIUC2ISS2"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2ISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkYenThresholdImageFilterIUC2ISS2

        Create a new object of the class itkYenThresholdImageFilterIUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdImageFilterIUC2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkYenThresholdImageFilterIUC2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkYenThresholdImageFilterIUC2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkYenThresholdImageFilterIUC2ISS2.Clone = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2ISS2_Clone, None, itkYenThresholdImageFilterIUC2ISS2)
itkYenThresholdImageFilterIUC2ISS2.GetPointer = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2ISS2_GetPointer, None, itkYenThresholdImageFilterIUC2ISS2)
itkYenThresholdImageFilterIUC2ISS2_swigregister = _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2ISS2_swigregister
itkYenThresholdImageFilterIUC2ISS2_swigregister(itkYenThresholdImageFilterIUC2ISS2)

def itkYenThresholdImageFilterIUC2ISS2___New_orig__() -> "itkYenThresholdImageFilterIUC2ISS2_Pointer":
    """itkYenThresholdImageFilterIUC2ISS2___New_orig__() -> itkYenThresholdImageFilterIUC2ISS2_Pointer"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2ISS2___New_orig__()

def itkYenThresholdImageFilterIUC2ISS2_cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIUC2ISS2 *":
    """itkYenThresholdImageFilterIUC2ISS2_cast(itkLightObject obj) -> itkYenThresholdImageFilterIUC2ISS2"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2ISS2_cast(obj)

class itkYenThresholdImageFilterIUC2IUC2(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC2IUC2):
    """


    Threshold an image using the Yen Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the YenThresholdCalculator and applies that threshold
    to the input image using the BinaryThresholdImageFilter.

    Richard Beare

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkYenThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkYenThresholdImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkYenThresholdImageFilterIUC2IUC2_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkYenThresholdImageFilterIUC2IUC2_Pointer":
        """Clone(itkYenThresholdImageFilterIUC2IUC2 self) -> itkYenThresholdImageFilterIUC2IUC2_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2IUC2_Clone(self)

    __swig_destroy__ = _itkYenThresholdImageFilterPython.delete_itkYenThresholdImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkYenThresholdImageFilterIUC2IUC2"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkYenThresholdImageFilterIUC2IUC2 *":
        """GetPointer(itkYenThresholdImageFilterIUC2IUC2 self) -> itkYenThresholdImageFilterIUC2IUC2"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2IUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkYenThresholdImageFilterIUC2IUC2

        Create a new object of the class itkYenThresholdImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkYenThresholdImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkYenThresholdImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkYenThresholdImageFilterIUC2IUC2.Clone = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2IUC2_Clone, None, itkYenThresholdImageFilterIUC2IUC2)
itkYenThresholdImageFilterIUC2IUC2.GetPointer = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2IUC2_GetPointer, None, itkYenThresholdImageFilterIUC2IUC2)
itkYenThresholdImageFilterIUC2IUC2_swigregister = _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2IUC2_swigregister
itkYenThresholdImageFilterIUC2IUC2_swigregister(itkYenThresholdImageFilterIUC2IUC2)

def itkYenThresholdImageFilterIUC2IUC2___New_orig__() -> "itkYenThresholdImageFilterIUC2IUC2_Pointer":
    """itkYenThresholdImageFilterIUC2IUC2___New_orig__() -> itkYenThresholdImageFilterIUC2IUC2_Pointer"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2IUC2___New_orig__()

def itkYenThresholdImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIUC2IUC2 *":
    """itkYenThresholdImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkYenThresholdImageFilterIUC2IUC2"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC2IUC2_cast(obj)

class itkYenThresholdImageFilterIUC3ISS3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC3ISS3):
    """


    Threshold an image using the Yen Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the YenThresholdCalculator and applies that threshold
    to the input image using the BinaryThresholdImageFilter.

    Richard Beare

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkYenThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkYenThresholdImageFilterIUC3ISS3_Pointer":
        """__New_orig__() -> itkYenThresholdImageFilterIUC3ISS3_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkYenThresholdImageFilterIUC3ISS3_Pointer":
        """Clone(itkYenThresholdImageFilterIUC3ISS3 self) -> itkYenThresholdImageFilterIUC3ISS3_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3ISS3_Clone(self)

    __swig_destroy__ = _itkYenThresholdImageFilterPython.delete_itkYenThresholdImageFilterIUC3ISS3

    def cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIUC3ISS3 *":
        """cast(itkLightObject obj) -> itkYenThresholdImageFilterIUC3ISS3"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3ISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkYenThresholdImageFilterIUC3ISS3 *":
        """GetPointer(itkYenThresholdImageFilterIUC3ISS3 self) -> itkYenThresholdImageFilterIUC3ISS3"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3ISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkYenThresholdImageFilterIUC3ISS3

        Create a new object of the class itkYenThresholdImageFilterIUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdImageFilterIUC3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkYenThresholdImageFilterIUC3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkYenThresholdImageFilterIUC3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkYenThresholdImageFilterIUC3ISS3.Clone = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3ISS3_Clone, None, itkYenThresholdImageFilterIUC3ISS3)
itkYenThresholdImageFilterIUC3ISS3.GetPointer = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3ISS3_GetPointer, None, itkYenThresholdImageFilterIUC3ISS3)
itkYenThresholdImageFilterIUC3ISS3_swigregister = _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3ISS3_swigregister
itkYenThresholdImageFilterIUC3ISS3_swigregister(itkYenThresholdImageFilterIUC3ISS3)

def itkYenThresholdImageFilterIUC3ISS3___New_orig__() -> "itkYenThresholdImageFilterIUC3ISS3_Pointer":
    """itkYenThresholdImageFilterIUC3ISS3___New_orig__() -> itkYenThresholdImageFilterIUC3ISS3_Pointer"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3ISS3___New_orig__()

def itkYenThresholdImageFilterIUC3ISS3_cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIUC3ISS3 *":
    """itkYenThresholdImageFilterIUC3ISS3_cast(itkLightObject obj) -> itkYenThresholdImageFilterIUC3ISS3"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3ISS3_cast(obj)

class itkYenThresholdImageFilterIUC3IUC3(itkHistogramThresholdImageFilterPython.itkHistogramThresholdImageFilterIUC3IUC3):
    """


    Threshold an image using the Yen Threshold.

    This filter creates a binary thresholded image that separates an image
    into foreground and background components. The filter computes the
    threshold using the YenThresholdCalculator and applies that threshold
    to the input image using the BinaryThresholdImageFilter.

    Richard Beare

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    See:   HistogramThresholdImageFilter

    C++ includes: itkYenThresholdImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkYenThresholdImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkYenThresholdImageFilterIUC3IUC3_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkYenThresholdImageFilterIUC3IUC3_Pointer":
        """Clone(itkYenThresholdImageFilterIUC3IUC3 self) -> itkYenThresholdImageFilterIUC3IUC3_Pointer"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3IUC3_Clone(self)

    __swig_destroy__ = _itkYenThresholdImageFilterPython.delete_itkYenThresholdImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkYenThresholdImageFilterIUC3IUC3"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkYenThresholdImageFilterIUC3IUC3 *":
        """GetPointer(itkYenThresholdImageFilterIUC3IUC3 self) -> itkYenThresholdImageFilterIUC3IUC3"""
        return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3IUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkYenThresholdImageFilterIUC3IUC3

        Create a new object of the class itkYenThresholdImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkYenThresholdImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkYenThresholdImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkYenThresholdImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkYenThresholdImageFilterIUC3IUC3.Clone = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3IUC3_Clone, None, itkYenThresholdImageFilterIUC3IUC3)
itkYenThresholdImageFilterIUC3IUC3.GetPointer = new_instancemethod(_itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3IUC3_GetPointer, None, itkYenThresholdImageFilterIUC3IUC3)
itkYenThresholdImageFilterIUC3IUC3_swigregister = _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3IUC3_swigregister
itkYenThresholdImageFilterIUC3IUC3_swigregister(itkYenThresholdImageFilterIUC3IUC3)

def itkYenThresholdImageFilterIUC3IUC3___New_orig__() -> "itkYenThresholdImageFilterIUC3IUC3_Pointer":
    """itkYenThresholdImageFilterIUC3IUC3___New_orig__() -> itkYenThresholdImageFilterIUC3IUC3_Pointer"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3IUC3___New_orig__()

def itkYenThresholdImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkYenThresholdImageFilterIUC3IUC3 *":
    """itkYenThresholdImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkYenThresholdImageFilterIUC3IUC3"""
    return _itkYenThresholdImageFilterPython.itkYenThresholdImageFilterIUC3IUC3_cast(obj)



