# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkLandweberDeconvolutionImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkLandweberDeconvolutionImageFilterPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkLandweberDeconvolutionImageFilterPython')
    _itkLandweberDeconvolutionImageFilterPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkLandweberDeconvolutionImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkLandweberDeconvolutionImageFilterPython
            return _itkLandweberDeconvolutionImageFilterPython
        try:
            _mod = imp.load_module('_itkLandweberDeconvolutionImageFilterPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkLandweberDeconvolutionImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkLandweberDeconvolutionImageFilterPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkIterativeDeconvolutionImageFilterPython
import itkFFTConvolutionImageFilterPython
import itkConvolutionImageFilterBasePython
import itkImageToImageFilterAPython
import itkVectorImagePython
import stdcomplexPython
import itkVariableLengthVectorPython
import itkImagePython
import itkCovariantVectorPython
import itkFixedArrayPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkSizePython
import itkPointPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkImageBoundaryConditionPython

def itkLandweberDeconvolutionImageFilterIF3IF3_New():
  return itkLandweberDeconvolutionImageFilterIF3IF3.New()


def itkLandweberDeconvolutionImageFilterIF2IF2_New():
  return itkLandweberDeconvolutionImageFilterIF2IF2.New()


def itkLandweberDeconvolutionImageFilterIUC3IUC3_New():
  return itkLandweberDeconvolutionImageFilterIUC3IUC3.New()


def itkLandweberDeconvolutionImageFilterIUC2IUC2_New():
  return itkLandweberDeconvolutionImageFilterIUC2IUC2.New()


def itkLandweberDeconvolutionImageFilterISS3ISS3_New():
  return itkLandweberDeconvolutionImageFilterISS3ISS3.New()


def itkLandweberDeconvolutionImageFilterISS2ISS2_New():
  return itkLandweberDeconvolutionImageFilterISS2ISS2.New()

class itkLandweberDeconvolutionImageFilterIF2IF2(itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF2IF2):
    """


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthm as defined
    in Bertero M and Boccacci P, "Introduction to Inverse Problems in
    Imaging", 1998. The algorithm assumes that the input image has been
    formed by a linear shift-invariant system with a known kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter

    C++ includes: itkLandweberDeconvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLandweberDeconvolutionImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkLandweberDeconvolutionImageFilterIF2IF2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLandweberDeconvolutionImageFilterIF2IF2_Pointer":
        """Clone(itkLandweberDeconvolutionImageFilterIF2IF2 self) -> itkLandweberDeconvolutionImageFilterIF2IF2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_Clone(self)


    def SetAlpha(self, _arg: 'double const') -> "void":
        """
        SetAlpha(itkLandweberDeconvolutionImageFilterIF2IF2 self, double const _arg)

        Set/get relaxation factor.

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_SetAlpha(self, _arg)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkLandweberDeconvolutionImageFilterIF2IF2 self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_GetAlpha(self)

    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkLandweberDeconvolutionImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkLandweberDeconvolutionImageFilterIF2IF2"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkLandweberDeconvolutionImageFilterIF2IF2 *":
        """GetPointer(itkLandweberDeconvolutionImageFilterIF2IF2 self) -> itkLandweberDeconvolutionImageFilterIF2IF2"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIF2IF2

        Create a new object of the class itkLandweberDeconvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLandweberDeconvolutionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLandweberDeconvolutionImageFilterIF2IF2.Clone = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_Clone, None, itkLandweberDeconvolutionImageFilterIF2IF2)
itkLandweberDeconvolutionImageFilterIF2IF2.SetAlpha = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_SetAlpha, None, itkLandweberDeconvolutionImageFilterIF2IF2)
itkLandweberDeconvolutionImageFilterIF2IF2.GetAlpha = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_GetAlpha, None, itkLandweberDeconvolutionImageFilterIF2IF2)
itkLandweberDeconvolutionImageFilterIF2IF2.GetPointer = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_GetPointer, None, itkLandweberDeconvolutionImageFilterIF2IF2)
itkLandweberDeconvolutionImageFilterIF2IF2_swigregister = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_swigregister
itkLandweberDeconvolutionImageFilterIF2IF2_swigregister(itkLandweberDeconvolutionImageFilterIF2IF2)

def itkLandweberDeconvolutionImageFilterIF2IF2___New_orig__() -> "itkLandweberDeconvolutionImageFilterIF2IF2_Pointer":
    """itkLandweberDeconvolutionImageFilterIF2IF2___New_orig__() -> itkLandweberDeconvolutionImageFilterIF2IF2_Pointer"""
    return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2___New_orig__()

def itkLandweberDeconvolutionImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkLandweberDeconvolutionImageFilterIF2IF2 *":
    """itkLandweberDeconvolutionImageFilterIF2IF2_cast(itkLightObject obj) -> itkLandweberDeconvolutionImageFilterIF2IF2"""
    return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_cast(obj)

class itkLandweberDeconvolutionImageFilterIF3IF3(itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF3IF3):
    """


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthm as defined
    in Bertero M and Boccacci P, "Introduction to Inverse Problems in
    Imaging", 1998. The algorithm assumes that the input image has been
    formed by a linear shift-invariant system with a known kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter

    C++ includes: itkLandweberDeconvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLandweberDeconvolutionImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkLandweberDeconvolutionImageFilterIF3IF3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLandweberDeconvolutionImageFilterIF3IF3_Pointer":
        """Clone(itkLandweberDeconvolutionImageFilterIF3IF3 self) -> itkLandweberDeconvolutionImageFilterIF3IF3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_Clone(self)


    def SetAlpha(self, _arg: 'double const') -> "void":
        """
        SetAlpha(itkLandweberDeconvolutionImageFilterIF3IF3 self, double const _arg)

        Set/get relaxation factor.

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_SetAlpha(self, _arg)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkLandweberDeconvolutionImageFilterIF3IF3 self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_GetAlpha(self)

    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkLandweberDeconvolutionImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkLandweberDeconvolutionImageFilterIF3IF3"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkLandweberDeconvolutionImageFilterIF3IF3 *":
        """GetPointer(itkLandweberDeconvolutionImageFilterIF3IF3 self) -> itkLandweberDeconvolutionImageFilterIF3IF3"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIF3IF3

        Create a new object of the class itkLandweberDeconvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLandweberDeconvolutionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLandweberDeconvolutionImageFilterIF3IF3.Clone = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_Clone, None, itkLandweberDeconvolutionImageFilterIF3IF3)
itkLandweberDeconvolutionImageFilterIF3IF3.SetAlpha = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_SetAlpha, None, itkLandweberDeconvolutionImageFilterIF3IF3)
itkLandweberDeconvolutionImageFilterIF3IF3.GetAlpha = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_GetAlpha, None, itkLandweberDeconvolutionImageFilterIF3IF3)
itkLandweberDeconvolutionImageFilterIF3IF3.GetPointer = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_GetPointer, None, itkLandweberDeconvolutionImageFilterIF3IF3)
itkLandweberDeconvolutionImageFilterIF3IF3_swigregister = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_swigregister
itkLandweberDeconvolutionImageFilterIF3IF3_swigregister(itkLandweberDeconvolutionImageFilterIF3IF3)

def itkLandweberDeconvolutionImageFilterIF3IF3___New_orig__() -> "itkLandweberDeconvolutionImageFilterIF3IF3_Pointer":
    """itkLandweberDeconvolutionImageFilterIF3IF3___New_orig__() -> itkLandweberDeconvolutionImageFilterIF3IF3_Pointer"""
    return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3___New_orig__()

def itkLandweberDeconvolutionImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkLandweberDeconvolutionImageFilterIF3IF3 *":
    """itkLandweberDeconvolutionImageFilterIF3IF3_cast(itkLightObject obj) -> itkLandweberDeconvolutionImageFilterIF3IF3"""
    return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_cast(obj)

class itkLandweberDeconvolutionImageFilterISS2ISS2(itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS2ISS2):
    """


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthm as defined
    in Bertero M and Boccacci P, "Introduction to Inverse Problems in
    Imaging", 1998. The algorithm assumes that the input image has been
    formed by a linear shift-invariant system with a known kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter

    C++ includes: itkLandweberDeconvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLandweberDeconvolutionImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkLandweberDeconvolutionImageFilterISS2ISS2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLandweberDeconvolutionImageFilterISS2ISS2_Pointer":
        """Clone(itkLandweberDeconvolutionImageFilterISS2ISS2 self) -> itkLandweberDeconvolutionImageFilterISS2ISS2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_Clone(self)


    def SetAlpha(self, _arg: 'double const') -> "void":
        """
        SetAlpha(itkLandweberDeconvolutionImageFilterISS2ISS2 self, double const _arg)

        Set/get relaxation factor.

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_SetAlpha(self, _arg)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkLandweberDeconvolutionImageFilterISS2ISS2 self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_GetAlpha(self)

    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkLandweberDeconvolutionImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkLandweberDeconvolutionImageFilterISS2ISS2"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkLandweberDeconvolutionImageFilterISS2ISS2 *":
        """GetPointer(itkLandweberDeconvolutionImageFilterISS2ISS2 self) -> itkLandweberDeconvolutionImageFilterISS2ISS2"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterISS2ISS2

        Create a new object of the class itkLandweberDeconvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLandweberDeconvolutionImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLandweberDeconvolutionImageFilterISS2ISS2.Clone = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_Clone, None, itkLandweberDeconvolutionImageFilterISS2ISS2)
itkLandweberDeconvolutionImageFilterISS2ISS2.SetAlpha = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_SetAlpha, None, itkLandweberDeconvolutionImageFilterISS2ISS2)
itkLandweberDeconvolutionImageFilterISS2ISS2.GetAlpha = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_GetAlpha, None, itkLandweberDeconvolutionImageFilterISS2ISS2)
itkLandweberDeconvolutionImageFilterISS2ISS2.GetPointer = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_GetPointer, None, itkLandweberDeconvolutionImageFilterISS2ISS2)
itkLandweberDeconvolutionImageFilterISS2ISS2_swigregister = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_swigregister
itkLandweberDeconvolutionImageFilterISS2ISS2_swigregister(itkLandweberDeconvolutionImageFilterISS2ISS2)

def itkLandweberDeconvolutionImageFilterISS2ISS2___New_orig__() -> "itkLandweberDeconvolutionImageFilterISS2ISS2_Pointer":
    """itkLandweberDeconvolutionImageFilterISS2ISS2___New_orig__() -> itkLandweberDeconvolutionImageFilterISS2ISS2_Pointer"""
    return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2___New_orig__()

def itkLandweberDeconvolutionImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkLandweberDeconvolutionImageFilterISS2ISS2 *":
    """itkLandweberDeconvolutionImageFilterISS2ISS2_cast(itkLightObject obj) -> itkLandweberDeconvolutionImageFilterISS2ISS2"""
    return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_cast(obj)

class itkLandweberDeconvolutionImageFilterISS3ISS3(itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS3ISS3):
    """


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthm as defined
    in Bertero M and Boccacci P, "Introduction to Inverse Problems in
    Imaging", 1998. The algorithm assumes that the input image has been
    formed by a linear shift-invariant system with a known kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter

    C++ includes: itkLandweberDeconvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLandweberDeconvolutionImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkLandweberDeconvolutionImageFilterISS3ISS3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLandweberDeconvolutionImageFilterISS3ISS3_Pointer":
        """Clone(itkLandweberDeconvolutionImageFilterISS3ISS3 self) -> itkLandweberDeconvolutionImageFilterISS3ISS3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_Clone(self)


    def SetAlpha(self, _arg: 'double const') -> "void":
        """
        SetAlpha(itkLandweberDeconvolutionImageFilterISS3ISS3 self, double const _arg)

        Set/get relaxation factor.

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_SetAlpha(self, _arg)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkLandweberDeconvolutionImageFilterISS3ISS3 self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_GetAlpha(self)

    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkLandweberDeconvolutionImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkLandweberDeconvolutionImageFilterISS3ISS3"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkLandweberDeconvolutionImageFilterISS3ISS3 *":
        """GetPointer(itkLandweberDeconvolutionImageFilterISS3ISS3 self) -> itkLandweberDeconvolutionImageFilterISS3ISS3"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterISS3ISS3

        Create a new object of the class itkLandweberDeconvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLandweberDeconvolutionImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLandweberDeconvolutionImageFilterISS3ISS3.Clone = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_Clone, None, itkLandweberDeconvolutionImageFilterISS3ISS3)
itkLandweberDeconvolutionImageFilterISS3ISS3.SetAlpha = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_SetAlpha, None, itkLandweberDeconvolutionImageFilterISS3ISS3)
itkLandweberDeconvolutionImageFilterISS3ISS3.GetAlpha = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_GetAlpha, None, itkLandweberDeconvolutionImageFilterISS3ISS3)
itkLandweberDeconvolutionImageFilterISS3ISS3.GetPointer = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_GetPointer, None, itkLandweberDeconvolutionImageFilterISS3ISS3)
itkLandweberDeconvolutionImageFilterISS3ISS3_swigregister = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_swigregister
itkLandweberDeconvolutionImageFilterISS3ISS3_swigregister(itkLandweberDeconvolutionImageFilterISS3ISS3)

def itkLandweberDeconvolutionImageFilterISS3ISS3___New_orig__() -> "itkLandweberDeconvolutionImageFilterISS3ISS3_Pointer":
    """itkLandweberDeconvolutionImageFilterISS3ISS3___New_orig__() -> itkLandweberDeconvolutionImageFilterISS3ISS3_Pointer"""
    return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3___New_orig__()

def itkLandweberDeconvolutionImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkLandweberDeconvolutionImageFilterISS3ISS3 *":
    """itkLandweberDeconvolutionImageFilterISS3ISS3_cast(itkLightObject obj) -> itkLandweberDeconvolutionImageFilterISS3ISS3"""
    return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_cast(obj)

class itkLandweberDeconvolutionImageFilterIUC2IUC2(itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC2IUC2):
    """


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthm as defined
    in Bertero M and Boccacci P, "Introduction to Inverse Problems in
    Imaging", 1998. The algorithm assumes that the input image has been
    formed by a linear shift-invariant system with a known kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter

    C++ includes: itkLandweberDeconvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLandweberDeconvolutionImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkLandweberDeconvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLandweberDeconvolutionImageFilterIUC2IUC2_Pointer":
        """Clone(itkLandweberDeconvolutionImageFilterIUC2IUC2 self) -> itkLandweberDeconvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_Clone(self)


    def SetAlpha(self, _arg: 'double const') -> "void":
        """
        SetAlpha(itkLandweberDeconvolutionImageFilterIUC2IUC2 self, double const _arg)

        Set/get relaxation factor.

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_SetAlpha(self, _arg)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkLandweberDeconvolutionImageFilterIUC2IUC2 self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_GetAlpha(self)

    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkLandweberDeconvolutionImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkLandweberDeconvolutionImageFilterIUC2IUC2"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkLandweberDeconvolutionImageFilterIUC2IUC2 *":
        """GetPointer(itkLandweberDeconvolutionImageFilterIUC2IUC2 self) -> itkLandweberDeconvolutionImageFilterIUC2IUC2"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIUC2IUC2

        Create a new object of the class itkLandweberDeconvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLandweberDeconvolutionImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLandweberDeconvolutionImageFilterIUC2IUC2.Clone = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_Clone, None, itkLandweberDeconvolutionImageFilterIUC2IUC2)
itkLandweberDeconvolutionImageFilterIUC2IUC2.SetAlpha = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_SetAlpha, None, itkLandweberDeconvolutionImageFilterIUC2IUC2)
itkLandweberDeconvolutionImageFilterIUC2IUC2.GetAlpha = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_GetAlpha, None, itkLandweberDeconvolutionImageFilterIUC2IUC2)
itkLandweberDeconvolutionImageFilterIUC2IUC2.GetPointer = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_GetPointer, None, itkLandweberDeconvolutionImageFilterIUC2IUC2)
itkLandweberDeconvolutionImageFilterIUC2IUC2_swigregister = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_swigregister
itkLandweberDeconvolutionImageFilterIUC2IUC2_swigregister(itkLandweberDeconvolutionImageFilterIUC2IUC2)

def itkLandweberDeconvolutionImageFilterIUC2IUC2___New_orig__() -> "itkLandweberDeconvolutionImageFilterIUC2IUC2_Pointer":
    """itkLandweberDeconvolutionImageFilterIUC2IUC2___New_orig__() -> itkLandweberDeconvolutionImageFilterIUC2IUC2_Pointer"""
    return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2___New_orig__()

def itkLandweberDeconvolutionImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkLandweberDeconvolutionImageFilterIUC2IUC2 *":
    """itkLandweberDeconvolutionImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkLandweberDeconvolutionImageFilterIUC2IUC2"""
    return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_cast(obj)

class itkLandweberDeconvolutionImageFilterIUC3IUC3(itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC3IUC3):
    """


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthm as defined
    in Bertero M and Boccacci P, "Introduction to Inverse Problems in
    Imaging", 1998. The algorithm assumes that the input image has been
    formed by a linear shift-invariant system with a known kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter

    C++ includes: itkLandweberDeconvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLandweberDeconvolutionImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkLandweberDeconvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLandweberDeconvolutionImageFilterIUC3IUC3_Pointer":
        """Clone(itkLandweberDeconvolutionImageFilterIUC3IUC3 self) -> itkLandweberDeconvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_Clone(self)


    def SetAlpha(self, _arg: 'double const') -> "void":
        """
        SetAlpha(itkLandweberDeconvolutionImageFilterIUC3IUC3 self, double const _arg)

        Set/get relaxation factor.

        """
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_SetAlpha(self, _arg)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkLandweberDeconvolutionImageFilterIUC3IUC3 self) -> double"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_GetAlpha(self)

    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkLandweberDeconvolutionImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkLandweberDeconvolutionImageFilterIUC3IUC3"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkLandweberDeconvolutionImageFilterIUC3IUC3 *":
        """GetPointer(itkLandweberDeconvolutionImageFilterIUC3IUC3 self) -> itkLandweberDeconvolutionImageFilterIUC3IUC3"""
        return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIUC3IUC3

        Create a new object of the class itkLandweberDeconvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLandweberDeconvolutionImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLandweberDeconvolutionImageFilterIUC3IUC3.Clone = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_Clone, None, itkLandweberDeconvolutionImageFilterIUC3IUC3)
itkLandweberDeconvolutionImageFilterIUC3IUC3.SetAlpha = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_SetAlpha, None, itkLandweberDeconvolutionImageFilterIUC3IUC3)
itkLandweberDeconvolutionImageFilterIUC3IUC3.GetAlpha = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_GetAlpha, None, itkLandweberDeconvolutionImageFilterIUC3IUC3)
itkLandweberDeconvolutionImageFilterIUC3IUC3.GetPointer = new_instancemethod(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_GetPointer, None, itkLandweberDeconvolutionImageFilterIUC3IUC3)
itkLandweberDeconvolutionImageFilterIUC3IUC3_swigregister = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_swigregister
itkLandweberDeconvolutionImageFilterIUC3IUC3_swigregister(itkLandweberDeconvolutionImageFilterIUC3IUC3)

def itkLandweberDeconvolutionImageFilterIUC3IUC3___New_orig__() -> "itkLandweberDeconvolutionImageFilterIUC3IUC3_Pointer":
    """itkLandweberDeconvolutionImageFilterIUC3IUC3___New_orig__() -> itkLandweberDeconvolutionImageFilterIUC3IUC3_Pointer"""
    return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3___New_orig__()

def itkLandweberDeconvolutionImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkLandweberDeconvolutionImageFilterIUC3IUC3 *":
    """itkLandweberDeconvolutionImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkLandweberDeconvolutionImageFilterIUC3IUC3"""
    return _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_cast(obj)



