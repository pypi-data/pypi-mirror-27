import { PlotCanvas } from "./plot_canvas";
export declare var GMapPlotCanvasView: {
    new (): {
        initialize(options: any): void;
        update_range(range_info: any): any;
        _build_map(): any;
        _render_finished(): any;
        has_finished(): boolean;
        _get_latlon_bounds(): any[];
        _get_projected_bounds(): any[];
        _set_bokeh_ranges(): any;
        _update_center(fld: any): any;
        _update_map_type(): any;
        _update_scale_control(): any;
        _update_options(): any;
        _update_styles(): any;
        _update_zoom(): any;
        _map_hook(ctx: any, frame_box: any): any;
        _paint_empty(ctx: any, frame_box: any): any;
        view_options(): any;
        pause(): any;
        unpause(no_render?: boolean): void;
        request_render(): void;
        request_paint(): void;
        remove(): any;
        set_cursor(cursor?: string): string;
        init_webgl(): any;
        prepare_webgl(ratio: any, frame_box: any): any;
        blit_webgl(ratio: any): any;
        update_dataranges(): number;
        map_to_screen(x: any, y: any, x_name?: string, y_name?: string): any;
        push_state(type: any, info: any): any;
        clear_state(): any;
        can_undo(): boolean;
        can_redo(): boolean;
        undo(): any;
        redo(): any;
        _do_state_change(index: any): any[] | undefined;
        get_selection(): any[];
        update_selection(selection: any): any[];
        reset_selection(): any[];
        _update_ranges_together(range_info_iter: any): number[] | undefined;
        _update_ranges_individually(range_info_iter: any, is_panning: any, is_scrolling: any): any[] | undefined;
        _get_weight_to_constrain_interval(rng: any, range_info: any): number;
        reset_range(): any;
        build_levels(): any;
        get_renderer_views(): any[];
        build_tools(): any[];
        connect_signals(): any;
        set_initial_range(): void;
        update_constraints(): any;
        _layout(final?: boolean): any;
        render(): string;
        _needs_layout(): boolean;
        repaint(): any;
        paint(): any;
        _paint_levels(ctx: any, levels: any, clip_region: any): any;
        save(name: any): boolean | void;
        layout(): void;
        renderTo(element: any, replace?: boolean): void;
        notify_finished(): any;
        _createElement(): HTMLElement;
        toString(): string;
        disconnect_signals(): void;
    };
    getters(specs: any): any[];
};
export declare class GMapPlotCanvas extends PlotCanvas {
    initialize(attrs: any, options: any): void;
}
