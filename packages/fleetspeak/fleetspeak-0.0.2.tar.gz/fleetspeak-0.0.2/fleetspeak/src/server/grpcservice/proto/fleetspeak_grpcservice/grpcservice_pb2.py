# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: fleetspeak/src/server/grpcservice/proto/fleetspeak_grpcservice/grpcservice.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from fleetspeak.src.common.proto.fleetspeak import common_pb2 as fleetspeak_dot_src_dot_common_dot_proto_dot_fleetspeak_dot_common__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='fleetspeak/src/server/grpcservice/proto/fleetspeak_grpcservice/grpcservice.proto',
  package='fleetspeak.grpcservice',
  syntax='proto3',
  serialized_pb=_b('\nPfleetspeak/src/server/grpcservice/proto/fleetspeak_grpcservice/grpcservice.proto\x12\x16\x66leetspeak.grpcservice\x1a\x33\x66leetspeak/src/common/proto/fleetspeak/common.proto\"=\n\x06\x43onfig\x12\x0e\n\x06target\x18\x01 \x01(\t\x12\x10\n\x08insecure\x18\x02 \x01(\x08\x12\x11\n\tcert_file\x18\x03 \x01(\t2G\n\tProcessor\x12:\n\x07Process\x12\x13.fleetspeak.Message\x1a\x18.fleetspeak.EmptyMessage\"\x00\x62\x06proto3')
  ,
  dependencies=[fleetspeak_dot_src_dot_common_dot_proto_dot_fleetspeak_dot_common__pb2.DESCRIPTOR,])




_CONFIG = _descriptor.Descriptor(
  name='Config',
  full_name='fleetspeak.grpcservice.Config',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='target', full_name='fleetspeak.grpcservice.Config.target', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='insecure', full_name='fleetspeak.grpcservice.Config.insecure', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cert_file', full_name='fleetspeak.grpcservice.Config.cert_file', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=161,
  serialized_end=222,
)

DESCRIPTOR.message_types_by_name['Config'] = _CONFIG
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Config = _reflection.GeneratedProtocolMessageType('Config', (_message.Message,), dict(
  DESCRIPTOR = _CONFIG,
  __module__ = 'fleetspeak.src.server.grpcservice.proto.fleetspeak_grpcservice.grpcservice_pb2'
  # @@protoc_insertion_point(class_scope:fleetspeak.grpcservice.Config)
  ))
_sym_db.RegisterMessage(Config)



_PROCESSOR = _descriptor.ServiceDescriptor(
  name='Processor',
  full_name='fleetspeak.grpcservice.Processor',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=224,
  serialized_end=295,
  methods=[
  _descriptor.MethodDescriptor(
    name='Process',
    full_name='fleetspeak.grpcservice.Processor.Process',
    index=0,
    containing_service=None,
    input_type=fleetspeak_dot_src_dot_common_dot_proto_dot_fleetspeak_dot_common__pb2._MESSAGE,
    output_type=fleetspeak_dot_src_dot_common_dot_proto_dot_fleetspeak_dot_common__pb2._EMPTYMESSAGE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_PROCESSOR)

DESCRIPTOR.services_by_name['Processor'] = _PROCESSOR

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class ProcessorStub(object):
    """Processor is the service that a target system must implement to
    receive messages through a GRPCService based service.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Process = channel.unary_unary(
          '/fleetspeak.grpcservice.Processor/Process',
          request_serializer=fleetspeak_dot_src_dot_common_dot_proto_dot_fleetspeak_dot_common__pb2.Message.SerializeToString,
          response_deserializer=fleetspeak_dot_src_dot_common_dot_proto_dot_fleetspeak_dot_common__pb2.EmptyMessage.FromString,
          )


  class ProcessorServicer(object):
    """Processor is the service that a target system must implement to
    receive messages through a GRPCService based service.
    """

    def Process(self, request, context):
      """Process accepts message and processes it.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_ProcessorServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Process': grpc.unary_unary_rpc_method_handler(
            servicer.Process,
            request_deserializer=fleetspeak_dot_src_dot_common_dot_proto_dot_fleetspeak_dot_common__pb2.Message.FromString,
            response_serializer=fleetspeak_dot_src_dot_common_dot_proto_dot_fleetspeak_dot_common__pb2.EmptyMessage.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'fleetspeak.grpcservice.Processor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaProcessorServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Processor is the service that a target system must implement to
    receive messages through a GRPCService based service.
    """
    def Process(self, request, context):
      """Process accepts message and processes it.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaProcessorStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Processor is the service that a target system must implement to
    receive messages through a GRPCService based service.
    """
    def Process(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Process accepts message and processes it.
      """
      raise NotImplementedError()
    Process.future = None


  def beta_create_Processor_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('fleetspeak.grpcservice.Processor', 'Process'): fleetspeak_dot_src_dot_common_dot_proto_dot_fleetspeak_dot_common__pb2.Message.FromString,
    }
    response_serializers = {
      ('fleetspeak.grpcservice.Processor', 'Process'): fleetspeak_dot_src_dot_common_dot_proto_dot_fleetspeak_dot_common__pb2.EmptyMessage.SerializeToString,
    }
    method_implementations = {
      ('fleetspeak.grpcservice.Processor', 'Process'): face_utilities.unary_unary_inline(servicer.Process),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Processor_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('fleetspeak.grpcservice.Processor', 'Process'): fleetspeak_dot_src_dot_common_dot_proto_dot_fleetspeak_dot_common__pb2.Message.SerializeToString,
    }
    response_deserializers = {
      ('fleetspeak.grpcservice.Processor', 'Process'): fleetspeak_dot_src_dot_common_dot_proto_dot_fleetspeak_dot_common__pb2.EmptyMessage.FromString,
    }
    cardinalities = {
      'Process': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'fleetspeak.grpcservice.Processor', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
