# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Label(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, label_id: str=None, doc_id: str=None, label: str=None, label_type: str=None, position: str=None):
        """
        Label - a model defined in Swagger

        :param label_id: The label_id of this Label.
        :type label_id: str
        :param doc_id: The doc_id of this Label.
        :type doc_id: str
        :param label: The label of this Label.
        :type label: str
        :param label_type: The label_type of this Label.
        :type label_type: str
        :param position: The position of this Label.
        :type position: str
        """
        self.swagger_types = {
            'label_id': str,
            'doc_id': str,
            'label': str,
            'label_type': str,
            'position': str
        }

        self.attribute_map = {
            'label_id': 'label_id',
            'doc_id': 'doc_id',
            'label': 'label',
            'label_type': 'label_type',
            'position': 'position'
        }

        self._label_id = label_id
        self._doc_id = doc_id
        self._label = label
        self._label_type = label_type
        self._position = position

    @classmethod
    def from_dict(cls, dikt) -> 'Label':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Label of this Label.
        :rtype: Label
        """
        return deserialize_model(dikt, cls)

    @property
    def label_id(self) -> str:
        """
        Gets the label_id of this Label.

        :return: The label_id of this Label.
        :rtype: str
        """
        return self._label_id

    @label_id.setter
    def label_id(self, label_id: str):
        """
        Sets the label_id of this Label.

        :param label_id: The label_id of this Label.
        :type label_id: str
        """
        if label_id is None:
            raise ValueError("Invalid value for `label_id`, must not be `None`")

        self._label_id = label_id

    @property
    def doc_id(self) -> str:
        """
        Gets the doc_id of this Label.

        :return: The doc_id of this Label.
        :rtype: str
        """
        return self._doc_id

    @doc_id.setter
    def doc_id(self, doc_id: str):
        """
        Sets the doc_id of this Label.

        :param doc_id: The doc_id of this Label.
        :type doc_id: str
        """
        if doc_id is None:
            raise ValueError("Invalid value for `doc_id`, must not be `None`")

        self._doc_id = doc_id

    @property
    def label(self) -> str:
        """
        Gets the label of this Label.

        :return: The label of this Label.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label: str):
        """
        Sets the label of this Label.

        :param label: The label of this Label.
        :type label: str
        """

        self._label = label

    @property
    def label_type(self) -> str:
        """
        Gets the label_type of this Label.

        :return: The label_type of this Label.
        :rtype: str
        """
        return self._label_type

    @label_type.setter
    def label_type(self, label_type: str):
        """
        Sets the label_type of this Label.

        :param label_type: The label_type of this Label.
        :type label_type: str
        """

        self._label_type = label_type

    @property
    def position(self) -> str:
        """
        Gets the position of this Label.

        :return: The position of this Label.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position: str):
        """
        Sets the position of this Label.

        :param position: The position of this Label.
        :type position: str
        """

        self._position = position

