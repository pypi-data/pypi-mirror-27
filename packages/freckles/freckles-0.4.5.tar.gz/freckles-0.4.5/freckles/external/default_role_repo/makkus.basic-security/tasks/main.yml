---
# inspiration from: https://ryaneschinger.com/blog/securing-a-server-with-ansible/

# tasks file for basic-security
- name: root password
  user:
    name: root
    password: "{{ basic_security_root_pw }}"
  when: basic_security_root_pw is defined
  become: true

- name: install default shell for admin user
  install:
    packages:
      - "{{ basic_security_user_shell.split('/')[-1] }}"
    pkg_mgr: "auto"
  when: basic_security_user_name is defined and basic_security_user_pw is defined
  become: true

- name: add admin user
  user:
    name: "{{ basic_security_user_name }}"
    password: "{{ basic_security_user_pw }}"
    shell: "{{ basic_security_user_shell }}"
  when: basic_security_user_name is defined and basic_security_user_pw is defined
  become: true

- name: add authorized_keys for admin user
  authorized_key:
    user: "{{ basic_security_user_name }}"
    key: "{{ item }}"
  with_items:
    - "{{ basic_security_user_public_keys }}"
  when: basic_security_user_name is defined and basic_security_user_pw is defined  and basic_security_user_public_keys
  become: true

- name: install sudo
  install:
    packages:
      - sudo
  when: basic_security_user_name is defined and basic_security_user_pw is defined
  become: true

- name: add admin user to sudoers
  lineinfile:
    dest: /etc/sudoers
    regexp: "{{ basic_security_user_name }} ALL"
    line: "{{ basic_security_user_name }} ALL=(ALL) ALL"
    state: present
  when: basic_security_user_name is defined and basic_security_user_pw is defined
  become: true

- name: enable password-less sudo
  lineinfile: dest=/etc/sudoers
              state=present
              regexp='^%sudo ALL\='
              line='%sudo ALL=(ALL) NOPASSWD:ALL'
  when: basic_security_enable_passwordless_sudo

- name: install required packages
  install:
    packages: "{{ item }}"
    pkg_mgr: "auto"
  with_items:
    - "{{ basic_security_required_packages }}"

- name: install optional packages
  install:
    packages: "{{ item }}"
    pkg_mgr: "auto"
  become: true
  when: basic_security_packages
  with_items:
    - "{{ basic_security_packages }}"

- name: Install yum-cron.
  yum: name=yum-cron state=present
  become: true
  when: ansible_os_family == 'RedHat' and basic_security_autoupdate_enabled

- name: Ensure yum-cron is running and enabled on boot.
  service: name=yum-cron state=started enabled=yes
  become: true
  when: ansible_os_family == 'RedHat' and basic_security_autoupdate_enabled

- name: Configure autoupdates (RHEL 7).
  lineinfile:
    dest: "/etc/yum/yum-cron.conf"
    regexp: '^apply_updates = .+'
    line: 'apply_updates = yes'
  become: true
  when: ansible_os_family == 'RedHat' and basic_security_autoupdate_enabled and ansible_distribution_major_version | int == 7




- name: Copy unattended-upgrades configuration files in place.
  template:
    src: "../templates/{{ item }}.j2"
    dest: "/etc/apt/apt.conf.d/{{ item }}"
    owner: root
    group: root
    mode: 0644
  become: true
  with_items:
    - 10periodic
    # - 50unattended-upgrades
  when: ansible_os_family == 'Debian' and basic_security_autoupdate_enabled

- name: setup ufw
  ufw: state=enabled policy=deny
  become: true

- name: allow ssh traffic
  ufw: rule=allow port={{ basic_security_ssh_port }} proto=tcp
  become: true

- name: allow mosh traffic
  ufw: rule=allow proto=udp port={{ basic_security_mosh_from_port }}:{{ basic_security_mosh_to_port }}
  when: "'mosh' in basic_security_packages"
  become: true

# TODO: configure logwatch

- name: change ssh port
  lineinfile: dest=/etc/ssh/sshd_config
              regexp="^Port\s"
              line="Port {{ basic_security_ssh_port }}"
              state=present
  become: true
  notify: restart ssh

- name: disallow password authentication
  lineinfile: dest=/etc/ssh/sshd_config
              regexp="^PasswordAuthentication"
              line="PasswordAuthentication no"
              state=present
  notify: restart ssh
  become: true
  when: basic_security_disable_ssh_password_auth

- name: disallow root SSH access
  lineinfile: dest=/etc/ssh/sshd_config
              regexp="^PermitRootLogin"
              line="PermitRootLogin no"
              state=present
  notify: restart ssh
  become: true
  when: basic_security_disable_ssh_root_access
