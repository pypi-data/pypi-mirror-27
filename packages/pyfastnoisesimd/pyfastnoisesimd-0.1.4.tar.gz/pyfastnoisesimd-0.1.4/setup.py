# -*- coding: utf-8 -*-
########################################################################
#
#       PyFastNoiseSIMD
#       License: BSD
#       Created: August 13, 2017
#       C++ Library Author: Jordan Peck - https://github.com/Auburns
#       Python Extension Author:  Robert A. McLeod - robbmcleod@gmail.com
#
########################################################################

# flake8: noqa
from __future__ import print_function

import os
import platform
import re
import sys

sys.path.append( os.path.join(os.path.abspath('.'), 'PyFastNoiseSIMD')  )
import cpuinfo # Is up one directory

from setuptools import Extension
from setuptools import setup
from glob import glob
from numpy import get_include

# PyFastNoiseSIMD version
major_ver = 0
minor_ver = 1
nano_ver = 4

branch = ''

VERSION = "%d.%d.%d%s" % (major_ver, minor_ver, nano_ver, branch)

# Create the version.py file
open('PyFastNoiseSIMD/version.py', 'w').write('__version__ = "%s"\n' % VERSION)

# Global variables
CFLAGS = os.environ.get('CFLAGS', '').split()
LFLAGS = os.environ.get('LFLAGS', '').split()

# Sources and headers
sources = [  
    'PyFastNoiseSIMD/FastNoiseSIMD/FastNoiseSIMD.cpp',
    'PyFastNoiseSIMD/wrapper.cpp' 
]
inc_dirs = [get_include(), 'PyFastNoiseSIMD', 'PyFastNoiseSIMD/FastNoiseSIMD/']
lib_dirs = []
libs = []
def_macros = []

with open('README.md') as fh:
    long_desc = fh.read()

# Auto-detect the architecture and set the CFLAGS appropriately.
cpu_info = cpuinfo.get_cpu_info()
foundArch = { 'sse2': False, 'avx2': False, 'fma': False, 'avx512': False, 'neon': False }

# print( '''--==NOTE: AVX512 and FMA cannot be AUTO-DETECTED at present.  Modify setup.py vars `FOUND_AVX512` and `FOUND_FMA` to force compilation. ==--''' )
# 
# if cpu_info['arch'] == 'ARM_8':
#     foundArch['neon'] = True
# elif cpu_info['arch'] == 'X86_64': # amd64
#     if 'sse2' in cpu_info['flags']:
#         foundArch['sse2'] = True
#     if 'avx2' in cpu_info['flags']:
#         foundArch['avx2'] = True
#     if 'fma' in cpu_info['flags']:
#         foundArch['fma'] = True
#     if 'avx512' in cpu_info['flags']:
#         foundArch['avx512'] = True
    

# TODO: Need a new cpuinfo.py to detect AVX512 and FMA support.

sse_arch = b'''\
// SSE2 is supported by all x86_64 architecture processors.
#define FN_COMPILE_SSE2
#define FN_COMPILE_SSE41

'''
avx2_arch = b'''\
// To compile AVX2 set C++ code generation to use /arch:AVX(2) on FastNoiseSIMD_avx2.cpp with MSVC
// and -mavx2 with GCC
// Note: This does not break support for pre AVX CPUs, AVX code is only run if support is detected
#define FN_COMPILE_AVX2

'''
avx512_arch = b'''\
// Only the latest compilers will support this
// GCC has two march flags for avx512, -march=knl (Knight's Landing) and -march=skylake-avx512
#define FN_COMPILE_AVX512

'''
fma_arch = b'''\
// Using FMA instructions with AVX(51)2/NEON provides a small performance increase but can cause 
// minute variations in noise output compared to other SIMD levels due to higher calculation precision
// Intel compiler will always generate FMA instructions, use /Qfma- or -no-fma to disable
#define FN_USE_FMA

'''

with open( 'PyFastNoiseSIMD/FastNoiseSIMD/amd64_arch.h', 'wb') as fh:
    fh.write( b'// This file is generated by setup.py, do not edit it by hand\n' )
    if os.name == 'nt':
        if cpu_info['arch'] == 'AARCH_64': # Found Neon ARM
            # Detected by compiler flags
            pass

        # WARNING: the AVX512 detection in `cpuinfo.py` has never been tested
        if 'avx512f' in cpu_info['flags']: # Found AVX512 Foundation support
            # Technically no Windows Python compiler supports AVX512, because 
            # only MSVC2017 supports it and Python 3.6 runs on MSVC2015.
            fh.write( avx512_arch )
            if 'fma' in cpu_info['flags']:
                fh.write( fma_arch )

        if 'avx2' in cpu_info['flags']: # Found AVX2 support
            sources += ['PyFastNoiseSIMD/FastNoiseSIMD/FastNoiseSIMD_avx2.cpp']
            CFLAGS += ['/arch:AVX2']
            fh.write( avx2_arch )
            if 'fma' in cpu_info['flags']:
                fh.write( fma_arch )

        if 'sse2' in cpu_info['flags']: # Found SSE2
            sources += ['PyFastNoiseSIMD/FastNoiseSIMD/FastNoiseSIMD_sse2.cpp', 'PyFastNoiseSIMD/FastNoiseSIMD/FastNoiseSIMD_sse41.cpp' ]
            # The /arch:SSE2 flag is unnecessary on AMD64 architecture and emits a useless warning.
            # CFLAGS += ['/arch:SSE2']
            fh.write( sse_arch )


    else: # Linux
        CFLAGS += ['-std=c++11']
        if cpu_info['arch'] == 'ARM_8': # Detected by compiler flags
            pass

        # WARNING: the AVX512 detection in `cpuinfo.py` has never been tested
        if 'avx512f' in cpu_info['flags']: # Found AVX512 Foundation support
            # Not sure if anything but the foundational functions are called...
            CFLAGS += ['-mavx512f']
            fh.write( avx512_arch )
            if 'fma' in cpu_info['flags']:
                CFLAGS += ['-mfma']
                fh.write( fma_arch )

        if 'avx2' in cpu_info['flags']: # Found AVX2 support
            sources += ['PyFastNoiseSIMD/FastNoiseSIMD/FastNoiseSIMD_avx2.cpp']
            CFLAGS += ['-mavx2']
            fh.write( avx2_arch )
            if 'fma' in cpu_info['flags']:
                CFLAGS += ['-mfma']
                fh.write( fma_arch )

        if 'sse2' in cpu_info['flags']: # Found SSE2
            sources += ['PyFastNoiseSIMD/FastNoiseSIMD/FastNoiseSIMD_sse2.cpp', 'PyFastNoiseSIMD/FastNoiseSIMD/FastNoiseSIMD_sse41.cpp' ]
            CFLAGS += ['-msse2', '-msse4.1']
            fh.write( sse_arch )
        

# List classifiers:
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers = """\
Development Status :: 5 - Production/Stable
Intended Audience :: Developers
Intended Audience :: Information Technology
License :: OSI Approved :: BSD License
Programming Language :: Python
Programming Language :: Python :: 3.4
Programming Language :: Python :: 3.5
Programming Language :: Python :: 3.6
Topic :: Software Development :: Libraries :: Python Modules
Topic :: Multimedia :: Graphics :: 3D Modeling
Operating System :: Microsoft :: Windows
Operating System :: Unix
"""

setup(name = "pyfastnoisesimd",
      version = VERSION,
      description = 'FastNoiseSIMD',
      long_description = long_desc,
      classifiers = [c for c in classifiers.split("\n") if c],
      author = 'Robert A. McLeod',
      author_email = 'robbmcleod@gmail.com',
      maintainer = 'Robert A. McLeod',
      maintainer_email = 'robbmcleod@gmail.com',
      url = 'http://github.com/robbmcleod/pyfastnoisesimd',
      license = 'https://opensource.org/licenses/BSD-3-Clause',
      platforms = ['any'],
      ext_modules = [
        Extension( "pyfastnoisesimd.extension",
                   include_dirs=inc_dirs,
                   define_macros=def_macros,
                   sources=sources,
                   library_dirs=lib_dirs,
                   libraries=libs,
                   extra_link_args=LFLAGS,
                   extra_compile_args=CFLAGS ),
        ],
      # tests_require=tests_require,
      packages = ['pyfastnoisesimd'],

)
