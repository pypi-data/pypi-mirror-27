# coding: utf-8

"""
    3blades API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ServerStatistics(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'server': 'str',
        'start': 'str',
        'stop': 'str',
        'size': 'int'
    }

    attribute_map = {
        'id': 'id',
        'server': 'server',
        'start': 'start',
        'stop': 'stop',
        'size': 'size'
    }

    def __init__(self, id=None, server=None, start=None, stop=None, size=None):
        """
        ServerStatistics - a model defined in Swagger
        """

        self._id = None
        self._server = None
        self._start = None
        self._stop = None
        self._size = None

        if id is not None:
          self.id = id
        if server is not None:
          self.server = server
        if start is not None:
          self.start = start
        if stop is not None:
          self.stop = stop
        if size is not None:
          self.size = size

    @property
    def id(self):
        """
        Gets the id of this ServerStatistics.
        Server statistics unique identifier in UUID format.

        :return: The id of this ServerStatistics.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ServerStatistics.
        Server statistics unique identifier in UUID format.

        :param id: The id of this ServerStatistics.
        :type: str
        """

        self._id = id

    @property
    def server(self):
        """
        Gets the server of this ServerStatistics.
        Server name.

        :return: The server of this ServerStatistics.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """
        Sets the server of this ServerStatistics.
        Server name.

        :param server: The server of this ServerStatistics.
        :type: str
        """

        self._server = server

    @property
    def start(self):
        """
        Gets the start of this ServerStatistics.
        Start statistics, such as start time and date.

        :return: The start of this ServerStatistics.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this ServerStatistics.
        Start statistics, such as start time and date.

        :param start: The start of this ServerStatistics.
        :type: str
        """

        self._start = start

    @property
    def stop(self):
        """
        Gets the stop of this ServerStatistics.
        Stop statistics, such as stop time and date.

        :return: The stop of this ServerStatistics.
        :rtype: str
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """
        Sets the stop of this ServerStatistics.
        Stop statistics, such as stop time and date.

        :param stop: The stop of this ServerStatistics.
        :type: str
        """

        self._stop = stop

    @property
    def size(self):
        """
        Gets the size of this ServerStatistics.
        Size of statistics.

        :return: The size of this ServerStatistics.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this ServerStatistics.
        Size of statistics.

        :param size: The size of this ServerStatistics.
        :type: int
        """

        self._size = size

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ServerStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
