# coding: utf-8

"""
    3blades API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NotificationSettingsData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'emails_enabled': 'bool'
    }

    attribute_map = {
        'enabled': 'enabled',
        'emails_enabled': 'emails_enabled'
    }

    def __init__(self, enabled=None, emails_enabled=None):
        """
        NotificationSettingsData - a model defined in Swagger
        """

        self._enabled = None
        self._emails_enabled = None

        self.enabled = enabled
        self.emails_enabled = emails_enabled

    @property
    def enabled(self):
        """
        Gets the enabled of this NotificationSettingsData.
        Turn notifications on or off entirely.

        :return: The enabled of this NotificationSettingsData.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this NotificationSettingsData.
        Turn notifications on or off entirely.

        :param enabled: The enabled of this NotificationSettingsData.
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def emails_enabled(self):
        """
        Gets the emails_enabled of this NotificationSettingsData.
        Turn emails on or off.

        :return: The emails_enabled of this NotificationSettingsData.
        :rtype: bool
        """
        return self._emails_enabled

    @emails_enabled.setter
    def emails_enabled(self, emails_enabled):
        """
        Sets the emails_enabled of this NotificationSettingsData.
        Turn emails on or off.

        :param emails_enabled: The emails_enabled of this NotificationSettingsData.
        :type: bool
        """
        if emails_enabled is None:
            raise ValueError("Invalid value for `emails_enabled`, must not be `None`")

        self._emails_enabled = emails_enabled

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NotificationSettingsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
