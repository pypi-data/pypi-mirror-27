# coding: utf-8

"""
    3blades API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserProfileError(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'non_field_errors': 'list[str]',
        'bio': 'list[str]',
        'url': 'list[str]',
        'location': 'list[str]',
        'company': 'list[str]',
        'timezone': 'list[str]'
    }

    attribute_map = {
        'non_field_errors': 'non_field_errors',
        'bio': 'bio',
        'url': 'url',
        'location': 'location',
        'company': 'company',
        'timezone': 'timezone'
    }

    def __init__(self, non_field_errors=None, bio=None, url=None, location=None, company=None, timezone=None):
        """
        UserProfileError - a model defined in Swagger
        """

        self._non_field_errors = None
        self._bio = None
        self._url = None
        self._location = None
        self._company = None
        self._timezone = None

        if non_field_errors is not None:
          self.non_field_errors = non_field_errors
        if bio is not None:
          self.bio = bio
        if url is not None:
          self.url = url
        if location is not None:
          self.location = location
        if company is not None:
          self.company = company
        if timezone is not None:
          self.timezone = timezone

    @property
    def non_field_errors(self):
        """
        Gets the non_field_errors of this UserProfileError.
        Errors not connected to any field.

        :return: The non_field_errors of this UserProfileError.
        :rtype: list[str]
        """
        return self._non_field_errors

    @non_field_errors.setter
    def non_field_errors(self, non_field_errors):
        """
        Sets the non_field_errors of this UserProfileError.
        Errors not connected to any field.

        :param non_field_errors: The non_field_errors of this UserProfileError.
        :type: list[str]
        """

        self._non_field_errors = non_field_errors

    @property
    def bio(self):
        """
        Gets the bio of this UserProfileError.
        Bio field errors.

        :return: The bio of this UserProfileError.
        :rtype: list[str]
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """
        Sets the bio of this UserProfileError.
        Bio field errors.

        :param bio: The bio of this UserProfileError.
        :type: list[str]
        """

        self._bio = bio

    @property
    def url(self):
        """
        Gets the url of this UserProfileError.
        URL field errors.

        :return: The url of this UserProfileError.
        :rtype: list[str]
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this UserProfileError.
        URL field errors.

        :param url: The url of this UserProfileError.
        :type: list[str]
        """

        self._url = url

    @property
    def location(self):
        """
        Gets the location of this UserProfileError.
        Location field errors.

        :return: The location of this UserProfileError.
        :rtype: list[str]
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this UserProfileError.
        Location field errors.

        :param location: The location of this UserProfileError.
        :type: list[str]
        """

        self._location = location

    @property
    def company(self):
        """
        Gets the company of this UserProfileError.
        Company field errors.

        :return: The company of this UserProfileError.
        :rtype: list[str]
        """
        return self._company

    @company.setter
    def company(self, company):
        """
        Sets the company of this UserProfileError.
        Company field errors.

        :param company: The company of this UserProfileError.
        :type: list[str]
        """

        self._company = company

    @property
    def timezone(self):
        """
        Gets the timezone of this UserProfileError.
        Timezone field errors.

        :return: The timezone of this UserProfileError.
        :rtype: list[str]
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this UserProfileError.
        Timezone field errors.

        :param timezone: The timezone of this UserProfileError.
        :type: list[str]
        """

        self._timezone = timezone

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserProfileError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
