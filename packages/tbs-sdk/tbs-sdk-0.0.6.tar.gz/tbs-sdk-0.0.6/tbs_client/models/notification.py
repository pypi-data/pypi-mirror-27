# coding: utf-8

"""
    3blades API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Notification(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user': 'str',
        'actor': 'str',
        'target': 'str',
        'type': 'str',
        'timestamp': 'str',
        'read': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'user': 'user',
        'actor': 'actor',
        'target': 'target',
        'type': 'type',
        'timestamp': 'timestamp',
        'read': 'read'
    }

    def __init__(self, id=None, user=None, actor=None, target=None, type=None, timestamp=None, read=None):
        """
        Notification - a model defined in Swagger
        """

        self._id = None
        self._user = None
        self._actor = None
        self._target = None
        self._type = None
        self._timestamp = None
        self._read = None

        if id is not None:
          self.id = id
        if user is not None:
          self.user = user
        if actor is not None:
          self.actor = actor
        if target is not None:
          self.target = target
        if type is not None:
          self.type = type
        if timestamp is not None:
          self.timestamp = timestamp
        self.read = read

    @property
    def id(self):
        """
        Gets the id of this Notification.
        Notification unique identifier expressed as a UUID

        :return: The id of this Notification.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Notification.
        Notification unique identifier expressed as a UUID

        :param id: The id of this Notification.
        :type: str
        """

        self._id = id

    @property
    def user(self):
        """
        Gets the user of this Notification.
        User the notification is for.

        :return: The user of this Notification.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this Notification.
        User the notification is for.

        :param user: The user of this Notification.
        :type: str
        """

        self._user = user

    @property
    def actor(self):
        """
        Gets the actor of this Notification.
        Unique identifier of the object that triggered the notification.

        :return: The actor of this Notification.
        :rtype: str
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """
        Sets the actor of this Notification.
        Unique identifier of the object that triggered the notification.

        :param actor: The actor of this Notification.
        :type: str
        """

        self._actor = actor

    @property
    def target(self):
        """
        Gets the target of this Notification.
        Unique identifier of the object that was acted upon by the object referred to in actor.

        :return: The target of this Notification.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """
        Sets the target of this Notification.
        Unique identifier of the object that was acted upon by the object referred to in actor.

        :param target: The target of this Notification.
        :type: str
        """

        self._target = target

    @property
    def type(self):
        """
        Gets the type of this Notification.
        Type of the notification, e.g. invoice.created, subscription.created, etc.

        :return: The type of this Notification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Notification.
        Type of the notification, e.g. invoice.created, subscription.created, etc.

        :param type: The type of this Notification.
        :type: str
        """

        self._type = type

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Notification.
        Timestamp that the notification was created at.

        :return: The timestamp of this Notification.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Notification.
        Timestamp that the notification was created at.

        :param timestamp: The timestamp of this Notification.
        :type: str
        """

        self._timestamp = timestamp

    @property
    def read(self):
        """
        Gets the read of this Notification.
        Whether or not the notification has been marked as read by the user.

        :return: The read of this Notification.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """
        Sets the read of this Notification.
        Whether or not the notification has been marked as read by the user.

        :param read: The read of this Notification.
        :type: bool
        """
        if read is None:
            raise ValueError("Invalid value for `read`, must not be `None`")

        self._read = read

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Notification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
