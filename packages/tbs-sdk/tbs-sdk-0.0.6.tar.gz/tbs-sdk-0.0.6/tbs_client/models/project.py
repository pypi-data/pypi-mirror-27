# coding: utf-8

"""
    3blades API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Project(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'team': 'str',
        'private': 'bool',
        'last_updated': 'str',
        'owner': 'str',
        'collaborators': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'team': 'team',
        'private': 'private',
        'last_updated': 'last_updated',
        'owner': 'owner',
        'collaborators': 'collaborators'
    }

    def __init__(self, id=None, name=None, description=None, team=None, private=None, last_updated=None, owner=None, collaborators=None):
        """
        Project - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._description = None
        self._team = None
        self._private = None
        self._last_updated = None
        self._owner = None
        self._collaborators = None

        if id is not None:
          self.id = id
        self.name = name
        if description is not None:
          self.description = description
        if team is not None:
          self.team = team
        if private is not None:
          self.private = private
        if last_updated is not None:
          self.last_updated = last_updated
        if owner is not None:
          self.owner = owner
        if collaborators is not None:
          self.collaborators = collaborators

    @property
    def id(self):
        """
        Gets the id of this Project.
        Unique identifier for project as UUID.

        :return: The id of this Project.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Project.
        Unique identifier for project as UUID.

        :param id: The id of this Project.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Project.
        Project name.

        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Project.
        Project name.

        :param name: The name of this Project.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Project.
        Project description.

        :return: The description of this Project.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Project.
        Project description.

        :param description: The description of this Project.
        :type: str
        """

        self._description = description

    @property
    def team(self):
        """
        Gets the team of this Project.
        Project team name.

        :return: The team of this Project.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """
        Sets the team of this Project.
        Project team name.

        :param team: The team of this Project.
        :type: str
        """

        self._team = team

    @property
    def private(self):
        """
        Gets the private of this Project.
        Value that states whether project is private or public.

        :return: The private of this Project.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """
        Sets the private of this Project.
        Value that states whether project is private or public.

        :param private: The private of this Project.
        :type: bool
        """

        self._private = private

    @property
    def last_updated(self):
        """
        Gets the last_updated of this Project.
        Date and time when project was last updated.

        :return: The last_updated of this Project.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """
        Sets the last_updated of this Project.
        Date and time when project was last updated.

        :param last_updated: The last_updated of this Project.
        :type: str
        """

        self._last_updated = last_updated

    @property
    def owner(self):
        """
        Gets the owner of this Project.
        Username of project owner.

        :return: The owner of this Project.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this Project.
        Username of project owner.

        :param owner: The owner of this Project.
        :type: str
        """

        self._owner = owner

    @property
    def collaborators(self):
        """
        Gets the collaborators of this Project.
        Array of project collaborators.

        :return: The collaborators of this Project.
        :rtype: list[str]
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """
        Sets the collaborators of this Project.
        Array of project collaborators.

        :param collaborators: The collaborators of this Project.
        :type: list[str]
        """

        self._collaborators = collaborators

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
