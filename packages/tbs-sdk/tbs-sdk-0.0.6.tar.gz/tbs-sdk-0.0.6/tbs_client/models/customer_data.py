# coding: utf-8

"""
    3blades API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomerData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'object',
        'account_balance': 'int',
        'currency': 'str',
        'last_invoice_sync': 'str',
        'user': 'str',
        'default_source': 'str'
    }

    attribute_map = {
        'metadata': 'metadata',
        'account_balance': 'account_balance',
        'currency': 'currency',
        'last_invoice_sync': 'last_invoice_sync',
        'user': 'user',
        'default_source': 'default_source'
    }

    def __init__(self, metadata=None, account_balance=None, currency=None, last_invoice_sync=None, user=None, default_source=None):
        """
        CustomerData - a model defined in Swagger
        """

        self._metadata = None
        self._account_balance = None
        self._currency = None
        self._last_invoice_sync = None
        self._user = None
        self._default_source = None

        if metadata is not None:
          self.metadata = metadata
        if account_balance is not None:
          self.account_balance = account_balance
        if currency is not None:
          self.currency = currency
        if last_invoice_sync is not None:
          self.last_invoice_sync = last_invoice_sync
        self.user = user
        if default_source is not None:
          self.default_source = default_source

    @property
    def metadata(self):
        """
        Gets the metadata of this CustomerData.
        Customer meta data.

        :return: The metadata of this CustomerData.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this CustomerData.
        Customer meta data.

        :param metadata: The metadata of this CustomerData.
        :type: object
        """

        self._metadata = metadata

    @property
    def account_balance(self):
        """
        Gets the account_balance of this CustomerData.
        Account balance.

        :return: The account_balance of this CustomerData.
        :rtype: int
        """
        return self._account_balance

    @account_balance.setter
    def account_balance(self, account_balance):
        """
        Sets the account_balance of this CustomerData.
        Account balance.

        :param account_balance: The account_balance of this CustomerData.
        :type: int
        """

        self._account_balance = account_balance

    @property
    def currency(self):
        """
        Gets the currency of this CustomerData.
        Customer preferred currency.

        :return: The currency of this CustomerData.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this CustomerData.
        Customer preferred currency.

        :param currency: The currency of this CustomerData.
        :type: str
        """

        self._currency = currency

    @property
    def last_invoice_sync(self):
        """
        Gets the last_invoice_sync of this CustomerData.
        List date and time invoice was synced.

        :return: The last_invoice_sync of this CustomerData.
        :rtype: str
        """
        return self._last_invoice_sync

    @last_invoice_sync.setter
    def last_invoice_sync(self, last_invoice_sync):
        """
        Sets the last_invoice_sync of this CustomerData.
        List date and time invoice was synced.

        :param last_invoice_sync: The last_invoice_sync of this CustomerData.
        :type: str
        """

        self._last_invoice_sync = last_invoice_sync

    @property
    def user(self):
        """
        Gets the user of this CustomerData.
        User corresponding to customer.

        :return: The user of this CustomerData.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this CustomerData.
        User corresponding to customer.

        :param user: The user of this CustomerData.
        :type: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def default_source(self):
        """
        Gets the default_source of this CustomerData.
        Default source.

        :return: The default_source of this CustomerData.
        :rtype: str
        """
        return self._default_source

    @default_source.setter
    def default_source(self, default_source):
        """
        Sets the default_source of this CustomerData.
        Default source.

        :param default_source: The default_source of this CustomerData.
        :type: str
        """

        self._default_source = default_source

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomerData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
