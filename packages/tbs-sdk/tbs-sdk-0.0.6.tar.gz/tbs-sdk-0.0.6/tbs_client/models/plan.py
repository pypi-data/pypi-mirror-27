# coding: utf-8

"""
    3blades API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Plan(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'stripe_id': 'str',
        'created': 'str',
        'metadata': 'object',
        'livemode': 'bool',
        'amount': 'int',
        'currency': 'str',
        'interval': 'str',
        'interval_count': 'int',
        'name': 'str',
        'statement_descriptor': 'str',
        'trial_period_days': 'int'
    }

    attribute_map = {
        'id': 'id',
        'stripe_id': 'stripe_id',
        'created': 'created',
        'metadata': 'metadata',
        'livemode': 'livemode',
        'amount': 'amount',
        'currency': 'currency',
        'interval': 'interval',
        'interval_count': 'interval_count',
        'name': 'name',
        'statement_descriptor': 'statement_descriptor',
        'trial_period_days': 'trial_period_days'
    }

    def __init__(self, id=None, stripe_id=None, created=None, metadata=None, livemode=None, amount=None, currency=None, interval=None, interval_count=None, name=None, statement_descriptor=None, trial_period_days=None):
        """
        Plan - a model defined in Swagger
        """

        self._id = None
        self._stripe_id = None
        self._created = None
        self._metadata = None
        self._livemode = None
        self._amount = None
        self._currency = None
        self._interval = None
        self._interval_count = None
        self._name = None
        self._statement_descriptor = None
        self._trial_period_days = None

        if id is not None:
          self.id = id
        if stripe_id is not None:
          self.stripe_id = stripe_id
        if created is not None:
          self.created = created
        if metadata is not None:
          self.metadata = metadata
        if livemode is not None:
          self.livemode = livemode
        self.amount = amount
        if currency is not None:
          self.currency = currency
        self.interval = interval
        self.interval_count = interval_count
        self.name = name
        if statement_descriptor is not None:
          self.statement_descriptor = statement_descriptor
        if trial_period_days is not None:
          self.trial_period_days = trial_period_days

    @property
    def id(self):
        """
        Gets the id of this Plan.
        Plan unique identifier as UUID.

        :return: The id of this Plan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Plan.
        Plan unique identifier as UUID.

        :param id: The id of this Plan.
        :type: str
        """

        self._id = id

    @property
    def stripe_id(self):
        """
        Gets the stripe_id of this Plan.
        Stripe identifier to identify entity charging for plans.

        :return: The stripe_id of this Plan.
        :rtype: str
        """
        return self._stripe_id

    @stripe_id.setter
    def stripe_id(self, stripe_id):
        """
        Sets the stripe_id of this Plan.
        Stripe identifier to identify entity charging for plans.

        :param stripe_id: The stripe_id of this Plan.
        :type: str
        """

        self._stripe_id = stripe_id

    @property
    def created(self):
        """
        Gets the created of this Plan.
        Date and time when plan was created.

        :return: The created of this Plan.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Plan.
        Date and time when plan was created.

        :param created: The created of this Plan.
        :type: str
        """

        self._created = created

    @property
    def metadata(self):
        """
        Gets the metadata of this Plan.
        Optional meta data object.

        :return: The metadata of this Plan.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this Plan.
        Optional meta data object.

        :param metadata: The metadata of this Plan.
        :type: object
        """

        self._metadata = metadata

    @property
    def livemode(self):
        """
        Gets the livemode of this Plan.
        Boolean to determine whether plan is live, or not.

        :return: The livemode of this Plan.
        :rtype: bool
        """
        return self._livemode

    @livemode.setter
    def livemode(self, livemode):
        """
        Sets the livemode of this Plan.
        Boolean to determine whether plan is live, or not.

        :param livemode: The livemode of this Plan.
        :type: bool
        """

        self._livemode = livemode

    @property
    def amount(self):
        """
        Gets the amount of this Plan.
        Amount (cost/price) of plan.

        :return: The amount of this Plan.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this Plan.
        Amount (cost/price) of plan.

        :param amount: The amount of this Plan.
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def currency(self):
        """
        Gets the currency of this Plan.
        Currency used to specify amount.

        :return: The currency of this Plan.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this Plan.
        Currency used to specify amount.

        :param currency: The currency of this Plan.
        :type: str
        """

        self._currency = currency

    @property
    def interval(self):
        """
        Gets the interval of this Plan.
        Interval for plan, such as montly or yearly.

        :return: The interval of this Plan.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """
        Sets the interval of this Plan.
        Interval for plan, such as montly or yearly.

        :param interval: The interval of this Plan.
        :type: str
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")

        self._interval = interval

    @property
    def interval_count(self):
        """
        Gets the interval_count of this Plan.
        

        :return: The interval_count of this Plan.
        :rtype: int
        """
        return self._interval_count

    @interval_count.setter
    def interval_count(self, interval_count):
        """
        Sets the interval_count of this Plan.
        

        :param interval_count: The interval_count of this Plan.
        :type: int
        """
        if interval_count is None:
            raise ValueError("Invalid value for `interval_count`, must not be `None`")

        self._interval_count = interval_count

    @property
    def name(self):
        """
        Gets the name of this Plan.
        Plan name.

        :return: The name of this Plan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Plan.
        Plan name.

        :param name: The name of this Plan.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def statement_descriptor(self):
        """
        Gets the statement_descriptor of this Plan.
        Statement that describes plan to users.

        :return: The statement_descriptor of this Plan.
        :rtype: str
        """
        return self._statement_descriptor

    @statement_descriptor.setter
    def statement_descriptor(self, statement_descriptor):
        """
        Sets the statement_descriptor of this Plan.
        Statement that describes plan to users.

        :param statement_descriptor: The statement_descriptor of this Plan.
        :type: str
        """

        self._statement_descriptor = statement_descriptor

    @property
    def trial_period_days(self):
        """
        Gets the trial_period_days of this Plan.
        Number of days for plan trial, used for try and buy campaigns.

        :return: The trial_period_days of this Plan.
        :rtype: int
        """
        return self._trial_period_days

    @trial_period_days.setter
    def trial_period_days(self, trial_period_days):
        """
        Sets the trial_period_days of this Plan.
        Number of days for plan trial, used for try and buy campaigns.

        :param trial_period_days: The trial_period_days of this Plan.
        :type: int
        """

        self._trial_period_days = trial_period_days

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Plan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
