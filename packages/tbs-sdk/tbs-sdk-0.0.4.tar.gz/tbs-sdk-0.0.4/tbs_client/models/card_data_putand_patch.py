# coding: utf-8

"""
    3blades API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CardDataPutandPatch(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'address_city': 'str',
        'address_state': 'str',
        'address_zip': 'str',
        'address_country': 'str',
        'exp_month': 'int',
        'exp_year': 'int'
    }

    attribute_map = {
        'name': 'name',
        'address_line1': 'address_line1',
        'address_line2': 'address_line2',
        'address_city': 'address_city',
        'address_state': 'address_state',
        'address_zip': 'address_zip',
        'address_country': 'address_country',
        'exp_month': 'exp_month',
        'exp_year': 'exp_year'
    }

    def __init__(self, name=None, address_line1=None, address_line2=None, address_city=None, address_state=None, address_zip=None, address_country=None, exp_month=None, exp_year=None):
        """
        CardDataPutandPatch - a model defined in Swagger
        """

        self._name = None
        self._address_line1 = None
        self._address_line2 = None
        self._address_city = None
        self._address_state = None
        self._address_zip = None
        self._address_country = None
        self._exp_month = None
        self._exp_year = None

        if name is not None:
          self.name = name
        if address_line1 is not None:
          self.address_line1 = address_line1
        if address_line2 is not None:
          self.address_line2 = address_line2
        if address_city is not None:
          self.address_city = address_city
        if address_state is not None:
          self.address_state = address_state
        if address_zip is not None:
          self.address_zip = address_zip
        if address_country is not None:
          self.address_country = address_country
        if exp_month is not None:
          self.exp_month = exp_month
        if exp_year is not None:
          self.exp_year = exp_year

    @property
    def name(self):
        """
        Gets the name of this CardDataPutandPatch.
        Card name.

        :return: The name of this CardDataPutandPatch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CardDataPutandPatch.
        Card name.

        :param name: The name of this CardDataPutandPatch.
        :type: str
        """

        self._name = name

    @property
    def address_line1(self):
        """
        Gets the address_line1 of this CardDataPutandPatch.
        Address line 1.

        :return: The address_line1 of this CardDataPutandPatch.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """
        Sets the address_line1 of this CardDataPutandPatch.
        Address line 1.

        :param address_line1: The address_line1 of this CardDataPutandPatch.
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """
        Gets the address_line2 of this CardDataPutandPatch.
        Address line 2.

        :return: The address_line2 of this CardDataPutandPatch.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """
        Sets the address_line2 of this CardDataPutandPatch.
        Address line 2.

        :param address_line2: The address_line2 of this CardDataPutandPatch.
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def address_city(self):
        """
        Gets the address_city of this CardDataPutandPatch.
        Address city.

        :return: The address_city of this CardDataPutandPatch.
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """
        Sets the address_city of this CardDataPutandPatch.
        Address city.

        :param address_city: The address_city of this CardDataPutandPatch.
        :type: str
        """

        self._address_city = address_city

    @property
    def address_state(self):
        """
        Gets the address_state of this CardDataPutandPatch.
        Address state.

        :return: The address_state of this CardDataPutandPatch.
        :rtype: str
        """
        return self._address_state

    @address_state.setter
    def address_state(self, address_state):
        """
        Sets the address_state of this CardDataPutandPatch.
        Address state.

        :param address_state: The address_state of this CardDataPutandPatch.
        :type: str
        """

        self._address_state = address_state

    @property
    def address_zip(self):
        """
        Gets the address_zip of this CardDataPutandPatch.
        Address zip code.

        :return: The address_zip of this CardDataPutandPatch.
        :rtype: str
        """
        return self._address_zip

    @address_zip.setter
    def address_zip(self, address_zip):
        """
        Sets the address_zip of this CardDataPutandPatch.
        Address zip code.

        :param address_zip: The address_zip of this CardDataPutandPatch.
        :type: str
        """

        self._address_zip = address_zip

    @property
    def address_country(self):
        """
        Gets the address_country of this CardDataPutandPatch.
        Address country.

        :return: The address_country of this CardDataPutandPatch.
        :rtype: str
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """
        Sets the address_country of this CardDataPutandPatch.
        Address country.

        :param address_country: The address_country of this CardDataPutandPatch.
        :type: str
        """

        self._address_country = address_country

    @property
    def exp_month(self):
        """
        Gets the exp_month of this CardDataPutandPatch.
        Card expiration month.

        :return: The exp_month of this CardDataPutandPatch.
        :rtype: int
        """
        return self._exp_month

    @exp_month.setter
    def exp_month(self, exp_month):
        """
        Sets the exp_month of this CardDataPutandPatch.
        Card expiration month.

        :param exp_month: The exp_month of this CardDataPutandPatch.
        :type: int
        """

        self._exp_month = exp_month

    @property
    def exp_year(self):
        """
        Gets the exp_year of this CardDataPutandPatch.
        Card expiration year.

        :return: The exp_year of this CardDataPutandPatch.
        :rtype: int
        """
        return self._exp_year

    @exp_year.setter
    def exp_year(self, exp_year):
        """
        Sets the exp_year of this CardDataPutandPatch.
        Card expiration year.

        :param exp_year: The exp_year of this CardDataPutandPatch.
        :type: int
        """

        self._exp_year = exp_year

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CardDataPutandPatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
