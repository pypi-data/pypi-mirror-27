# coding: utf-8

"""
    3blades API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Card(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'address_city': 'str',
        'address_state': 'str',
        'address_zip': 'str',
        'address_country': 'str',
        'exp_month': 'int',
        'exp_year': 'int',
        'token': 'str',
        'id': 'str',
        'customer': 'str',
        'address_line1_check': 'str',
        'address_zip_check': 'str',
        'brand': 'str',
        'cvc_check': 'str',
        'last4': 'str',
        'fingerprint': 'str',
        'funding': 'str',
        'stripe_id': 'str',
        'created': 'str'
    }

    attribute_map = {
        'name': 'name',
        'address_line1': 'address_line1',
        'address_line2': 'address_line2',
        'address_city': 'address_city',
        'address_state': 'address_state',
        'address_zip': 'address_zip',
        'address_country': 'address_country',
        'exp_month': 'exp_month',
        'exp_year': 'exp_year',
        'token': 'token',
        'id': 'id',
        'customer': 'customer',
        'address_line1_check': 'address_line1_check',
        'address_zip_check': 'address_zip_check',
        'brand': 'brand',
        'cvc_check': 'cvc_check',
        'last4': 'last4',
        'fingerprint': 'fingerprint',
        'funding': 'funding',
        'stripe_id': 'stripe_id',
        'created': 'created'
    }

    def __init__(self, name=None, address_line1=None, address_line2=None, address_city=None, address_state=None, address_zip=None, address_country=None, exp_month=None, exp_year=None, token=None, id=None, customer=None, address_line1_check=None, address_zip_check=None, brand=None, cvc_check=None, last4=None, fingerprint=None, funding=None, stripe_id=None, created=None):
        """
        Card - a model defined in Swagger
        """

        self._name = None
        self._address_line1 = None
        self._address_line2 = None
        self._address_city = None
        self._address_state = None
        self._address_zip = None
        self._address_country = None
        self._exp_month = None
        self._exp_year = None
        self._token = None
        self._id = None
        self._customer = None
        self._address_line1_check = None
        self._address_zip_check = None
        self._brand = None
        self._cvc_check = None
        self._last4 = None
        self._fingerprint = None
        self._funding = None
        self._stripe_id = None
        self._created = None

        if name is not None:
          self.name = name
        if address_line1 is not None:
          self.address_line1 = address_line1
        if address_line2 is not None:
          self.address_line2 = address_line2
        if address_city is not None:
          self.address_city = address_city
        if address_state is not None:
          self.address_state = address_state
        if address_zip is not None:
          self.address_zip = address_zip
        if address_country is not None:
          self.address_country = address_country
        if exp_month is not None:
          self.exp_month = exp_month
        if exp_year is not None:
          self.exp_year = exp_year
        if token is not None:
          self.token = token
        if id is not None:
          self.id = id
        if customer is not None:
          self.customer = customer
        if address_line1_check is not None:
          self.address_line1_check = address_line1_check
        if address_zip_check is not None:
          self.address_zip_check = address_zip_check
        if brand is not None:
          self.brand = brand
        if cvc_check is not None:
          self.cvc_check = cvc_check
        if last4 is not None:
          self.last4 = last4
        if fingerprint is not None:
          self.fingerprint = fingerprint
        if funding is not None:
          self.funding = funding
        if stripe_id is not None:
          self.stripe_id = stripe_id
        if created is not None:
          self.created = created

    @property
    def name(self):
        """
        Gets the name of this Card.
        Card name.

        :return: The name of this Card.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Card.
        Card name.

        :param name: The name of this Card.
        :type: str
        """

        self._name = name

    @property
    def address_line1(self):
        """
        Gets the address_line1 of this Card.
        Address line 1.

        :return: The address_line1 of this Card.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """
        Sets the address_line1 of this Card.
        Address line 1.

        :param address_line1: The address_line1 of this Card.
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """
        Gets the address_line2 of this Card.
        Address line 2.

        :return: The address_line2 of this Card.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """
        Sets the address_line2 of this Card.
        Address line 2.

        :param address_line2: The address_line2 of this Card.
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def address_city(self):
        """
        Gets the address_city of this Card.
        Address city.

        :return: The address_city of this Card.
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """
        Sets the address_city of this Card.
        Address city.

        :param address_city: The address_city of this Card.
        :type: str
        """

        self._address_city = address_city

    @property
    def address_state(self):
        """
        Gets the address_state of this Card.
        Address state.

        :return: The address_state of this Card.
        :rtype: str
        """
        return self._address_state

    @address_state.setter
    def address_state(self, address_state):
        """
        Sets the address_state of this Card.
        Address state.

        :param address_state: The address_state of this Card.
        :type: str
        """

        self._address_state = address_state

    @property
    def address_zip(self):
        """
        Gets the address_zip of this Card.
        Address zip code.

        :return: The address_zip of this Card.
        :rtype: str
        """
        return self._address_zip

    @address_zip.setter
    def address_zip(self, address_zip):
        """
        Sets the address_zip of this Card.
        Address zip code.

        :param address_zip: The address_zip of this Card.
        :type: str
        """

        self._address_zip = address_zip

    @property
    def address_country(self):
        """
        Gets the address_country of this Card.
        Address country.

        :return: The address_country of this Card.
        :rtype: str
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """
        Sets the address_country of this Card.
        Address country.

        :param address_country: The address_country of this Card.
        :type: str
        """

        self._address_country = address_country

    @property
    def exp_month(self):
        """
        Gets the exp_month of this Card.
        Card expiration month.

        :return: The exp_month of this Card.
        :rtype: int
        """
        return self._exp_month

    @exp_month.setter
    def exp_month(self, exp_month):
        """
        Sets the exp_month of this Card.
        Card expiration month.

        :param exp_month: The exp_month of this Card.
        :type: int
        """

        self._exp_month = exp_month

    @property
    def exp_year(self):
        """
        Gets the exp_year of this Card.
        Card expiration year.

        :return: The exp_year of this Card.
        :rtype: int
        """
        return self._exp_year

    @exp_year.setter
    def exp_year(self, exp_year):
        """
        Sets the exp_year of this Card.
        Card expiration year.

        :param exp_year: The exp_year of this Card.
        :type: int
        """

        self._exp_year = exp_year

    @property
    def token(self):
        """
        Gets the token of this Card.
        Card unique token.

        :return: The token of this Card.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this Card.
        Card unique token.

        :param token: The token of this Card.
        :type: str
        """

        self._token = token

    @property
    def id(self):
        """
        Gets the id of this Card.
        Card unique identifier, expressed as UUID.

        :return: The id of this Card.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Card.
        Card unique identifier, expressed as UUID.

        :param id: The id of this Card.
        :type: str
        """

        self._id = id

    @property
    def customer(self):
        """
        Gets the customer of this Card.
        Card customer.

        :return: The customer of this Card.
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """
        Sets the customer of this Card.
        Card customer.

        :param customer: The customer of this Card.
        :type: str
        """

        self._customer = customer

    @property
    def address_line1_check(self):
        """
        Gets the address_line1_check of this Card.
        Address line 1 check, when processing card.

        :return: The address_line1_check of this Card.
        :rtype: str
        """
        return self._address_line1_check

    @address_line1_check.setter
    def address_line1_check(self, address_line1_check):
        """
        Sets the address_line1_check of this Card.
        Address line 1 check, when processing card.

        :param address_line1_check: The address_line1_check of this Card.
        :type: str
        """

        self._address_line1_check = address_line1_check

    @property
    def address_zip_check(self):
        """
        Gets the address_zip_check of this Card.
        Address check, when processing card.

        :return: The address_zip_check of this Card.
        :rtype: str
        """
        return self._address_zip_check

    @address_zip_check.setter
    def address_zip_check(self, address_zip_check):
        """
        Sets the address_zip_check of this Card.
        Address check, when processing card.

        :param address_zip_check: The address_zip_check of this Card.
        :type: str
        """

        self._address_zip_check = address_zip_check

    @property
    def brand(self):
        """
        Gets the brand of this Card.
        Credit or debit card brand.

        :return: The brand of this Card.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """
        Sets the brand of this Card.
        Credit or debit card brand.

        :param brand: The brand of this Card.
        :type: str
        """

        self._brand = brand

    @property
    def cvc_check(self):
        """
        Gets the cvc_check of this Card.
        Security code check.

        :return: The cvc_check of this Card.
        :rtype: str
        """
        return self._cvc_check

    @cvc_check.setter
    def cvc_check(self, cvc_check):
        """
        Sets the cvc_check of this Card.
        Security code check.

        :param cvc_check: The cvc_check of this Card.
        :type: str
        """

        self._cvc_check = cvc_check

    @property
    def last4(self):
        """
        Gets the last4 of this Card.
        Last four digits of credit or debit card.

        :return: The last4 of this Card.
        :rtype: str
        """
        return self._last4

    @last4.setter
    def last4(self, last4):
        """
        Sets the last4 of this Card.
        Last four digits of credit or debit card.

        :param last4: The last4 of this Card.
        :type: str
        """

        self._last4 = last4

    @property
    def fingerprint(self):
        """
        Gets the fingerprint of this Card.
        Card fingerprint.

        :return: The fingerprint of this Card.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """
        Sets the fingerprint of this Card.
        Card fingerprint.

        :param fingerprint: The fingerprint of this Card.
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def funding(self):
        """
        Gets the funding of this Card.
        Funding.

        :return: The funding of this Card.
        :rtype: str
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """
        Sets the funding of this Card.
        Funding.

        :param funding: The funding of this Card.
        :type: str
        """

        self._funding = funding

    @property
    def stripe_id(self):
        """
        Gets the stripe_id of this Card.
        Unique stripe identifier.

        :return: The stripe_id of this Card.
        :rtype: str
        """
        return self._stripe_id

    @stripe_id.setter
    def stripe_id(self, stripe_id):
        """
        Sets the stripe_id of this Card.
        Unique stripe identifier.

        :param stripe_id: The stripe_id of this Card.
        :type: str
        """

        self._stripe_id = stripe_id

    @property
    def created(self):
        """
        Gets the created of this Card.
        Card date and time creation.

        :return: The created of this Card.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this Card.
        Card date and time creation.

        :param created: The created of this Card.
        :type: str
        """

        self._created = created

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Card):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
