# coding: utf-8

"""
    3blades API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CollaboratorError(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'non_field_errors': 'list[str]',
        'id': 'list[str]',
        'owner': 'list[str]',
        'joined': 'list[str]',
        'username': 'list[str]',
        'email': 'list[str]',
        'first_name': 'list[str]',
        'last_name': 'list[str]',
        'member': 'list[str]',
        'permissions': 'list[str]'
    }

    attribute_map = {
        'non_field_errors': 'non_field_errors',
        'id': 'id',
        'owner': 'owner',
        'joined': 'joined',
        'username': 'username',
        'email': 'email',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'member': 'member',
        'permissions': 'permissions'
    }

    def __init__(self, non_field_errors=None, id=None, owner=None, joined=None, username=None, email=None, first_name=None, last_name=None, member=None, permissions=None):
        """
        CollaboratorError - a model defined in Swagger
        """

        self._non_field_errors = None
        self._id = None
        self._owner = None
        self._joined = None
        self._username = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._member = None
        self._permissions = None

        if non_field_errors is not None:
          self.non_field_errors = non_field_errors
        if id is not None:
          self.id = id
        if owner is not None:
          self.owner = owner
        if joined is not None:
          self.joined = joined
        if username is not None:
          self.username = username
        if email is not None:
          self.email = email
        if first_name is not None:
          self.first_name = first_name
        if last_name is not None:
          self.last_name = last_name
        self.member = member
        self.permissions = permissions

    @property
    def non_field_errors(self):
        """
        Gets the non_field_errors of this CollaboratorError.
        Errors not connected to any field.

        :return: The non_field_errors of this CollaboratorError.
        :rtype: list[str]
        """
        return self._non_field_errors

    @non_field_errors.setter
    def non_field_errors(self, non_field_errors):
        """
        Sets the non_field_errors of this CollaboratorError.
        Errors not connected to any field.

        :param non_field_errors: The non_field_errors of this CollaboratorError.
        :type: list[str]
        """

        self._non_field_errors = non_field_errors

    @property
    def id(self):
        """
        Gets the id of this CollaboratorError.
        Id field errors this

        :return: The id of this CollaboratorError.
        :rtype: list[str]
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CollaboratorError.
        Id field errors this

        :param id: The id of this CollaboratorError.
        :type: list[str]
        """

        self._id = id

    @property
    def owner(self):
        """
        Gets the owner of this CollaboratorError.
        Owner field errors.

        :return: The owner of this CollaboratorError.
        :rtype: list[str]
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this CollaboratorError.
        Owner field errors.

        :param owner: The owner of this CollaboratorError.
        :type: list[str]
        """

        self._owner = owner

    @property
    def joined(self):
        """
        Gets the joined of this CollaboratorError.
        Joined field errors.

        :return: The joined of this CollaboratorError.
        :rtype: list[str]
        """
        return self._joined

    @joined.setter
    def joined(self, joined):
        """
        Sets the joined of this CollaboratorError.
        Joined field errors.

        :param joined: The joined of this CollaboratorError.
        :type: list[str]
        """

        self._joined = joined

    @property
    def username(self):
        """
        Gets the username of this CollaboratorError.
        Username field errors.

        :return: The username of this CollaboratorError.
        :rtype: list[str]
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this CollaboratorError.
        Username field errors.

        :param username: The username of this CollaboratorError.
        :type: list[str]
        """

        self._username = username

    @property
    def email(self):
        """
        Gets the email of this CollaboratorError.
        Email field errors.

        :return: The email of this CollaboratorError.
        :rtype: list[str]
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this CollaboratorError.
        Email field errors.

        :param email: The email of this CollaboratorError.
        :type: list[str]
        """

        self._email = email

    @property
    def first_name(self):
        """
        Gets the first_name of this CollaboratorError.
        First name field errors.

        :return: The first_name of this CollaboratorError.
        :rtype: list[str]
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this CollaboratorError.
        First name field errors.

        :param first_name: The first_name of this CollaboratorError.
        :type: list[str]
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this CollaboratorError.
        Last name field errors.

        :return: The last_name of this CollaboratorError.
        :rtype: list[str]
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this CollaboratorError.
        Last name field errors.

        :param last_name: The last_name of this CollaboratorError.
        :type: list[str]
        """

        self._last_name = last_name

    @property
    def member(self):
        """
        Gets the member of this CollaboratorError.
        Member field errors.

        :return: The member of this CollaboratorError.
        :rtype: list[str]
        """
        return self._member

    @member.setter
    def member(self, member):
        """
        Sets the member of this CollaboratorError.
        Member field errors.

        :param member: The member of this CollaboratorError.
        :type: list[str]
        """
        if member is None:
            raise ValueError("Invalid value for `member`, must not be `None`")

        self._member = member

    @property
    def permissions(self):
        """
        Gets the permissions of this CollaboratorError.
        Permissions field errors.

        :return: The permissions of this CollaboratorError.
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """
        Sets the permissions of this CollaboratorError.
        Permissions field errors.

        :param permissions: The permissions of this CollaboratorError.
        :type: list[str]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CollaboratorError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
