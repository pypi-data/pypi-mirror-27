"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
let TagsInputComponent = TagsInputComponent_1 = class TagsInputComponent {
    constructor() {
        this.placeholder = 'Add Tag';
        this.invalidMsg = 'Value is invalid';
        this.tags = [];
        this.isBackspaceDown = false;
        this.submitted = false;
        this._onChange = (_) => { };
        this._onTouched = () => { };
    }
    ngOnInit() {
        this.tagInputCtrl = new forms_1.FormControl('', forms_1.Validators.compose(this.validators));
    }
    ngAfterViewInit() {
        if (!this.rootEle) {
            this.rootEle = this.rootEleRef.nativeElement;
        }
    }
    writeValue(value) {
        this.tags = value || [];
        this._onChange(this.tags);
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    topKeyup(event) {
        if (event.keyCode === 8 && this.delTarget) {
            let index = this.tags.indexOf(this.delTarget);
            if (index !== -1) {
                this.tags.splice(index, 1);
            }
            this.delTarget = '';
        }
    }
    setDeltarget(tag, evnet) {
        this.delTarget = tag;
        event.stopPropagation();
    }
    remove(index, evnet) {
        this.tags.splice(index, 1);
        event.stopPropagation();
    }
    tagInputOnFocus(event) {
        this.submitted = !!event.srcElement.value;
        this.delTarget = '';
    }
    tagInputKeyPress(event) {
        let value = event.srcElement.value;
        if (event.keyCode === 13 && value) {
            this.submitted = true;
            if (this.tagInputCtrl.valid) {
                this.tags.push(value);
                event.srcElement.value = '';
                this.submitted = false;
            }
            event.preventDefault();
        }
    }
    tagInputKeyDown(event) {
        let value = event.srcElement.value;
        if (event.keyCode === 8 && !value) {
            this.isBackspaceDown = true;
        }
        else {
            this.isBackspaceDown = false;
        }
    }
    tagInputKeyUp(event) {
        let value = event.srcElement.value;
        if (event.keyCode === 8 && !value && this.tags.length > 0 && this.isBackspaceDown) {
            this.delTarget = this.tags[this.tags.length - 1];
            event.stopPropagation();
            this.rootEle.focus();
        }
    }
};
__decorate([
    core_1.ViewChild('rootEleRef'),
    __metadata("design:type", core_1.ElementRef)
], TagsInputComponent.prototype, "rootEleRef", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TagsInputComponent.prototype, "placeholder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], TagsInputComponent.prototype, "invalidMsg", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], TagsInputComponent.prototype, "validators", void 0);
TagsInputComponent = TagsInputComponent_1 = __decorate([
    core_1.Component({
        selector: 'lsu-tagsInput',
        styles: [
            `
      .tags-input.invalid {
        border-top: 2px solid #DB2828 !important;
      }

      .tags-input .ui.label.transition.visible {
          height: 25px;
          display: inline-block !important;
      }

      .tags-input .ui.input {
          display: inline-block;
          width: auto;
      }

      .tags-input .ui.input input {
          height: 30px;
          padding: 0 5px;
          border: none;
      }

      .tags-input .ui.input input:focus {
          border-radius: inherit;
      }

      .deleteTarget:hover,
      .deleteTarget {
          border: 0 solid tomato;
          background-color: tomato !important;
          color: white !important;
      }
    `
        ],
        template: `
    <div #rootEleRef class="ui fluid dropdown selection multiple tags-input" [class.invalid]="tagInputCtrl.invalid && submitted" tabindex="-1" (click)="tagsInput.focus()" (keyup)="topKeyup($event)">
      <a class="ui label transition visible" [class.deleteTarget]="delTarget == tag" *ngFor="let tag of tags; let i = index; let last = last;"
        (click)="setDeltarget(tag, $event)">
        {{ tag }}
        <i class="delete icon" (click)="remove(i, $event)"></i>
      </a>
      <div class="ui input">
        <input type="text" autocomplete="off" [formControl]="tagInputCtrl" [attr.placeholder]="placeholder" #tagsInput (focus)="tagInputOnFocus($event)" (keyup)="tagInputKeyUp($event)"
          (keydown)="tagInputKeyDown($event)" (keypress)="tagInputKeyPress($event)">
      </div>
    </div>
    <p style="color: #DB2828" *ngIf="tagInputCtrl.invalid && submitted"> {{ invalidMsg }}</p>
  `,
        providers: [{
                provide: forms_1.NG_VALUE_ACCESSOR,
                useExisting: core_1.forwardRef(() => TagsInputComponent_1),
                multi: true
            }]
    }),
    __metadata("design:paramtypes", [])
], TagsInputComponent);
exports.TagsInputComponent = TagsInputComponent;
var TagsInputComponent_1;
//# sourceMappingURL=tags-input.js.map