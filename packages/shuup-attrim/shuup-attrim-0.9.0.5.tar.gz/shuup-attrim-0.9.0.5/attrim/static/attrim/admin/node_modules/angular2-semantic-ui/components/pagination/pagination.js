"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
let PaginationComponent = class PaginationComponent {
    constructor() {
        this.disabled = false;
        this.options = {};
        this._inited = false;
        this.pages = [];
        this.showPrevMoreBtn = false;
        this.showNextMoreBtn = false;
        this.onSelectPage = new core_1.EventEmitter();
    }
    set maxSize(value) {
        this._maxSize = value || 10;
        this.updateTotalPages();
    }
    get maxSize() {
        return this._maxSize;
    }
    set pageSize(value) {
        this._pageSize = value || 10;
        this.updateTotalPages();
    }
    get pageSize() {
        return this._pageSize;
    }
    set totalCount(value) {
        this._totalCount = value || 0;
        this.updateTotalPages();
    }
    get totalCount() {
        return this._totalCount;
    }
    set currentPage(value) {
        value = value || 1;
        const _temp = this._currentPage;
        this._currentPage = value < 1 ? 1 : value > this.totalPages ? this.totalPages : value;
        if (_temp === this._currentPage) {
            return; //avoid dead circulation
        }
        if (this._inited) {
            this.onSelectPage.next(value);
        }
    }
    get currentPage() {
        return this._currentPage;
    }
    ngOnInit() {
        this._inited = true;
        this.options.directionLinks = this.options.directionLinks || true;
        this.options.boundaryLinks = this.options.boundaryLinks !== undefined ? this.options.boundaryLinks : false;
        this.updateTotalPages();
    }
    updateTotalPages() {
        if (!this._inited)
            return;
        let pageCount;
        if (this.totalCount !== undefined) {
            let pageSize = this.pageSize < 1 ? 1 : this.pageSize;
            pageCount = Math.ceil(this.totalCount / this.pageSize);
            pageCount = pageCount > 1 ? pageCount : 1;
        }
        if (this.totalPages < 1) {
            pageCount = 1;
        }
        this.totalPages = pageCount;
        this.setPage(this.currentPage);
    }
    getPages(currentPage, totalPage) {
        let pages = [];
        let maxSize = this.maxSize;
        if (currentPage > totalPage) {
            currentPage = totalPage;
        }
        if (maxSize > totalPage) {
            maxSize = totalPage;
        }
        let beginPage = Math.max(currentPage - Math.floor(maxSize / 2), 1);
        let endPage = beginPage + maxSize - 1;
        if (endPage > totalPage) {
            endPage = totalPage;
            beginPage = endPage - maxSize + 1;
        }
        for (let i = beginPage; i <= endPage; i++) {
            pages.push(i);
        }
        this.showPrevMoreBtn = beginPage > 1;
        this.showNextMoreBtn = endPage < totalPage;
        return pages;
    }
    setPage(pageIndex, updateCurrentPage = true) {
        if (pageIndex < 1) {
            pageIndex = 1;
        }
        if (pageIndex > this.totalPages) {
            pageIndex = this.totalCount;
        }
        if (updateCurrentPage) {
            this.currentPage = pageIndex;
        }
        this.pages = this.getPages(pageIndex, this.totalPages);
    }
    pageUp() {
        let pageIndex = this.currentPage - 1;
        this.setPage(pageIndex);
    }
    pageDown() {
        let pageIndex = this.currentPage + 1;
        this.setPage(pageIndex);
    }
    prevMore() {
        let pageIndex = this.pages[0] - 1;
        this.setPage(pageIndex, false);
    }
    nextMore() {
        let pageIndex = this.pages[this.pages.length - 1] + 1;
        this.setPage(pageIndex, false);
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], PaginationComponent.prototype, "maxSize", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], PaginationComponent.prototype, "pageSize", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], PaginationComponent.prototype, "totalCount", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], PaginationComponent.prototype, "currentPage", null);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], PaginationComponent.prototype, "disabled", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], PaginationComponent.prototype, "options", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], PaginationComponent.prototype, "onSelectPage", void 0);
PaginationComponent = __decorate([
    core_1.Component({
        selector: 'lsu-pagination',
        styles: [
            ` .disable_pagination {
        pointer-events: none;
        opacity: 0.6;
      }
    `
        ],
        template: `
    <div style="display: inline-block" [class.disable_pagination]="disabled">
      <p style="margin-bottom: 5px; text-align: center;" *ngIf="!options.hidenLabel">{{ currentPage }} of {{ totalPages }}</p>
      <div class="ui {{options.color || ''}} buttons">
        <a class="ui button" *ngIf="options.boundaryLinks" (click)="setPage(1)" [class.disabled]="currentPage == 1">
          {{ options.firstText || "<<" }}
        </a>
        <a class="ui button" *ngIf="options.directionLinks" (click)="pageUp()" [class.disabled]="currentPage == 1">
          {{ options.prevText || "Prev" }}
        </a>
        <a class="ui icon button" *ngIf="showPrevMoreBtn" (click)="prevMore()">
          <i class="ellipsis horizontal icon"></i>
        </a>
        <button class="ui icon button" [class.active]="pageIndex == currentPage" *ngFor="let pageIndex of pages" (click)="setPage(pageIndex)">
          {{ pageIndex }}
        </button>
        <a class="ui icon button" *ngIf="showNextMoreBtn" (click)="nextMore()">
          <i class="ellipsis horizontal icon"></i>
        </a>
        <a class="ui button" *ngIf="options.directionLinks" (click)="pageDown()" [class.disabled]="currentPage == totalPages">
          {{ options.nextText || "Next" }}
        </a>
        <a class="ui button" *ngIf="options.boundaryLinks" (click)="setPage(totalPages)" [class.disabled]="currentPage == totalPages">
          {{ options.lastText || ">>" }} 
        </a>
      </div>
    </div>
  `
    }),
    __metadata("design:paramtypes", [])
], PaginationComponent);
exports.PaginationComponent = PaginationComponent;
//# sourceMappingURL=pagination.js.map