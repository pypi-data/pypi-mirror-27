"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const animations_1 = require("@angular/animations");
const forms_1 = require("@angular/forms");
let DropdownComponent = DropdownComponent_1 = class DropdownComponent {
    constructor() {
        this.placeHolder = '';
        this.multiple = false;
        this.menuPanelState = 'inactive';
        this._active = false;
        this._onChange = (_) => { };
        this._onTouched = () => { };
        this.id = `lsu_dropdown_${Math.random()}`;
    }
    get active() {
        return this._active;
    }
    set active(v) {
        this._active = !!v;
        if (this._active) {
            this.menuPanelState = 'active';
        }
        else {
            this.menuPanelState = 'inactive';
        }
    }
    writeValue(value) {
        this.selectedItem = value;
        this._onChange(value);
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    ngOnInit() {
        if (!this.multiple)
            return;
        this.selectedItem = this.selectedItem || [];
        for (let i = 0; i < this.selectedItem.length; i++) {
            let initItem = this.selectedItem[i];
            for (let j = 0; j < this.data.length; j++) {
                let candidateItem = this.data[j];
                if (JSON.stringify(initItem) === JSON.stringify(candidateItem)) {
                    this.selectedItem[i] = this.data[j];
                    break;
                }
            }
        }
    }
    onDocumentClick(event) {
        let id = event.target.id;
        if (this.active && id !== this.id) {
            this.active = false;
        }
    }
    toggleSelectPanel(event) {
        this.active = !this.active;
        if (event) {
            event.target.id = this.id;
        }
    }
    isSelected(item) {
        if (!this.selectedItem) {
            return false;
        }
        if (this.multiple) {
            let index = this.selectedItem.indexOf(item);
            return index !== -1;
        }
        else {
            return this.selectedItem === item;
        }
    }
    itemClick(item, event) {
        let value;
        if (this.multiple) {
            value = this.selectedItem || [];
            value.push(item);
            if (value.length === this.data.length) {
                this.toggleSelectPanel();
            }
        }
        else {
            value = item;
            this.toggleSelectPanel();
        }
        this.writeValue(value);
        event.stopPropagation();
    }
    removeItem(item, event) {
        let value = this.selectedItem;
        let index = value.indexOf(item);
        if (index !== -1) {
            value.splice(index, 1);
        }
        this.writeValue(value);
        event.stopPropagation();
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", Array)
], DropdownComponent.prototype, "data", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DropdownComponent.prototype, "textField", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DropdownComponent.prototype, "placeHolder", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], DropdownComponent.prototype, "multiple", void 0);
DropdownComponent = DropdownComponent_1 = __decorate([
    core_1.Component({
        selector: 'lsu-dropdown',
        styles: [`.active,.visible{ display:block !important; }`],
        host: {
            '(document:click)': 'onDocumentClick($event)'
        },
        template: `
    <div class="ui fluid selection dropdown" [attr.id]="id" 
      [ngClass]="{'active':active,'visible':active,'multiple':multiple}" 
      (click)="toggleSelectPanel($event)">
      <i class="dropdown icon"></i>
      <div class="default text" *ngIf="!selectedItem || selectedItem.length == 0">
        {{ placeHolder }}
      </div>
      <div class="text" *ngIf="selectedItem && !multiple">
        {{ selectedItem[textField] || selectedItem }}
      </div>
      <div *ngIf="selectedItem && multiple">
        <a class="ui label transition visible" style="display: inline-block !important;" *ngFor="let item of selectedItem">
          {{ item[textField] || item }}
          <i class="delete icon" (click)="removeItem(item, $event)"></i>
        </a>
      </div>
      <div class="menu visible" #menuPanel [@menuPanelState]="menuPanelState"
        (@menuPanelState.start)="menuPanel.style.overflowY = 'hidden'"
        (@menuPanelState.done)="menuPanel.style.overflowY = 'auto'">
        <div class="item" [class.active]="isSelected(item)" [class.filtered]="isSelected(item) && multiple" (click)="itemClick(item, $event)" *ngFor="let item of data">
          {{ item[textField] || item }}
        </div>
      </div>
    </div>
  `,
        animations: [
            animations_1.trigger('menuPanelState', [
                animations_1.state('inactive', animations_1.style({
                    height: 0,
                    opacity: 0
                })),
                animations_1.state('active', animations_1.style({
                    height: '*',
                    opacity: 1
                })),
                animations_1.transition('inactive <=> active', animations_1.animate('200ms ease'))
            ])
        ],
        providers: [{
                provide: forms_1.NG_VALUE_ACCESSOR,
                useExisting: core_1.forwardRef(() => DropdownComponent_1),
                multi: true
            }]
    }),
    __metadata("design:paramtypes", [])
], DropdownComponent);
exports.DropdownComponent = DropdownComponent;
var DropdownComponent_1;
//# sourceMappingURL=dropdown.js.map