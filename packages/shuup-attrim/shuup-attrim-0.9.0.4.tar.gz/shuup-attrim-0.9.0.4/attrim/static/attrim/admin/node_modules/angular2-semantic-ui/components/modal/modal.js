"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const forms_1 = require("@angular/forms");
let ModalComponent = ModalComponent_1 = class ModalComponent {
    constructor() {
        this.options = {};
        this._onChange = (_) => { };
        this._onTouched = () => { };
        this.id = `lsu_modal_${Math.random()}`;
    }
    writeValue(value) {
        this._showModal = value;
        this._onChange(value);
        if (value) {
            document.body.classList.add("dimmed");
            var self = this;
            setTimeout(function () {
                let windowHeight = document.body.offsetHeight;
                let eleHeight = self.element.offsetHeight;
                let top = (windowHeight - eleHeight) / 2;
                self.element.style.top = top + 'px';
            });
        }
        else {
            document.body.classList.remove("dimmed");
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    ngAfterViewInit() {
        document.body.classList.add("dimmable");
        this.element = document.getElementById(this.id);
    }
    clickContent(event) {
        event.stopPropagation();
    }
    closeModal() {
        if (!this.options.closeable) {
            return;
        }
        let val = false;
        this.writeValue(val);
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ModalComponent.prototype, "options", void 0);
ModalComponent = ModalComponent_1 = __decorate([
    core_1.Component({
        selector: 'lsu-modal',
        styles: [
            ` .trans-fadeout{
        -webkit-transition:all 0.3s linear;
        -moz-transition:all 0.3s linear;
        -ms-transition:all 0.3s linear;
        -o-transition:all 0.3s linear;
        transition:all 0.3s linear;
      }
    `
        ],
        template: `
    <div class="ui dimmer modals page trans-fadeout" style="display: block !important" 
      [style.visibility] = "_showModal ? 'visible' : 'hidden'"
      [style.opacity] = "_showModal ? '1' : '0'"  
      (click)="closeModal()">
      <div id="{{id}}" class="ui {{options.size || ''}} {{options.type || ''}} modal active visibility" (click)="clickContent($event)">
        <ng-content></ng-content>    
      </div>
    </div>
  `,
        providers: [{
                provide: forms_1.NG_VALUE_ACCESSOR,
                useExisting: core_1.forwardRef(() => ModalComponent_1),
                multi: true
            }]
    }),
    __metadata("design:paramtypes", [])
], ModalComponent);
exports.ModalComponent = ModalComponent;
var ModalComponent_1;
//# sourceMappingURL=modal.js.map