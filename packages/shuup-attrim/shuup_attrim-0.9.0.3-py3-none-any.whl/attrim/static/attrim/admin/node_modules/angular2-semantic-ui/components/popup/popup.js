"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
let PopupDirective = class PopupDirective {
    constructor(el) {
        this.content = "";
        this.trigger = "hover";
        this.element = el.nativeElement;
    }
    ngOnInit() {
        let id = `lsu_popup_${Math.random()}`;
        let div = document.createElement('div');
        div.id = id;
        div.className = "ui custom popup top left transition hidden";
        div.style = `word-wrap: break-word; bottom: auto; right: auto;`;
        div.innerHTML = this.content;
        this.element.parentElement.appendChild(div);
        this.popupEle = document.getElementById(id);
        this.setPosition();
    }
    setPosition() {
        let top = this.element.offsetTop;
        let left = this.element.offsetLeft;
        let height = this.popupEle.offsetHeight;
        this.popupEle.style.top = top - height - 10 + 'px';
        this.popupEle.style.left = left + 'px';
    }
    show() {
        this.popupEle.classList.remove('hidden');
        this.popupEle.classList.add('visible');
        this.setPosition();
    }
    hidden() {
        this.popupEle.classList.remove('visible');
        this.popupEle.classList.add('hidden');
    }
    isActived() {
        return this.popupEle.classList.contains('visible');
    }
    onClick() {
        if (this.trigger === 'click') {
            if (this.isActived()) {
                this.hidden();
            }
            else {
                this.show();
            }
        }
    }
    onFocus() {
        if (this.trigger === 'focus') {
            this.show();
        }
    }
    onFocusOut() {
        if (this.trigger === 'focus') {
            this.hidden();
        }
    }
    onMouseEnter() {
        if (this.trigger === 'hover') {
            this.show();
        }
    }
    onMouseLeave() {
        if (this.trigger === 'hover') {
            this.hidden();
        }
    }
    onResize() {
        this.setPosition();
    }
};
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], PopupDirective.prototype, "content", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], PopupDirective.prototype, "trigger", void 0);
PopupDirective = __decorate([
    core_1.Directive({
        selector: '[lsu-popup]',
        host: {
            '(click)': 'onClick()',
            '(focus)': 'onFocus()',
            '(focusout)': 'onFocusOut()',
            '(mouseenter)': 'onMouseEnter()',
            '(mouseleave)': 'onMouseLeave()',
            '(window:resize)': 'onResize()'
        }
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], PopupDirective);
exports.PopupDirective = PopupDirective;
//# sourceMappingURL=popup.js.map