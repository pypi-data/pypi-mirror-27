Metadata-Version: 2.0
Name: pyne-xmas-elves
Version: 0.5.1
Summary: The Great Elf Game adapted for Python North East - client & server
Home-page: http://github.com/pythonnortheast/xmas-elves
Author: Scott Walton
Author-email: scott@pythonnortheast.com
License: MIT
Platform: UNKNOWN
Requires-Dist: asgiref (==1.1.2)
Requires-Dist: attrs (==17.2.0)
Requires-Dist: autobahn (==17.10.1)
Requires-Dist: automat (==0.6.0)
Requires-Dist: certifi (==2017.11.5)
Requires-Dist: channels (==1.1.8)
Requires-Dist: chardet (==3.0.4)
Requires-Dist: constantly (==15.1.0)
Requires-Dist: coreapi (==2.3.3)
Requires-Dist: coreschema (==0.0.4)
Requires-Dist: coverage (==4.4.2)
Requires-Dist: daphne (==1.3.0)
Requires-Dist: django-filter (==1.1.0)
Requires-Dist: django (==1.11.7)
Requires-Dist: djangorestframework (==3.7.3)
Requires-Dist: docutils (==0.14)
Requires-Dist: hyperlink (==17.3.1)
Requires-Dist: idna (==2.6)
Requires-Dist: incremental (==17.5.0)
Requires-Dist: itypes (==1.1.0)
Requires-Dist: jinja2 (==2.10)
Requires-Dist: m2r (==0.1.12)
Requires-Dist: markupsafe (==1.0)
Requires-Dist: mistune (==0.8.1)
Requires-Dist: pytz (==2017.3)
Requires-Dist: pyyaml (==3.12)
Requires-Dist: requests (==2.18.4)
Requires-Dist: six (==1.11.0)
Requires-Dist: twisted (==17.9.0)
Requires-Dist: txaio (==2.8.2)
Requires-Dist: unittest-xml-reporting (==2.1.0)
Requires-Dist: uritemplate (==3.0.0)
Requires-Dist: urllib3 (==1.22)
Requires-Dist: zope.interface (==4.4.3)


Christmas Elves
===============

The annual Christmas Elves game server and client

Python North East December brings you the Christmas Elf Challenge. Your task,
should you choose to accept it, is to collect the most

Running the Server
------------------

Installing Dependencies
^^^^^^^^^^^^^^^^^^^^^^^

The server is self-contained with an SQLite database, so just install the
requirements:

.. code-block:: bash

   pip install -r requirements.txt

Running
^^^^^^^

We're using Django Channels, so running the server is as easy as:

.. code-block:: bash

   python server/manage.py runserver

The API
-------

To interact with the server session, we use a simple REST API to send new data
into the server. The full API docs can be found by running a server and
navigating to ``/docs/``.

Starting a New Session
^^^^^^^^^^^^^^^^^^^^^^

To start a new session, send a ``POST`` request with a ``name`` variable
form-encoded to ``https://<host>/sessions/``\ :

.. code-block:: bash

   curl https://example.com/sessions/ -X POST -d player_name="Scott"

and you'll get a simple JSON object back with a ``session`` URL that you post your
turns against.

Taking a Turn
^^^^^^^^^^^^^

To take a turn, make a ``POST`` request against the ``day`` endpoint of a session.

Creating Clients
----------------

Instructions and Rules
----------------------

See the `attached Google Doc <https://docs.google.com/document/d/1p3upVEv7zDcT_0ZQKbJqo_nudHUwIoLAo1TkxzBb7ZA/edit?usp=sharing>`_
for the rules and any of the latest tips and tricks.


