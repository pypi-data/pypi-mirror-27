# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ContainerGroupProperties(Model):
    """Describes the properties of a Container group.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param containers: The containers in this container group.
    :type containers: list[~azure.mgmt.seabreeze.models.Container]
    :param image_registry_credentials: The image registry credentials by which
     the container group is created from.
    :type image_registry_credentials:
     list[~azure.mgmt.seabreeze.models.ImageRegistryCredential]
    :param restart_policy: - `always` Always restart
     . Possible values include: 'always'
    :type restart_policy: str or
     ~azure.mgmt.seabreeze.models.ContainerRestartPolicy
    :param ip_address: IP address for the container group.
    :type ip_address: ~azure.mgmt.seabreeze.models.IpAddress
    :param os_type: The base level OS type required by the containers in the
     group. Possible values include: 'Windows', 'Linux'
    :type os_type: str or ~azure.mgmt.seabreeze.models.OperatingSystemTypes
    :ivar state: The state of the container group. Only valid in response.
    :vartype state: str
    :param volumes: The volumes for this container group.
    :type volumes: list[~azure.mgmt.seabreeze.models.Volume]
    """

    _validation = {
        'containers': {'required': True},
        'os_type': {'required': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'containers': {'key': 'containers', 'type': '[Container]'},
        'image_registry_credentials': {'key': 'imageRegistryCredentials', 'type': '[ImageRegistryCredential]'},
        'restart_policy': {'key': 'restartPolicy', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'IpAddress'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'volumes': {'key': 'volumes', 'type': '[Volume]'},
    }

    def __init__(self, containers, os_type, image_registry_credentials=None, restart_policy=None, ip_address=None, volumes=None):
        self.containers = containers
        self.image_registry_credentials = image_registry_credentials
        self.restart_policy = restart_policy
        self.ip_address = ip_address
        self.os_type = os_type
        self.state = None
        self.volumes = volumes
