# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import ServiceClient
from msrest import Serializer, Deserializer
from msrestazure import AzureConfiguration
from .version import VERSION
from .operations.container_group_set_instance_operations import ContainerGroupSetInstanceOperations
from .operations.container_group_sets_operations import ContainerGroupSetsOperations
from .operations.container_group_set_container_logs_operations import ContainerGroupSetContainerLogsOperations
from .operations.container_group_set_operations import ContainerGroupSetOperations
from .operations.container_groups_operations import ContainerGroupsOperations
from .operations.container_groups_container_logs_operations import ContainerGroupsContainerLogsOperations
from .operations.operations import Operations
from . import models


class SeaBreezeManagementClientConfiguration(AzureConfiguration):
    """Configuration for SeaBreezeManagementClient
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param subscription_id: The customer subscription identifier
    :type subscription_id: str
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, subscription_id, base_url=None):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if subscription_id is None:
            raise ValueError("Parameter 'subscription_id' must not be None.")
        if not base_url:
            base_url = 'https://management.azure.com'

        super(SeaBreezeManagementClientConfiguration, self).__init__(base_url)

        self.add_user_agent('azure-mgmt-seabreeze/{}'.format(VERSION))
        self.add_user_agent('Azure-SDK-For-Python')

        self.credentials = credentials
        self.subscription_id = subscription_id


class SeaBreezeManagementClient(object):
    """APIs to deploy and manage container group set Service Fabric.

    :ivar config: Configuration for client.
    :vartype config: SeaBreezeManagementClientConfiguration

    :ivar container_group_set_instance: ContainerGroupSetInstance operations
    :vartype container_group_set_instance: azure.mgmt.seabreeze.operations.ContainerGroupSetInstanceOperations
    :ivar container_group_sets: ContainerGroupSets operations
    :vartype container_group_sets: azure.mgmt.seabreeze.operations.ContainerGroupSetsOperations
    :ivar container_group_set_container_logs: ContainerGroupSetContainerLogs operations
    :vartype container_group_set_container_logs: azure.mgmt.seabreeze.operations.ContainerGroupSetContainerLogsOperations
    :ivar container_group_set: ContainerGroupSet operations
    :vartype container_group_set: azure.mgmt.seabreeze.operations.ContainerGroupSetOperations
    :ivar container_groups: ContainerGroups operations
    :vartype container_groups: azure.mgmt.seabreeze.operations.ContainerGroupsOperations
    :ivar container_groups_container_logs: ContainerGroupsContainerLogs operations
    :vartype container_groups_container_logs: azure.mgmt.seabreeze.operations.ContainerGroupsContainerLogsOperations
    :ivar operations: Operations operations
    :vartype operations: azure.mgmt.seabreeze.operations.Operations

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param subscription_id: The customer subscription identifier
    :type subscription_id: str
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, subscription_id, base_url=None):

        self.config = SeaBreezeManagementClientConfiguration(credentials, subscription_id, base_url)
        self._client = ServiceClient(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '2017-11-01-privatepreview'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.container_group_set_instance = ContainerGroupSetInstanceOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.container_group_sets = ContainerGroupSetsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.container_group_set_container_logs = ContainerGroupSetContainerLogsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.container_group_set = ContainerGroupSetOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.container_groups = ContainerGroupsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.container_groups_container_logs = ContainerGroupsContainerLogsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.operations = Operations(
            self._client, self.config, self._serialize, self._deserialize)
