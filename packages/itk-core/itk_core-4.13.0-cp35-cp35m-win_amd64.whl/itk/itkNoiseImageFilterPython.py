# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkNoiseImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkNoiseImageFilterPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkNoiseImageFilterPython')
    _itkNoiseImageFilterPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkNoiseImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkNoiseImageFilterPython
            return _itkNoiseImageFilterPython
        try:
            _mod = imp.load_module('_itkNoiseImageFilterPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkNoiseImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkNoiseImageFilterPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkBoxImageFilterPython
import itkImageToImageFilterAPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImagePython
import itkRGBPixelPython
import itkFixedArrayPython
import itkRGBAPixelPython
import itkPointPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkVectorPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkVectorImagePython
import itkVariableLengthVectorPython

def itkNoiseImageFilterIF3IF3_New():
  return itkNoiseImageFilterIF3IF3.New()


def itkNoiseImageFilterIF2IF2_New():
  return itkNoiseImageFilterIF2IF2.New()


def itkNoiseImageFilterIUC3IUC3_New():
  return itkNoiseImageFilterIUC3IUC3.New()


def itkNoiseImageFilterIUC2IUC2_New():
  return itkNoiseImageFilterIUC2IUC2.New()


def itkNoiseImageFilterISS3ISS3_New():
  return itkNoiseImageFilterISS3ISS3.New()


def itkNoiseImageFilterISS2ISS2_New():
  return itkNoiseImageFilterISS2ISS2.New()

class itkNoiseImageFilterIF2IF2(itkBoxImageFilterPython.itkBoxImageFilterIF2IF2):
    """


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator Wiki Examples:

    All Examples

    https://www.itk.org/Wiki/ITK/Examples/Statistics/NoiseImageFilter
    Compute the local noise in an image

    C++ includes: itkNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNoiseImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkNoiseImageFilterIF2IF2_Pointer"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNoiseImageFilterIF2IF2_Pointer":
        """Clone(itkNoiseImageFilterIF2IF2 self) -> itkNoiseImageFilterIF2IF2_Pointer"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2_Clone(self)

    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkNoiseImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkNoiseImageFilterIF2IF2"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkNoiseImageFilterIF2IF2 *":
        """GetPointer(itkNoiseImageFilterIF2IF2 self) -> itkNoiseImageFilterIF2IF2"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterIF2IF2

        Create a new object of the class itkNoiseImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNoiseImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNoiseImageFilterIF2IF2.Clone = new_instancemethod(_itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2_Clone, None, itkNoiseImageFilterIF2IF2)
itkNoiseImageFilterIF2IF2.GetPointer = new_instancemethod(_itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2_GetPointer, None, itkNoiseImageFilterIF2IF2)
itkNoiseImageFilterIF2IF2_swigregister = _itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2_swigregister
itkNoiseImageFilterIF2IF2_swigregister(itkNoiseImageFilterIF2IF2)

def itkNoiseImageFilterIF2IF2___New_orig__() -> "itkNoiseImageFilterIF2IF2_Pointer":
    """itkNoiseImageFilterIF2IF2___New_orig__() -> itkNoiseImageFilterIF2IF2_Pointer"""
    return _itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2___New_orig__()

def itkNoiseImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkNoiseImageFilterIF2IF2 *":
    """itkNoiseImageFilterIF2IF2_cast(itkLightObject obj) -> itkNoiseImageFilterIF2IF2"""
    return _itkNoiseImageFilterPython.itkNoiseImageFilterIF2IF2_cast(obj)

class itkNoiseImageFilterIF3IF3(itkBoxImageFilterPython.itkBoxImageFilterIF3IF3):
    """


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator Wiki Examples:

    All Examples

    https://www.itk.org/Wiki/ITK/Examples/Statistics/NoiseImageFilter
    Compute the local noise in an image

    C++ includes: itkNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNoiseImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkNoiseImageFilterIF3IF3_Pointer"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNoiseImageFilterIF3IF3_Pointer":
        """Clone(itkNoiseImageFilterIF3IF3 self) -> itkNoiseImageFilterIF3IF3_Pointer"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3_Clone(self)

    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkNoiseImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkNoiseImageFilterIF3IF3"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkNoiseImageFilterIF3IF3 *":
        """GetPointer(itkNoiseImageFilterIF3IF3 self) -> itkNoiseImageFilterIF3IF3"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterIF3IF3

        Create a new object of the class itkNoiseImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNoiseImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNoiseImageFilterIF3IF3.Clone = new_instancemethod(_itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3_Clone, None, itkNoiseImageFilterIF3IF3)
itkNoiseImageFilterIF3IF3.GetPointer = new_instancemethod(_itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3_GetPointer, None, itkNoiseImageFilterIF3IF3)
itkNoiseImageFilterIF3IF3_swigregister = _itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3_swigregister
itkNoiseImageFilterIF3IF3_swigregister(itkNoiseImageFilterIF3IF3)

def itkNoiseImageFilterIF3IF3___New_orig__() -> "itkNoiseImageFilterIF3IF3_Pointer":
    """itkNoiseImageFilterIF3IF3___New_orig__() -> itkNoiseImageFilterIF3IF3_Pointer"""
    return _itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3___New_orig__()

def itkNoiseImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkNoiseImageFilterIF3IF3 *":
    """itkNoiseImageFilterIF3IF3_cast(itkLightObject obj) -> itkNoiseImageFilterIF3IF3"""
    return _itkNoiseImageFilterPython.itkNoiseImageFilterIF3IF3_cast(obj)

class itkNoiseImageFilterISS2ISS2(itkBoxImageFilterPython.itkBoxImageFilterISS2ISS2):
    """


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator Wiki Examples:

    All Examples

    https://www.itk.org/Wiki/ITK/Examples/Statistics/NoiseImageFilter
    Compute the local noise in an image

    C++ includes: itkNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNoiseImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkNoiseImageFilterISS2ISS2_Pointer"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNoiseImageFilterISS2ISS2_Pointer":
        """Clone(itkNoiseImageFilterISS2ISS2 self) -> itkNoiseImageFilterISS2ISS2_Pointer"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2_Clone(self)

    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkNoiseImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkNoiseImageFilterISS2ISS2"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkNoiseImageFilterISS2ISS2 *":
        """GetPointer(itkNoiseImageFilterISS2ISS2 self) -> itkNoiseImageFilterISS2ISS2"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterISS2ISS2

        Create a new object of the class itkNoiseImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNoiseImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNoiseImageFilterISS2ISS2.Clone = new_instancemethod(_itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2_Clone, None, itkNoiseImageFilterISS2ISS2)
itkNoiseImageFilterISS2ISS2.GetPointer = new_instancemethod(_itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2_GetPointer, None, itkNoiseImageFilterISS2ISS2)
itkNoiseImageFilterISS2ISS2_swigregister = _itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2_swigregister
itkNoiseImageFilterISS2ISS2_swigregister(itkNoiseImageFilterISS2ISS2)

def itkNoiseImageFilterISS2ISS2___New_orig__() -> "itkNoiseImageFilterISS2ISS2_Pointer":
    """itkNoiseImageFilterISS2ISS2___New_orig__() -> itkNoiseImageFilterISS2ISS2_Pointer"""
    return _itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2___New_orig__()

def itkNoiseImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkNoiseImageFilterISS2ISS2 *":
    """itkNoiseImageFilterISS2ISS2_cast(itkLightObject obj) -> itkNoiseImageFilterISS2ISS2"""
    return _itkNoiseImageFilterPython.itkNoiseImageFilterISS2ISS2_cast(obj)

class itkNoiseImageFilterISS3ISS3(itkBoxImageFilterPython.itkBoxImageFilterISS3ISS3):
    """


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator Wiki Examples:

    All Examples

    https://www.itk.org/Wiki/ITK/Examples/Statistics/NoiseImageFilter
    Compute the local noise in an image

    C++ includes: itkNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNoiseImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkNoiseImageFilterISS3ISS3_Pointer"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNoiseImageFilterISS3ISS3_Pointer":
        """Clone(itkNoiseImageFilterISS3ISS3 self) -> itkNoiseImageFilterISS3ISS3_Pointer"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3_Clone(self)

    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkNoiseImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkNoiseImageFilterISS3ISS3"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkNoiseImageFilterISS3ISS3 *":
        """GetPointer(itkNoiseImageFilterISS3ISS3 self) -> itkNoiseImageFilterISS3ISS3"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterISS3ISS3

        Create a new object of the class itkNoiseImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNoiseImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNoiseImageFilterISS3ISS3.Clone = new_instancemethod(_itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3_Clone, None, itkNoiseImageFilterISS3ISS3)
itkNoiseImageFilterISS3ISS3.GetPointer = new_instancemethod(_itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3_GetPointer, None, itkNoiseImageFilterISS3ISS3)
itkNoiseImageFilterISS3ISS3_swigregister = _itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3_swigregister
itkNoiseImageFilterISS3ISS3_swigregister(itkNoiseImageFilterISS3ISS3)

def itkNoiseImageFilterISS3ISS3___New_orig__() -> "itkNoiseImageFilterISS3ISS3_Pointer":
    """itkNoiseImageFilterISS3ISS3___New_orig__() -> itkNoiseImageFilterISS3ISS3_Pointer"""
    return _itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3___New_orig__()

def itkNoiseImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkNoiseImageFilterISS3ISS3 *":
    """itkNoiseImageFilterISS3ISS3_cast(itkLightObject obj) -> itkNoiseImageFilterISS3ISS3"""
    return _itkNoiseImageFilterPython.itkNoiseImageFilterISS3ISS3_cast(obj)

class itkNoiseImageFilterIUC2IUC2(itkBoxImageFilterPython.itkBoxImageFilterIUC2IUC2):
    """


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator Wiki Examples:

    All Examples

    https://www.itk.org/Wiki/ITK/Examples/Statistics/NoiseImageFilter
    Compute the local noise in an image

    C++ includes: itkNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNoiseImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkNoiseImageFilterIUC2IUC2_Pointer"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNoiseImageFilterIUC2IUC2_Pointer":
        """Clone(itkNoiseImageFilterIUC2IUC2 self) -> itkNoiseImageFilterIUC2IUC2_Pointer"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2_Clone(self)

    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkNoiseImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkNoiseImageFilterIUC2IUC2"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkNoiseImageFilterIUC2IUC2 *":
        """GetPointer(itkNoiseImageFilterIUC2IUC2 self) -> itkNoiseImageFilterIUC2IUC2"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterIUC2IUC2

        Create a new object of the class itkNoiseImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNoiseImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNoiseImageFilterIUC2IUC2.Clone = new_instancemethod(_itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2_Clone, None, itkNoiseImageFilterIUC2IUC2)
itkNoiseImageFilterIUC2IUC2.GetPointer = new_instancemethod(_itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2_GetPointer, None, itkNoiseImageFilterIUC2IUC2)
itkNoiseImageFilterIUC2IUC2_swigregister = _itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2_swigregister
itkNoiseImageFilterIUC2IUC2_swigregister(itkNoiseImageFilterIUC2IUC2)

def itkNoiseImageFilterIUC2IUC2___New_orig__() -> "itkNoiseImageFilterIUC2IUC2_Pointer":
    """itkNoiseImageFilterIUC2IUC2___New_orig__() -> itkNoiseImageFilterIUC2IUC2_Pointer"""
    return _itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2___New_orig__()

def itkNoiseImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkNoiseImageFilterIUC2IUC2 *":
    """itkNoiseImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkNoiseImageFilterIUC2IUC2"""
    return _itkNoiseImageFilterPython.itkNoiseImageFilterIUC2IUC2_cast(obj)

class itkNoiseImageFilterIUC3IUC3(itkBoxImageFilterPython.itkBoxImageFilterIUC3IUC3):
    """


    Calculate the local noise in an image.

    Computes an image where a given pixel is the standard deviation of the
    pixels in a neighborhood about the corresponding input pixel. This
    serves as an estimate of the local noise (or texture) in an image.
    Currently, this noise estimate assume a piecewise constant image. This
    filter should be extended to fitting a (hyper) plane to the
    neighborhood and calculating the standard deviation of the residuals
    to this (hyper) plane.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator Wiki Examples:

    All Examples

    https://www.itk.org/Wiki/ITK/Examples/Statistics/NoiseImageFilter
    Compute the local noise in an image

    C++ includes: itkNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNoiseImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkNoiseImageFilterIUC3IUC3_Pointer"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNoiseImageFilterIUC3IUC3_Pointer":
        """Clone(itkNoiseImageFilterIUC3IUC3 self) -> itkNoiseImageFilterIUC3IUC3_Pointer"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3_Clone(self)

    InputHasNumericTraitsCheck = _itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNoiseImageFilterPython.delete_itkNoiseImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkNoiseImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkNoiseImageFilterIUC3IUC3"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self) -> "itkNoiseImageFilterIUC3IUC3 *":
        """GetPointer(itkNoiseImageFilterIUC3IUC3 self) -> itkNoiseImageFilterIUC3IUC3"""
        return _itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkNoiseImageFilterIUC3IUC3

        Create a new object of the class itkNoiseImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNoiseImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNoiseImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNoiseImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNoiseImageFilterIUC3IUC3.Clone = new_instancemethod(_itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3_Clone, None, itkNoiseImageFilterIUC3IUC3)
itkNoiseImageFilterIUC3IUC3.GetPointer = new_instancemethod(_itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3_GetPointer, None, itkNoiseImageFilterIUC3IUC3)
itkNoiseImageFilterIUC3IUC3_swigregister = _itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3_swigregister
itkNoiseImageFilterIUC3IUC3_swigregister(itkNoiseImageFilterIUC3IUC3)

def itkNoiseImageFilterIUC3IUC3___New_orig__() -> "itkNoiseImageFilterIUC3IUC3_Pointer":
    """itkNoiseImageFilterIUC3IUC3___New_orig__() -> itkNoiseImageFilterIUC3IUC3_Pointer"""
    return _itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3___New_orig__()

def itkNoiseImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkNoiseImageFilterIUC3IUC3 *":
    """itkNoiseImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkNoiseImageFilterIUC3IUC3"""
    return _itkNoiseImageFilterPython.itkNoiseImageFilterIUC3IUC3_cast(obj)



