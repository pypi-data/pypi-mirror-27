# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkMapContainerPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkMapContainerPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkMapContainerPython')
    _itkMapContainerPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMapContainerPython', [dirname(__file__)])
        except ImportError:
            import _itkMapContainerPython
            return _itkMapContainerPython
        try:
            _mod = imp.load_module('_itkMapContainerPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkMapContainerPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMapContainerPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkPointPython
import ITKCommonBasePython

def itkMapContainerULLSIT_New():
  return itkMapContainerULLSIT.New()


def itkMapContainerULLD_New():
  return itkMapContainerULLD.New()


def itkMapContainerULLF_New():
  return itkMapContainerULLF.New()


def itkMapContainerULLPD3_New():
  return itkMapContainerULLPD3.New()


def itkMapContainerULLVD3_New():
  return itkMapContainerULLVD3.New()


def itkMapContainerULLPF3_New():
  return itkMapContainerULLPF3.New()


def itkMapContainerULLVF3_New():
  return itkMapContainerULLVF3.New()


def itkMapContainerULLPD2_New():
  return itkMapContainerULLPD2.New()


def itkMapContainerULLVD2_New():
  return itkMapContainerULLVD2.New()


def itkMapContainerULLPF2_New():
  return itkMapContainerULLPF2.New()


def itkMapContainerULLVF2_New():
  return itkMapContainerULLVF2.New()

class itkMapContainerULLD(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULLD self) -> itkMapContainerULLD
        __init__(itkMapContainerULLD self, std::less< unsigned long long > const & comp) -> itkMapContainerULLD



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULLD_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLD(*args))

    def __New_orig__():
        """__New_orig__() -> itkMapContainerULLD_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkMapContainerULLD self) -> itkMapContainerULLD_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLD_Clone(self)


    def CastToSTLContainer(self):
        """
        CastToSTLContainer(itkMapContainerULLD self) -> std::map< unsigned long long,double,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,double > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLD_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """
        CastToSTLConstContainer(itkMapContainerULLD self) -> std::map< unsigned long long,double,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,double > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLD_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkMapContainerULLD self, unsigned long long arg0) -> double
        ElementAt(itkMapContainerULLD self, unsigned long long arg0) -> double const &

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULLD_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """
        CreateElementAt(itkMapContainerULLD self, unsigned long long arg0) -> double &

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULLD_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """
        GetElement(itkMapContainerULLD self, unsigned long long arg0) -> double

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULLD_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """
        SetElement(itkMapContainerULLD self, unsigned long long arg0, double arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLD_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """
        InsertElement(itkMapContainerULLD self, unsigned long long arg0, double arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLD_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """
        IndexExists(itkMapContainerULLD self, unsigned long long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULLD_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """
        GetElementIfIndexExists(itkMapContainerULLD self, unsigned long long arg0, double * arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULLD_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """
        CreateIndex(itkMapContainerULLD self, unsigned long long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULLD_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """
        DeleteIndex(itkMapContainerULLD self, unsigned long long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULLD_DeleteIndex(self, arg0)


    def Size(self):
        """
        Size(itkMapContainerULLD self) -> unsigned long long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULLD_Size(self)


    def Reserve(self, arg0):
        """
        Reserve(itkMapContainerULLD self, unsigned long long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULLD_Reserve(self, arg0)


    def Squeeze(self):
        """
        Squeeze(itkMapContainerULLD self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULLD_Squeeze(self)


    def Initialize(self):
        """
        Initialize(itkMapContainerULLD self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULLD_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLD

    def cast(obj):
        """cast(itkLightObject obj) -> itkMapContainerULLD"""
        return _itkMapContainerPython.itkMapContainerULLD_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkMapContainerULLD self) -> itkMapContainerULLD"""
        return _itkMapContainerPython.itkMapContainerULLD_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkMapContainerULLD

        Create a new object of the class itkMapContainerULLD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULLD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULLD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULLD.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_Clone, None, itkMapContainerULLD)
itkMapContainerULLD.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_CastToSTLContainer, None, itkMapContainerULLD)
itkMapContainerULLD.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_CastToSTLConstContainer, None, itkMapContainerULLD)
itkMapContainerULLD.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_ElementAt, None, itkMapContainerULLD)
itkMapContainerULLD.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_CreateElementAt, None, itkMapContainerULLD)
itkMapContainerULLD.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_GetElement, None, itkMapContainerULLD)
itkMapContainerULLD.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_SetElement, None, itkMapContainerULLD)
itkMapContainerULLD.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_InsertElement, None, itkMapContainerULLD)
itkMapContainerULLD.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_IndexExists, None, itkMapContainerULLD)
itkMapContainerULLD.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_GetElementIfIndexExists, None, itkMapContainerULLD)
itkMapContainerULLD.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_CreateIndex, None, itkMapContainerULLD)
itkMapContainerULLD.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_DeleteIndex, None, itkMapContainerULLD)
itkMapContainerULLD.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_Size, None, itkMapContainerULLD)
itkMapContainerULLD.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_Reserve, None, itkMapContainerULLD)
itkMapContainerULLD.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_Squeeze, None, itkMapContainerULLD)
itkMapContainerULLD.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_Initialize, None, itkMapContainerULLD)
itkMapContainerULLD.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLD_GetPointer, None, itkMapContainerULLD)
itkMapContainerULLD_swigregister = _itkMapContainerPython.itkMapContainerULLD_swigregister
itkMapContainerULLD_swigregister(itkMapContainerULLD)

def itkMapContainerULLD___New_orig__():
    """itkMapContainerULLD___New_orig__() -> itkMapContainerULLD_Pointer"""
    return _itkMapContainerPython.itkMapContainerULLD___New_orig__()

def itkMapContainerULLD_cast(obj):
    """itkMapContainerULLD_cast(itkLightObject obj) -> itkMapContainerULLD"""
    return _itkMapContainerPython.itkMapContainerULLD_cast(obj)

class itkMapContainerULLF(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULLF self) -> itkMapContainerULLF
        __init__(itkMapContainerULLF self, std::less< unsigned long long > const & comp) -> itkMapContainerULLF



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULLF_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLF(*args))

    def __New_orig__():
        """__New_orig__() -> itkMapContainerULLF_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkMapContainerULLF self) -> itkMapContainerULLF_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLF_Clone(self)


    def CastToSTLContainer(self):
        """
        CastToSTLContainer(itkMapContainerULLF self) -> std::map< unsigned long long,float,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,float > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLF_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """
        CastToSTLConstContainer(itkMapContainerULLF self) -> std::map< unsigned long long,float,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,float > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLF_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkMapContainerULLF self, unsigned long long arg0) -> float
        ElementAt(itkMapContainerULLF self, unsigned long long arg0) -> float const &

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULLF_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """
        CreateElementAt(itkMapContainerULLF self, unsigned long long arg0) -> float &

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULLF_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """
        GetElement(itkMapContainerULLF self, unsigned long long arg0) -> float

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULLF_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """
        SetElement(itkMapContainerULLF self, unsigned long long arg0, float arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLF_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """
        InsertElement(itkMapContainerULLF self, unsigned long long arg0, float arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLF_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """
        IndexExists(itkMapContainerULLF self, unsigned long long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULLF_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """
        GetElementIfIndexExists(itkMapContainerULLF self, unsigned long long arg0, float * arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULLF_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """
        CreateIndex(itkMapContainerULLF self, unsigned long long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULLF_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """
        DeleteIndex(itkMapContainerULLF self, unsigned long long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULLF_DeleteIndex(self, arg0)


    def Size(self):
        """
        Size(itkMapContainerULLF self) -> unsigned long long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULLF_Size(self)


    def Reserve(self, arg0):
        """
        Reserve(itkMapContainerULLF self, unsigned long long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULLF_Reserve(self, arg0)


    def Squeeze(self):
        """
        Squeeze(itkMapContainerULLF self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULLF_Squeeze(self)


    def Initialize(self):
        """
        Initialize(itkMapContainerULLF self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULLF_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLF

    def cast(obj):
        """cast(itkLightObject obj) -> itkMapContainerULLF"""
        return _itkMapContainerPython.itkMapContainerULLF_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkMapContainerULLF self) -> itkMapContainerULLF"""
        return _itkMapContainerPython.itkMapContainerULLF_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkMapContainerULLF

        Create a new object of the class itkMapContainerULLF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULLF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULLF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULLF.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_Clone, None, itkMapContainerULLF)
itkMapContainerULLF.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_CastToSTLContainer, None, itkMapContainerULLF)
itkMapContainerULLF.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_CastToSTLConstContainer, None, itkMapContainerULLF)
itkMapContainerULLF.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_ElementAt, None, itkMapContainerULLF)
itkMapContainerULLF.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_CreateElementAt, None, itkMapContainerULLF)
itkMapContainerULLF.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_GetElement, None, itkMapContainerULLF)
itkMapContainerULLF.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_SetElement, None, itkMapContainerULLF)
itkMapContainerULLF.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_InsertElement, None, itkMapContainerULLF)
itkMapContainerULLF.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_IndexExists, None, itkMapContainerULLF)
itkMapContainerULLF.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_GetElementIfIndexExists, None, itkMapContainerULLF)
itkMapContainerULLF.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_CreateIndex, None, itkMapContainerULLF)
itkMapContainerULLF.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_DeleteIndex, None, itkMapContainerULLF)
itkMapContainerULLF.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_Size, None, itkMapContainerULLF)
itkMapContainerULLF.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_Reserve, None, itkMapContainerULLF)
itkMapContainerULLF.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_Squeeze, None, itkMapContainerULLF)
itkMapContainerULLF.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_Initialize, None, itkMapContainerULLF)
itkMapContainerULLF.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLF_GetPointer, None, itkMapContainerULLF)
itkMapContainerULLF_swigregister = _itkMapContainerPython.itkMapContainerULLF_swigregister
itkMapContainerULLF_swigregister(itkMapContainerULLF)

def itkMapContainerULLF___New_orig__():
    """itkMapContainerULLF___New_orig__() -> itkMapContainerULLF_Pointer"""
    return _itkMapContainerPython.itkMapContainerULLF___New_orig__()

def itkMapContainerULLF_cast(obj):
    """itkMapContainerULLF_cast(itkLightObject obj) -> itkMapContainerULLF"""
    return _itkMapContainerPython.itkMapContainerULLF_cast(obj)

class itkMapContainerULLPD2(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULLPD2 self) -> itkMapContainerULLPD2
        __init__(itkMapContainerULLPD2 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLPD2



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULLPD2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLPD2(*args))

    def __New_orig__():
        """__New_orig__() -> itkMapContainerULLPD2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkMapContainerULLPD2 self) -> itkMapContainerULLPD2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPD2_Clone(self)


    def CastToSTLContainer(self):
        """
        CastToSTLContainer(itkMapContainerULLPD2 self) -> std::map< unsigned long long,itkPointD2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointD2 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLPD2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """
        CastToSTLConstContainer(itkMapContainerULLPD2 self) -> std::map< unsigned long long,itkPointD2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointD2 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLPD2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkMapContainerULLPD2 self, unsigned long long arg0) -> itkPointD2
        ElementAt(itkMapContainerULLPD2 self, unsigned long long arg0) -> itkPointD2

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """
        CreateElementAt(itkMapContainerULLPD2 self, unsigned long long arg0) -> itkPointD2

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """
        GetElement(itkMapContainerULLPD2 self, unsigned long long arg0) -> itkPointD2

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """
        SetElement(itkMapContainerULLPD2 self, unsigned long long arg0, itkPointD2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """
        InsertElement(itkMapContainerULLPD2 self, unsigned long long arg0, itkPointD2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """
        IndexExists(itkMapContainerULLPD2 self, unsigned long long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """
        GetElementIfIndexExists(itkMapContainerULLPD2 self, unsigned long long arg0, itkPointD2 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """
        CreateIndex(itkMapContainerULLPD2 self, unsigned long long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """
        DeleteIndex(itkMapContainerULLPD2 self, unsigned long long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD2_DeleteIndex(self, arg0)


    def Size(self):
        """
        Size(itkMapContainerULLPD2 self) -> unsigned long long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD2_Size(self)


    def Reserve(self, arg0):
        """
        Reserve(itkMapContainerULLPD2 self, unsigned long long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD2_Reserve(self, arg0)


    def Squeeze(self):
        """
        Squeeze(itkMapContainerULLPD2 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD2_Squeeze(self)


    def Initialize(self):
        """
        Initialize(itkMapContainerULLPD2 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD2_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLPD2

    def cast(obj):
        """cast(itkLightObject obj) -> itkMapContainerULLPD2"""
        return _itkMapContainerPython.itkMapContainerULLPD2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkMapContainerULLPD2 self) -> itkMapContainerULLPD2"""
        return _itkMapContainerPython.itkMapContainerULLPD2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkMapContainerULLPD2

        Create a new object of the class itkMapContainerULLPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLPD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULLPD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULLPD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULLPD2.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_Clone, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_CastToSTLContainer, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_CastToSTLConstContainer, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_ElementAt, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_CreateElementAt, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_GetElement, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_SetElement, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_InsertElement, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_IndexExists, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_GetElementIfIndexExists, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_CreateIndex, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_DeleteIndex, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_Size, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_Reserve, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_Squeeze, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_Initialize, None, itkMapContainerULLPD2)
itkMapContainerULLPD2.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD2_GetPointer, None, itkMapContainerULLPD2)
itkMapContainerULLPD2_swigregister = _itkMapContainerPython.itkMapContainerULLPD2_swigregister
itkMapContainerULLPD2_swigregister(itkMapContainerULLPD2)

def itkMapContainerULLPD2___New_orig__():
    """itkMapContainerULLPD2___New_orig__() -> itkMapContainerULLPD2_Pointer"""
    return _itkMapContainerPython.itkMapContainerULLPD2___New_orig__()

def itkMapContainerULLPD2_cast(obj):
    """itkMapContainerULLPD2_cast(itkLightObject obj) -> itkMapContainerULLPD2"""
    return _itkMapContainerPython.itkMapContainerULLPD2_cast(obj)

class itkMapContainerULLPD3(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULLPD3 self) -> itkMapContainerULLPD3
        __init__(itkMapContainerULLPD3 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLPD3



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULLPD3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLPD3(*args))

    def __New_orig__():
        """__New_orig__() -> itkMapContainerULLPD3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkMapContainerULLPD3 self) -> itkMapContainerULLPD3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPD3_Clone(self)


    def CastToSTLContainer(self):
        """
        CastToSTLContainer(itkMapContainerULLPD3 self) -> std::map< unsigned long long,itkPointD3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointD3 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLPD3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """
        CastToSTLConstContainer(itkMapContainerULLPD3 self) -> std::map< unsigned long long,itkPointD3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointD3 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLPD3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkMapContainerULLPD3 self, unsigned long long arg0) -> itkPointD3
        ElementAt(itkMapContainerULLPD3 self, unsigned long long arg0) -> itkPointD3

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """
        CreateElementAt(itkMapContainerULLPD3 self, unsigned long long arg0) -> itkPointD3

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """
        GetElement(itkMapContainerULLPD3 self, unsigned long long arg0) -> itkPointD3

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """
        SetElement(itkMapContainerULLPD3 self, unsigned long long arg0, itkPointD3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """
        InsertElement(itkMapContainerULLPD3 self, unsigned long long arg0, itkPointD3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """
        IndexExists(itkMapContainerULLPD3 self, unsigned long long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """
        GetElementIfIndexExists(itkMapContainerULLPD3 self, unsigned long long arg0, itkPointD3 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """
        CreateIndex(itkMapContainerULLPD3 self, unsigned long long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """
        DeleteIndex(itkMapContainerULLPD3 self, unsigned long long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD3_DeleteIndex(self, arg0)


    def Size(self):
        """
        Size(itkMapContainerULLPD3 self) -> unsigned long long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD3_Size(self)


    def Reserve(self, arg0):
        """
        Reserve(itkMapContainerULLPD3 self, unsigned long long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD3_Reserve(self, arg0)


    def Squeeze(self):
        """
        Squeeze(itkMapContainerULLPD3 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD3_Squeeze(self)


    def Initialize(self):
        """
        Initialize(itkMapContainerULLPD3 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULLPD3_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLPD3

    def cast(obj):
        """cast(itkLightObject obj) -> itkMapContainerULLPD3"""
        return _itkMapContainerPython.itkMapContainerULLPD3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkMapContainerULLPD3 self) -> itkMapContainerULLPD3"""
        return _itkMapContainerPython.itkMapContainerULLPD3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkMapContainerULLPD3

        Create a new object of the class itkMapContainerULLPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLPD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULLPD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULLPD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULLPD3.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_Clone, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_CastToSTLContainer, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_CastToSTLConstContainer, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_ElementAt, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_CreateElementAt, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_GetElement, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_SetElement, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_InsertElement, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_IndexExists, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_GetElementIfIndexExists, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_CreateIndex, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_DeleteIndex, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_Size, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_Reserve, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_Squeeze, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_Initialize, None, itkMapContainerULLPD3)
itkMapContainerULLPD3.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPD3_GetPointer, None, itkMapContainerULLPD3)
itkMapContainerULLPD3_swigregister = _itkMapContainerPython.itkMapContainerULLPD3_swigregister
itkMapContainerULLPD3_swigregister(itkMapContainerULLPD3)

def itkMapContainerULLPD3___New_orig__():
    """itkMapContainerULLPD3___New_orig__() -> itkMapContainerULLPD3_Pointer"""
    return _itkMapContainerPython.itkMapContainerULLPD3___New_orig__()

def itkMapContainerULLPD3_cast(obj):
    """itkMapContainerULLPD3_cast(itkLightObject obj) -> itkMapContainerULLPD3"""
    return _itkMapContainerPython.itkMapContainerULLPD3_cast(obj)

class itkMapContainerULLPF2(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULLPF2 self) -> itkMapContainerULLPF2
        __init__(itkMapContainerULLPF2 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLPF2



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULLPF2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLPF2(*args))

    def __New_orig__():
        """__New_orig__() -> itkMapContainerULLPF2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkMapContainerULLPF2 self) -> itkMapContainerULLPF2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPF2_Clone(self)


    def CastToSTLContainer(self):
        """
        CastToSTLContainer(itkMapContainerULLPF2 self) -> std::map< unsigned long long,itkPointF2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointF2 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLPF2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """
        CastToSTLConstContainer(itkMapContainerULLPF2 self) -> std::map< unsigned long long,itkPointF2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointF2 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLPF2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkMapContainerULLPF2 self, unsigned long long arg0) -> itkPointF2
        ElementAt(itkMapContainerULLPF2 self, unsigned long long arg0) -> itkPointF2

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """
        CreateElementAt(itkMapContainerULLPF2 self, unsigned long long arg0) -> itkPointF2

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """
        GetElement(itkMapContainerULLPF2 self, unsigned long long arg0) -> itkPointF2

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """
        SetElement(itkMapContainerULLPF2 self, unsigned long long arg0, itkPointF2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """
        InsertElement(itkMapContainerULLPF2 self, unsigned long long arg0, itkPointF2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """
        IndexExists(itkMapContainerULLPF2 self, unsigned long long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """
        GetElementIfIndexExists(itkMapContainerULLPF2 self, unsigned long long arg0, itkPointF2 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """
        CreateIndex(itkMapContainerULLPF2 self, unsigned long long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """
        DeleteIndex(itkMapContainerULLPF2 self, unsigned long long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF2_DeleteIndex(self, arg0)


    def Size(self):
        """
        Size(itkMapContainerULLPF2 self) -> unsigned long long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF2_Size(self)


    def Reserve(self, arg0):
        """
        Reserve(itkMapContainerULLPF2 self, unsigned long long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF2_Reserve(self, arg0)


    def Squeeze(self):
        """
        Squeeze(itkMapContainerULLPF2 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF2_Squeeze(self)


    def Initialize(self):
        """
        Initialize(itkMapContainerULLPF2 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF2_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLPF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkMapContainerULLPF2"""
        return _itkMapContainerPython.itkMapContainerULLPF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkMapContainerULLPF2 self) -> itkMapContainerULLPF2"""
        return _itkMapContainerPython.itkMapContainerULLPF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkMapContainerULLPF2

        Create a new object of the class itkMapContainerULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLPF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULLPF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULLPF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULLPF2.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_Clone, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_CastToSTLContainer, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_CastToSTLConstContainer, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_ElementAt, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_CreateElementAt, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_GetElement, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_SetElement, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_InsertElement, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_IndexExists, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_GetElementIfIndexExists, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_CreateIndex, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_DeleteIndex, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_Size, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_Reserve, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_Squeeze, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_Initialize, None, itkMapContainerULLPF2)
itkMapContainerULLPF2.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF2_GetPointer, None, itkMapContainerULLPF2)
itkMapContainerULLPF2_swigregister = _itkMapContainerPython.itkMapContainerULLPF2_swigregister
itkMapContainerULLPF2_swigregister(itkMapContainerULLPF2)

def itkMapContainerULLPF2___New_orig__():
    """itkMapContainerULLPF2___New_orig__() -> itkMapContainerULLPF2_Pointer"""
    return _itkMapContainerPython.itkMapContainerULLPF2___New_orig__()

def itkMapContainerULLPF2_cast(obj):
    """itkMapContainerULLPF2_cast(itkLightObject obj) -> itkMapContainerULLPF2"""
    return _itkMapContainerPython.itkMapContainerULLPF2_cast(obj)

class itkMapContainerULLPF3(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULLPF3 self) -> itkMapContainerULLPF3
        __init__(itkMapContainerULLPF3 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLPF3



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULLPF3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLPF3(*args))

    def __New_orig__():
        """__New_orig__() -> itkMapContainerULLPF3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkMapContainerULLPF3 self) -> itkMapContainerULLPF3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLPF3_Clone(self)


    def CastToSTLContainer(self):
        """
        CastToSTLContainer(itkMapContainerULLPF3 self) -> std::map< unsigned long long,itkPointF3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointF3 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLPF3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """
        CastToSTLConstContainer(itkMapContainerULLPF3 self) -> std::map< unsigned long long,itkPointF3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkPointF3 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLPF3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkMapContainerULLPF3 self, unsigned long long arg0) -> itkPointF3
        ElementAt(itkMapContainerULLPF3 self, unsigned long long arg0) -> itkPointF3

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """
        CreateElementAt(itkMapContainerULLPF3 self, unsigned long long arg0) -> itkPointF3

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """
        GetElement(itkMapContainerULLPF3 self, unsigned long long arg0) -> itkPointF3

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """
        SetElement(itkMapContainerULLPF3 self, unsigned long long arg0, itkPointF3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """
        InsertElement(itkMapContainerULLPF3 self, unsigned long long arg0, itkPointF3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """
        IndexExists(itkMapContainerULLPF3 self, unsigned long long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """
        GetElementIfIndexExists(itkMapContainerULLPF3 self, unsigned long long arg0, itkPointF3 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """
        CreateIndex(itkMapContainerULLPF3 self, unsigned long long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """
        DeleteIndex(itkMapContainerULLPF3 self, unsigned long long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF3_DeleteIndex(self, arg0)


    def Size(self):
        """
        Size(itkMapContainerULLPF3 self) -> unsigned long long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF3_Size(self)


    def Reserve(self, arg0):
        """
        Reserve(itkMapContainerULLPF3 self, unsigned long long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF3_Reserve(self, arg0)


    def Squeeze(self):
        """
        Squeeze(itkMapContainerULLPF3 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF3_Squeeze(self)


    def Initialize(self):
        """
        Initialize(itkMapContainerULLPF3 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULLPF3_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLPF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkMapContainerULLPF3"""
        return _itkMapContainerPython.itkMapContainerULLPF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkMapContainerULLPF3 self) -> itkMapContainerULLPF3"""
        return _itkMapContainerPython.itkMapContainerULLPF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkMapContainerULLPF3

        Create a new object of the class itkMapContainerULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLPF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULLPF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULLPF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULLPF3.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_Clone, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_CastToSTLContainer, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_CastToSTLConstContainer, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_ElementAt, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_CreateElementAt, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_GetElement, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_SetElement, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_InsertElement, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_IndexExists, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_GetElementIfIndexExists, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_CreateIndex, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_DeleteIndex, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_Size, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_Reserve, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_Squeeze, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_Initialize, None, itkMapContainerULLPF3)
itkMapContainerULLPF3.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLPF3_GetPointer, None, itkMapContainerULLPF3)
itkMapContainerULLPF3_swigregister = _itkMapContainerPython.itkMapContainerULLPF3_swigregister
itkMapContainerULLPF3_swigregister(itkMapContainerULLPF3)

def itkMapContainerULLPF3___New_orig__():
    """itkMapContainerULLPF3___New_orig__() -> itkMapContainerULLPF3_Pointer"""
    return _itkMapContainerPython.itkMapContainerULLPF3___New_orig__()

def itkMapContainerULLPF3_cast(obj):
    """itkMapContainerULLPF3_cast(itkLightObject obj) -> itkMapContainerULLPF3"""
    return _itkMapContainerPython.itkMapContainerULLPF3_cast(obj)

class itkMapContainerULLSIT(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULLSIT self) -> itkMapContainerULLSIT
        __init__(itkMapContainerULLSIT self, std::less< unsigned long long > const & comp) -> itkMapContainerULLSIT



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULLSIT_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLSIT(*args))

    def __New_orig__():
        """__New_orig__() -> itkMapContainerULLSIT_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLSIT___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkMapContainerULLSIT self) -> itkMapContainerULLSIT_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLSIT_Clone(self)


    def CastToSTLContainer(self):
        """
        CastToSTLContainer(itkMapContainerULLSIT self) -> std::map< unsigned long long,std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > >,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > > > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLSIT_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """
        CastToSTLConstContainer(itkMapContainerULLSIT self) -> std::map< unsigned long long,std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > >,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,std::set< unsigned long long,std::less< unsigned long long >,std::allocator< unsigned long long > > > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLSIT_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkMapContainerULLSIT self, unsigned long long arg0) -> setULL
        ElementAt(itkMapContainerULLSIT self, unsigned long long arg0) -> setULL

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULLSIT_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """
        CreateElementAt(itkMapContainerULLSIT self, unsigned long long arg0) -> setULL

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULLSIT_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """
        GetElement(itkMapContainerULLSIT self, unsigned long long arg0) -> setULL

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULLSIT_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """
        SetElement(itkMapContainerULLSIT self, unsigned long long arg0, setULL arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLSIT_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """
        InsertElement(itkMapContainerULLSIT self, unsigned long long arg0, setULL arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLSIT_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """
        IndexExists(itkMapContainerULLSIT self, unsigned long long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULLSIT_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """
        GetElementIfIndexExists(itkMapContainerULLSIT self, unsigned long long arg0, setULL arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULLSIT_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """
        CreateIndex(itkMapContainerULLSIT self, unsigned long long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULLSIT_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """
        DeleteIndex(itkMapContainerULLSIT self, unsigned long long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULLSIT_DeleteIndex(self, arg0)


    def Size(self):
        """
        Size(itkMapContainerULLSIT self) -> unsigned long long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULLSIT_Size(self)


    def Reserve(self, arg0):
        """
        Reserve(itkMapContainerULLSIT self, unsigned long long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULLSIT_Reserve(self, arg0)


    def Squeeze(self):
        """
        Squeeze(itkMapContainerULLSIT self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULLSIT_Squeeze(self)


    def Initialize(self):
        """
        Initialize(itkMapContainerULLSIT self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULLSIT_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLSIT

    def cast(obj):
        """cast(itkLightObject obj) -> itkMapContainerULLSIT"""
        return _itkMapContainerPython.itkMapContainerULLSIT_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkMapContainerULLSIT self) -> itkMapContainerULLSIT"""
        return _itkMapContainerPython.itkMapContainerULLSIT_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkMapContainerULLSIT

        Create a new object of the class itkMapContainerULLSIT and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLSIT.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULLSIT.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULLSIT.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULLSIT.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_Clone, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_CastToSTLContainer, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_CastToSTLConstContainer, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_ElementAt, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_CreateElementAt, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_GetElement, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_SetElement, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_InsertElement, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_IndexExists, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_GetElementIfIndexExists, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_CreateIndex, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_DeleteIndex, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_Size, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_Reserve, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_Squeeze, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_Initialize, None, itkMapContainerULLSIT)
itkMapContainerULLSIT.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLSIT_GetPointer, None, itkMapContainerULLSIT)
itkMapContainerULLSIT_swigregister = _itkMapContainerPython.itkMapContainerULLSIT_swigregister
itkMapContainerULLSIT_swigregister(itkMapContainerULLSIT)

def itkMapContainerULLSIT___New_orig__():
    """itkMapContainerULLSIT___New_orig__() -> itkMapContainerULLSIT_Pointer"""
    return _itkMapContainerPython.itkMapContainerULLSIT___New_orig__()

def itkMapContainerULLSIT_cast(obj):
    """itkMapContainerULLSIT_cast(itkLightObject obj) -> itkMapContainerULLSIT"""
    return _itkMapContainerPython.itkMapContainerULLSIT_cast(obj)

class itkMapContainerULLVD2(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULLVD2 self) -> itkMapContainerULLVD2
        __init__(itkMapContainerULLVD2 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLVD2



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULLVD2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLVD2(*args))

    def __New_orig__():
        """__New_orig__() -> itkMapContainerULLVD2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkMapContainerULLVD2 self) -> itkMapContainerULLVD2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVD2_Clone(self)


    def CastToSTLContainer(self):
        """
        CastToSTLContainer(itkMapContainerULLVD2 self) -> std::map< unsigned long long,itkVectorD2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorD2 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLVD2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """
        CastToSTLConstContainer(itkMapContainerULLVD2 self) -> std::map< unsigned long long,itkVectorD2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorD2 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLVD2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkMapContainerULLVD2 self, unsigned long long arg0) -> itkVectorD2
        ElementAt(itkMapContainerULLVD2 self, unsigned long long arg0) -> itkVectorD2

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """
        CreateElementAt(itkMapContainerULLVD2 self, unsigned long long arg0) -> itkVectorD2

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """
        GetElement(itkMapContainerULLVD2 self, unsigned long long arg0) -> itkVectorD2

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """
        SetElement(itkMapContainerULLVD2 self, unsigned long long arg0, itkVectorD2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """
        InsertElement(itkMapContainerULLVD2 self, unsigned long long arg0, itkVectorD2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """
        IndexExists(itkMapContainerULLVD2 self, unsigned long long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """
        GetElementIfIndexExists(itkMapContainerULLVD2 self, unsigned long long arg0, itkVectorD2 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """
        CreateIndex(itkMapContainerULLVD2 self, unsigned long long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """
        DeleteIndex(itkMapContainerULLVD2 self, unsigned long long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD2_DeleteIndex(self, arg0)


    def Size(self):
        """
        Size(itkMapContainerULLVD2 self) -> unsigned long long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD2_Size(self)


    def Reserve(self, arg0):
        """
        Reserve(itkMapContainerULLVD2 self, unsigned long long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD2_Reserve(self, arg0)


    def Squeeze(self):
        """
        Squeeze(itkMapContainerULLVD2 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD2_Squeeze(self)


    def Initialize(self):
        """
        Initialize(itkMapContainerULLVD2 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD2_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLVD2

    def cast(obj):
        """cast(itkLightObject obj) -> itkMapContainerULLVD2"""
        return _itkMapContainerPython.itkMapContainerULLVD2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkMapContainerULLVD2 self) -> itkMapContainerULLVD2"""
        return _itkMapContainerPython.itkMapContainerULLVD2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkMapContainerULLVD2

        Create a new object of the class itkMapContainerULLVD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLVD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULLVD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULLVD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULLVD2.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_Clone, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_CastToSTLContainer, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_CastToSTLConstContainer, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_ElementAt, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_CreateElementAt, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_GetElement, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_SetElement, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_InsertElement, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_IndexExists, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_GetElementIfIndexExists, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_CreateIndex, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_DeleteIndex, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_Size, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_Reserve, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_Squeeze, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_Initialize, None, itkMapContainerULLVD2)
itkMapContainerULLVD2.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD2_GetPointer, None, itkMapContainerULLVD2)
itkMapContainerULLVD2_swigregister = _itkMapContainerPython.itkMapContainerULLVD2_swigregister
itkMapContainerULLVD2_swigregister(itkMapContainerULLVD2)

def itkMapContainerULLVD2___New_orig__():
    """itkMapContainerULLVD2___New_orig__() -> itkMapContainerULLVD2_Pointer"""
    return _itkMapContainerPython.itkMapContainerULLVD2___New_orig__()

def itkMapContainerULLVD2_cast(obj):
    """itkMapContainerULLVD2_cast(itkLightObject obj) -> itkMapContainerULLVD2"""
    return _itkMapContainerPython.itkMapContainerULLVD2_cast(obj)

class itkMapContainerULLVD3(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULLVD3 self) -> itkMapContainerULLVD3
        __init__(itkMapContainerULLVD3 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLVD3



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULLVD3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLVD3(*args))

    def __New_orig__():
        """__New_orig__() -> itkMapContainerULLVD3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkMapContainerULLVD3 self) -> itkMapContainerULLVD3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVD3_Clone(self)


    def CastToSTLContainer(self):
        """
        CastToSTLContainer(itkMapContainerULLVD3 self) -> std::map< unsigned long long,itkVectorD3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorD3 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLVD3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """
        CastToSTLConstContainer(itkMapContainerULLVD3 self) -> std::map< unsigned long long,itkVectorD3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorD3 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLVD3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkMapContainerULLVD3 self, unsigned long long arg0) -> itkVectorD3
        ElementAt(itkMapContainerULLVD3 self, unsigned long long arg0) -> itkVectorD3

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """
        CreateElementAt(itkMapContainerULLVD3 self, unsigned long long arg0) -> itkVectorD3

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """
        GetElement(itkMapContainerULLVD3 self, unsigned long long arg0) -> itkVectorD3

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """
        SetElement(itkMapContainerULLVD3 self, unsigned long long arg0, itkVectorD3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """
        InsertElement(itkMapContainerULLVD3 self, unsigned long long arg0, itkVectorD3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """
        IndexExists(itkMapContainerULLVD3 self, unsigned long long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """
        GetElementIfIndexExists(itkMapContainerULLVD3 self, unsigned long long arg0, itkVectorD3 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """
        CreateIndex(itkMapContainerULLVD3 self, unsigned long long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """
        DeleteIndex(itkMapContainerULLVD3 self, unsigned long long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD3_DeleteIndex(self, arg0)


    def Size(self):
        """
        Size(itkMapContainerULLVD3 self) -> unsigned long long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD3_Size(self)


    def Reserve(self, arg0):
        """
        Reserve(itkMapContainerULLVD3 self, unsigned long long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD3_Reserve(self, arg0)


    def Squeeze(self):
        """
        Squeeze(itkMapContainerULLVD3 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD3_Squeeze(self)


    def Initialize(self):
        """
        Initialize(itkMapContainerULLVD3 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULLVD3_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLVD3

    def cast(obj):
        """cast(itkLightObject obj) -> itkMapContainerULLVD3"""
        return _itkMapContainerPython.itkMapContainerULLVD3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkMapContainerULLVD3 self) -> itkMapContainerULLVD3"""
        return _itkMapContainerPython.itkMapContainerULLVD3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkMapContainerULLVD3

        Create a new object of the class itkMapContainerULLVD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLVD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULLVD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULLVD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULLVD3.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_Clone, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_CastToSTLContainer, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_CastToSTLConstContainer, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_ElementAt, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_CreateElementAt, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_GetElement, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_SetElement, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_InsertElement, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_IndexExists, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_GetElementIfIndexExists, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_CreateIndex, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_DeleteIndex, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_Size, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_Reserve, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_Squeeze, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_Initialize, None, itkMapContainerULLVD3)
itkMapContainerULLVD3.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVD3_GetPointer, None, itkMapContainerULLVD3)
itkMapContainerULLVD3_swigregister = _itkMapContainerPython.itkMapContainerULLVD3_swigregister
itkMapContainerULLVD3_swigregister(itkMapContainerULLVD3)

def itkMapContainerULLVD3___New_orig__():
    """itkMapContainerULLVD3___New_orig__() -> itkMapContainerULLVD3_Pointer"""
    return _itkMapContainerPython.itkMapContainerULLVD3___New_orig__()

def itkMapContainerULLVD3_cast(obj):
    """itkMapContainerULLVD3_cast(itkLightObject obj) -> itkMapContainerULLVD3"""
    return _itkMapContainerPython.itkMapContainerULLVD3_cast(obj)

class itkMapContainerULLVF2(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULLVF2 self) -> itkMapContainerULLVF2
        __init__(itkMapContainerULLVF2 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLVF2



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULLVF2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLVF2(*args))

    def __New_orig__():
        """__New_orig__() -> itkMapContainerULLVF2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkMapContainerULLVF2 self) -> itkMapContainerULLVF2_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVF2_Clone(self)


    def CastToSTLContainer(self):
        """
        CastToSTLContainer(itkMapContainerULLVF2 self) -> std::map< unsigned long long,itkVectorF2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorF2 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLVF2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """
        CastToSTLConstContainer(itkMapContainerULLVF2 self) -> std::map< unsigned long long,itkVectorF2,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorF2 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLVF2_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkMapContainerULLVF2 self, unsigned long long arg0) -> itkVectorF2
        ElementAt(itkMapContainerULLVF2 self, unsigned long long arg0) -> itkVectorF2

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF2_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """
        CreateElementAt(itkMapContainerULLVF2 self, unsigned long long arg0) -> itkVectorF2

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF2_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """
        GetElement(itkMapContainerULLVF2 self, unsigned long long arg0) -> itkVectorF2

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF2_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """
        SetElement(itkMapContainerULLVF2 self, unsigned long long arg0, itkVectorF2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """
        InsertElement(itkMapContainerULLVF2 self, unsigned long long arg0, itkVectorF2 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """
        IndexExists(itkMapContainerULLVF2 self, unsigned long long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """
        GetElementIfIndexExists(itkMapContainerULLVF2 self, unsigned long long arg0, itkVectorF2 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """
        CreateIndex(itkMapContainerULLVF2 self, unsigned long long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """
        DeleteIndex(itkMapContainerULLVF2 self, unsigned long long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF2_DeleteIndex(self, arg0)


    def Size(self):
        """
        Size(itkMapContainerULLVF2 self) -> unsigned long long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF2_Size(self)


    def Reserve(self, arg0):
        """
        Reserve(itkMapContainerULLVF2 self, unsigned long long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF2_Reserve(self, arg0)


    def Squeeze(self):
        """
        Squeeze(itkMapContainerULLVF2 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF2_Squeeze(self)


    def Initialize(self):
        """
        Initialize(itkMapContainerULLVF2 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF2_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLVF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkMapContainerULLVF2"""
        return _itkMapContainerPython.itkMapContainerULLVF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkMapContainerULLVF2 self) -> itkMapContainerULLVF2"""
        return _itkMapContainerPython.itkMapContainerULLVF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkMapContainerULLVF2

        Create a new object of the class itkMapContainerULLVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLVF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULLVF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULLVF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULLVF2.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_Clone, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_CastToSTLContainer, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_CastToSTLConstContainer, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_ElementAt, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_CreateElementAt, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_GetElement, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_SetElement, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_InsertElement, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_IndexExists, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_GetElementIfIndexExists, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_CreateIndex, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_DeleteIndex, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_Size, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_Reserve, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_Squeeze, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_Initialize, None, itkMapContainerULLVF2)
itkMapContainerULLVF2.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF2_GetPointer, None, itkMapContainerULLVF2)
itkMapContainerULLVF2_swigregister = _itkMapContainerPython.itkMapContainerULLVF2_swigregister
itkMapContainerULLVF2_swigregister(itkMapContainerULLVF2)

def itkMapContainerULLVF2___New_orig__():
    """itkMapContainerULLVF2___New_orig__() -> itkMapContainerULLVF2_Pointer"""
    return _itkMapContainerPython.itkMapContainerULLVF2___New_orig__()

def itkMapContainerULLVF2_cast(obj):
    """itkMapContainerULLVF2_cast(itkLightObject obj) -> itkMapContainerULLVF2"""
    return _itkMapContainerPython.itkMapContainerULLVF2_cast(obj)

class itkMapContainerULLVF3(ITKCommonBasePython.itkObject):
    """


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container.

    C++ includes: itkMapContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkMapContainerULLVF3 self) -> itkMapContainerULLVF3
        __init__(itkMapContainerULLVF3 self, std::less< unsigned long long > const & comp) -> itkMapContainerULLVF3



        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container.

        C++ includes: itkMapContainer.h 
        """
        _itkMapContainerPython.itkMapContainerULLVF3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULLVF3(*args))

    def __New_orig__():
        """__New_orig__() -> itkMapContainerULLVF3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkMapContainerULLVF3 self) -> itkMapContainerULLVF3_Pointer"""
        return _itkMapContainerPython.itkMapContainerULLVF3_Clone(self)


    def CastToSTLContainer(self):
        """
        CastToSTLContainer(itkMapContainerULLVF3 self) -> std::map< unsigned long long,itkVectorF3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorF3 > > > &

        Cast the
        container to a STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLVF3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self):
        """
        CastToSTLConstContainer(itkMapContainerULLVF3 self) -> std::map< unsigned long long,itkVectorF3,std::less< unsigned long long >,std::allocator< std::pair< unsigned long long const,itkVectorF3 > > > const &

        Cast the
        container to a const STL container type 
        """
        return _itkMapContainerPython.itkMapContainerULLVF3_CastToSTLConstContainer(self)


    def ElementAt(self, *args):
        """
        ElementAt(itkMapContainerULLVF3 self, unsigned long long arg0) -> itkVectorF3
        ElementAt(itkMapContainerULLVF3 self, unsigned long long arg0) -> itkVectorF3

        Get a reference to the
        element at the given index. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF3_ElementAt(self, *args)


    def CreateElementAt(self, arg0):
        """
        CreateElementAt(itkMapContainerULLVF3 self, unsigned long long arg0) -> itkVectorF3

        Get a reference to
        the element at the given index. If the index does not exist, it is
        created automatically.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF3_CreateElementAt(self, arg0)


    def GetElement(self, arg0):
        """
        GetElement(itkMapContainerULLVF3 self, unsigned long long arg0) -> itkVectorF3

        Get the element at the
        specified index. There is no check for existence performed. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF3_GetElement(self, arg0)


    def SetElement(self, arg0, arg1):
        """
        SetElement(itkMapContainerULLVF3 self, unsigned long long arg0, itkVectorF3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0, arg1):
        """
        InsertElement(itkMapContainerULLVF3 self, unsigned long long arg0, itkVectorF3 arg1)

        Set the given index
        value to the given element. If the index doesn't exist, it is
        automatically created. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0):
        """
        IndexExists(itkMapContainerULLVF3 self, unsigned long long arg0) -> bool

        Check if the STL map
        has an entry corresponding to the given index. The count will be
        either 1 or 0. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0, arg1):
        """
        GetElementIfIndexExists(itkMapContainerULLVF3 self, unsigned long long arg0, itkVectorF3 arg1) -> bool

        If the
        given index doesn't exist in the map, return false. Otherwise, set the
        element through the pointer (if it isn't null), and return true. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0):
        """
        CreateIndex(itkMapContainerULLVF3 self, unsigned long long arg0)

        The map will create an
        entry for a given index through the indexing operator. Whether or not
        it is created, it will be assigned to the default element. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0):
        """
        DeleteIndex(itkMapContainerULLVF3 self, unsigned long long arg0)

        Delete the entry in the
        STL map corresponding to the given identifier. If the entry does not
        exist, nothing happens. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF3_DeleteIndex(self, arg0)


    def Size(self):
        """
        Size(itkMapContainerULLVF3 self) -> unsigned long long

        Get the number of elements
        currently stored in the map. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF3_Size(self)


    def Reserve(self, arg0):
        """
        Reserve(itkMapContainerULLVF3 self, unsigned long long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. This is NOT guaranteed to actually allocate any
        memory, but is useful if the implementation of the container allocates
        contiguous storage. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF3_Reserve(self, arg0)


    def Squeeze(self):
        """
        Squeeze(itkMapContainerULLVF3 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF3_Squeeze(self)


    def Initialize(self):
        """
        Initialize(itkMapContainerULLVF3 self)

        Tell the container to
        release any memory it may have allocated and return itself to its
        initial state. 
        """
        return _itkMapContainerPython.itkMapContainerULLVF3_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULLVF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkMapContainerULLVF3"""
        return _itkMapContainerPython.itkMapContainerULLVF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkMapContainerULLVF3 self) -> itkMapContainerULLVF3"""
        return _itkMapContainerPython.itkMapContainerULLVF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkMapContainerULLVF3

        Create a new object of the class itkMapContainerULLVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULLVF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMapContainerULLVF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULLVF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULLVF3.Clone = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_Clone, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_CastToSTLContainer, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_CastToSTLConstContainer, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_ElementAt, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_CreateElementAt, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_GetElement, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_SetElement, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_InsertElement, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_IndexExists, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_GetElementIfIndexExists, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_CreateIndex, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_DeleteIndex, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_Size, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_Reserve, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_Squeeze, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_Initialize, None, itkMapContainerULLVF3)
itkMapContainerULLVF3.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULLVF3_GetPointer, None, itkMapContainerULLVF3)
itkMapContainerULLVF3_swigregister = _itkMapContainerPython.itkMapContainerULLVF3_swigregister
itkMapContainerULLVF3_swigregister(itkMapContainerULLVF3)

def itkMapContainerULLVF3___New_orig__():
    """itkMapContainerULLVF3___New_orig__() -> itkMapContainerULLVF3_Pointer"""
    return _itkMapContainerPython.itkMapContainerULLVF3___New_orig__()

def itkMapContainerULLVF3_cast(obj):
    """itkMapContainerULLVF3_cast(itkLightObject obj) -> itkMapContainerULLVF3"""
    return _itkMapContainerPython.itkMapContainerULLVF3_cast(obj)



