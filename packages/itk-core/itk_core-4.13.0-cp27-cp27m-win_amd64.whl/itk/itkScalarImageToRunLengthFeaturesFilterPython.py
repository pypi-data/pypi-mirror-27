# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkScalarImageToRunLengthFeaturesFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_itkScalarImageToRunLengthFeaturesFilterPython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_itkScalarImageToRunLengthFeaturesFilterPython')
    _itkScalarImageToRunLengthFeaturesFilterPython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkScalarImageToRunLengthFeaturesFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkScalarImageToRunLengthFeaturesFilterPython
            return _itkScalarImageToRunLengthFeaturesFilterPython
        try:
            _mod = imp.load_module('_itkScalarImageToRunLengthFeaturesFilterPython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _itkScalarImageToRunLengthFeaturesFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkScalarImageToRunLengthFeaturesFilterPython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import stdcomplexPython
import pyBasePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkVectorContainerPython
import itkContinuousIndexPython

def itkScalarImageToRunLengthFeaturesFilterIF3_New():
  return itkScalarImageToRunLengthFeaturesFilterIF3.New()


def itkScalarImageToRunLengthFeaturesFilterIF2_New():
  return itkScalarImageToRunLengthFeaturesFilterIF2.New()


def itkScalarImageToRunLengthFeaturesFilterIUC3_New():
  return itkScalarImageToRunLengthFeaturesFilterIUC3.New()


def itkScalarImageToRunLengthFeaturesFilterIUC2_New():
  return itkScalarImageToRunLengthFeaturesFilterIUC2.New()


def itkScalarImageToRunLengthFeaturesFilterISS3_New():
  return itkScalarImageToRunLengthFeaturesFilterISS3.New()


def itkScalarImageToRunLengthFeaturesFilterISS2_New():
  return itkScalarImageToRunLengthFeaturesFilterISS2.New()

class itkScalarImageToRunLengthFeaturesFilterIF2(ITKCommonBasePython.itkProcessObject):
    """


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthFeaturesFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkScalarImageToRunLengthFeaturesFilterIF2_Pointer"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkScalarImageToRunLengthFeaturesFilterIF2 self) -> itkScalarImageToRunLengthFeaturesFilterIF2_Pointer"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_Clone(self)


    def GetFeatureMeansOutput(self):
        """GetFeatureMeansOutput(itkScalarImageToRunLengthFeaturesFilterIF2 self) -> itkDataObjectDecoratorVCUCD"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetFeatureMeansOutput(self)


    def GetFeatureStandardDeviationsOutput(self):
        """GetFeatureStandardDeviationsOutput(itkScalarImageToRunLengthFeaturesFilterIF2 self) -> itkDataObjectDecoratorVCUCD"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetFeatureStandardDeviationsOutput(self)


    def SetInput(self, arg0):
        """SetInput(itkScalarImageToRunLengthFeaturesFilterIF2 self, itkImageF2 arg0)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetInput(self, arg0)


    def GetInput(self):
        """GetInput(itkScalarImageToRunLengthFeaturesFilterIF2 self) -> itkImageF2"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetInput(self)


    def GetFeatureMeans(self):
        """
        GetFeatureMeans(itkScalarImageToRunLengthFeaturesFilterIF2 self) -> itkVectorContainerUCD_Pointer const &

        Return the feature
        means and deviations. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetFeatureMeans(self)


    def GetFeatureStandardDeviations(self):
        """GetFeatureStandardDeviations(itkScalarImageToRunLengthFeaturesFilterIF2 self) -> itkVectorContainerUCD_Pointer const &"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetFeatureStandardDeviations(self)


    def SetRequestedFeatures(self, _arg):
        """
        SetRequestedFeatures(itkScalarImageToRunLengthFeaturesFilterIF2 self, itkVectorContainerUCSS _arg)

        Set the
        desired feature set. Optional, for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetRequestedFeatures(self, _arg)


    def GetRequestedFeatures(self):
        """GetRequestedFeatures(itkScalarImageToRunLengthFeaturesFilterIF2 self) -> itkVectorContainerUCSS"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetRequestedFeatures(self)


    def SetOffsets(self, _arg):
        """
        SetOffsets(itkScalarImageToRunLengthFeaturesFilterIF2 self, itkVectorContainerUCO2 _arg)

        Set the offsets over
        which the co-occurrence pairs will be computed. Optional; for default
        value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetOffsets(self, _arg)


    def GetOffsets(self):
        """GetOffsets(itkScalarImageToRunLengthFeaturesFilterIF2 self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetOffsets(self)


    def SetNumberOfBinsPerAxis(self, arg0):
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthFeaturesFilterIF2 self, unsigned int arg0)

        Set number
        of histogram bins along each axis. Optional; for default value see
        above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetNumberOfBinsPerAxis(self, arg0)


    def SetPixelValueMinMax(self, min, max):
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthFeaturesFilterIF2 self, float min, float max)

        Set the min and
        max (inclusive) pixel value that will be used for feature
        calculations. Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetPixelValueMinMax(self, min, max)


    def SetDistanceValueMinMax(self, min, max):
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthFeaturesFilterIF2 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used for feature
        calculations. Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetDistanceValueMinMax(self, min, max)


    def SetMaskImage(self, arg0):
        """
        SetMaskImage(itkScalarImageToRunLengthFeaturesFilterIF2 self, itkImageF2 arg0)

        Connects the mask
        image for which the histogram is going to be computed. Optional; for
        default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetMaskImage(self, arg0)


    def GetMaskImage(self):
        """GetMaskImage(itkScalarImageToRunLengthFeaturesFilterIF2 self) -> itkImageF2"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetMaskImage(self)


    def SetInsidePixelValue(self, InsidePixelValue):
        """
        SetInsidePixelValue(itkScalarImageToRunLengthFeaturesFilterIF2 self, float InsidePixelValue)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetInsidePixelValue(self, InsidePixelValue)


    def GetFastCalculations(self):
        """GetFastCalculations(itkScalarImageToRunLengthFeaturesFilterIF2 self) -> bool"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetFastCalculations(self)


    def SetFastCalculations(self, _arg):
        """SetFastCalculations(itkScalarImageToRunLengthFeaturesFilterIF2 self, bool const _arg)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetFastCalculations(self, _arg)


    def FastCalculationsOn(self):
        """FastCalculationsOn(itkScalarImageToRunLengthFeaturesFilterIF2 self)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_FastCalculationsOn(self)


    def FastCalculationsOff(self):
        """FastCalculationsOff(itkScalarImageToRunLengthFeaturesFilterIF2 self)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_FastCalculationsOff(self)

    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterIF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthFeaturesFilterIF2"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkScalarImageToRunLengthFeaturesFilterIF2 self) -> itkScalarImageToRunLengthFeaturesFilterIF2"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterIF2

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthFeaturesFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthFeaturesFilterIF2.Clone = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_Clone, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.GetFeatureMeansOutput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetFeatureMeansOutput, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.GetFeatureStandardDeviationsOutput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetFeatureStandardDeviationsOutput, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.SetInput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetInput, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.GetInput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetInput, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.GetFeatureMeans = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetFeatureMeans, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.GetFeatureStandardDeviations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetFeatureStandardDeviations, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.SetRequestedFeatures = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetRequestedFeatures, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.GetRequestedFeatures = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetRequestedFeatures, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetOffsets, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetOffsets, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetPixelValueMinMax, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetDistanceValueMinMax, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetMaskImage, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetMaskImage, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetInsidePixelValue, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.GetFastCalculations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetFastCalculations, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.SetFastCalculations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_SetFastCalculations, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.FastCalculationsOn = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_FastCalculationsOn, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.FastCalculationsOff = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_FastCalculationsOff, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2.GetPointer = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_GetPointer, None, itkScalarImageToRunLengthFeaturesFilterIF2)
itkScalarImageToRunLengthFeaturesFilterIF2_swigregister = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_swigregister
itkScalarImageToRunLengthFeaturesFilterIF2_swigregister(itkScalarImageToRunLengthFeaturesFilterIF2)

def itkScalarImageToRunLengthFeaturesFilterIF2___New_orig__():
    """itkScalarImageToRunLengthFeaturesFilterIF2___New_orig__() -> itkScalarImageToRunLengthFeaturesFilterIF2_Pointer"""
    return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2___New_orig__()

def itkScalarImageToRunLengthFeaturesFilterIF2_cast(obj):
    """itkScalarImageToRunLengthFeaturesFilterIF2_cast(itkLightObject obj) -> itkScalarImageToRunLengthFeaturesFilterIF2"""
    return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF2_cast(obj)

class itkScalarImageToRunLengthFeaturesFilterIF3(ITKCommonBasePython.itkProcessObject):
    """


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthFeaturesFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkScalarImageToRunLengthFeaturesFilterIF3_Pointer"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkScalarImageToRunLengthFeaturesFilterIF3 self) -> itkScalarImageToRunLengthFeaturesFilterIF3_Pointer"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_Clone(self)


    def GetFeatureMeansOutput(self):
        """GetFeatureMeansOutput(itkScalarImageToRunLengthFeaturesFilterIF3 self) -> itkDataObjectDecoratorVCUCD"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetFeatureMeansOutput(self)


    def GetFeatureStandardDeviationsOutput(self):
        """GetFeatureStandardDeviationsOutput(itkScalarImageToRunLengthFeaturesFilterIF3 self) -> itkDataObjectDecoratorVCUCD"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetFeatureStandardDeviationsOutput(self)


    def SetInput(self, arg0):
        """SetInput(itkScalarImageToRunLengthFeaturesFilterIF3 self, itkImageF3 arg0)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetInput(self, arg0)


    def GetInput(self):
        """GetInput(itkScalarImageToRunLengthFeaturesFilterIF3 self) -> itkImageF3"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetInput(self)


    def GetFeatureMeans(self):
        """
        GetFeatureMeans(itkScalarImageToRunLengthFeaturesFilterIF3 self) -> itkVectorContainerUCD_Pointer const &

        Return the feature
        means and deviations. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetFeatureMeans(self)


    def GetFeatureStandardDeviations(self):
        """GetFeatureStandardDeviations(itkScalarImageToRunLengthFeaturesFilterIF3 self) -> itkVectorContainerUCD_Pointer const &"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetFeatureStandardDeviations(self)


    def SetRequestedFeatures(self, _arg):
        """
        SetRequestedFeatures(itkScalarImageToRunLengthFeaturesFilterIF3 self, itkVectorContainerUCSS _arg)

        Set the
        desired feature set. Optional, for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetRequestedFeatures(self, _arg)


    def GetRequestedFeatures(self):
        """GetRequestedFeatures(itkScalarImageToRunLengthFeaturesFilterIF3 self) -> itkVectorContainerUCSS"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetRequestedFeatures(self)


    def SetOffsets(self, _arg):
        """
        SetOffsets(itkScalarImageToRunLengthFeaturesFilterIF3 self, itkVectorContainerUCO3 _arg)

        Set the offsets over
        which the co-occurrence pairs will be computed. Optional; for default
        value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetOffsets(self, _arg)


    def GetOffsets(self):
        """GetOffsets(itkScalarImageToRunLengthFeaturesFilterIF3 self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetOffsets(self)


    def SetNumberOfBinsPerAxis(self, arg0):
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthFeaturesFilterIF3 self, unsigned int arg0)

        Set number
        of histogram bins along each axis. Optional; for default value see
        above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetNumberOfBinsPerAxis(self, arg0)


    def SetPixelValueMinMax(self, min, max):
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthFeaturesFilterIF3 self, float min, float max)

        Set the min and
        max (inclusive) pixel value that will be used for feature
        calculations. Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetPixelValueMinMax(self, min, max)


    def SetDistanceValueMinMax(self, min, max):
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthFeaturesFilterIF3 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used for feature
        calculations. Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetDistanceValueMinMax(self, min, max)


    def SetMaskImage(self, arg0):
        """
        SetMaskImage(itkScalarImageToRunLengthFeaturesFilterIF3 self, itkImageF3 arg0)

        Connects the mask
        image for which the histogram is going to be computed. Optional; for
        default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetMaskImage(self, arg0)


    def GetMaskImage(self):
        """GetMaskImage(itkScalarImageToRunLengthFeaturesFilterIF3 self) -> itkImageF3"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetMaskImage(self)


    def SetInsidePixelValue(self, InsidePixelValue):
        """
        SetInsidePixelValue(itkScalarImageToRunLengthFeaturesFilterIF3 self, float InsidePixelValue)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetInsidePixelValue(self, InsidePixelValue)


    def GetFastCalculations(self):
        """GetFastCalculations(itkScalarImageToRunLengthFeaturesFilterIF3 self) -> bool"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetFastCalculations(self)


    def SetFastCalculations(self, _arg):
        """SetFastCalculations(itkScalarImageToRunLengthFeaturesFilterIF3 self, bool const _arg)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetFastCalculations(self, _arg)


    def FastCalculationsOn(self):
        """FastCalculationsOn(itkScalarImageToRunLengthFeaturesFilterIF3 self)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_FastCalculationsOn(self)


    def FastCalculationsOff(self):
        """FastCalculationsOff(itkScalarImageToRunLengthFeaturesFilterIF3 self)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_FastCalculationsOff(self)

    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterIF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthFeaturesFilterIF3"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkScalarImageToRunLengthFeaturesFilterIF3 self) -> itkScalarImageToRunLengthFeaturesFilterIF3"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterIF3

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthFeaturesFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthFeaturesFilterIF3.Clone = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_Clone, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.GetFeatureMeansOutput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetFeatureMeansOutput, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.GetFeatureStandardDeviationsOutput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetFeatureStandardDeviationsOutput, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.SetInput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetInput, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.GetInput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetInput, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.GetFeatureMeans = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetFeatureMeans, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.GetFeatureStandardDeviations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetFeatureStandardDeviations, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.SetRequestedFeatures = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetRequestedFeatures, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.GetRequestedFeatures = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetRequestedFeatures, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetOffsets, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetOffsets, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetPixelValueMinMax, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetDistanceValueMinMax, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetMaskImage, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetMaskImage, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetInsidePixelValue, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.GetFastCalculations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetFastCalculations, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.SetFastCalculations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_SetFastCalculations, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.FastCalculationsOn = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_FastCalculationsOn, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.FastCalculationsOff = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_FastCalculationsOff, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3.GetPointer = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_GetPointer, None, itkScalarImageToRunLengthFeaturesFilterIF3)
itkScalarImageToRunLengthFeaturesFilterIF3_swigregister = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_swigregister
itkScalarImageToRunLengthFeaturesFilterIF3_swigregister(itkScalarImageToRunLengthFeaturesFilterIF3)

def itkScalarImageToRunLengthFeaturesFilterIF3___New_orig__():
    """itkScalarImageToRunLengthFeaturesFilterIF3___New_orig__() -> itkScalarImageToRunLengthFeaturesFilterIF3_Pointer"""
    return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3___New_orig__()

def itkScalarImageToRunLengthFeaturesFilterIF3_cast(obj):
    """itkScalarImageToRunLengthFeaturesFilterIF3_cast(itkLightObject obj) -> itkScalarImageToRunLengthFeaturesFilterIF3"""
    return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIF3_cast(obj)

class itkScalarImageToRunLengthFeaturesFilterISS2(ITKCommonBasePython.itkProcessObject):
    """


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthFeaturesFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkScalarImageToRunLengthFeaturesFilterISS2_Pointer"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkScalarImageToRunLengthFeaturesFilterISS2 self) -> itkScalarImageToRunLengthFeaturesFilterISS2_Pointer"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_Clone(self)


    def GetFeatureMeansOutput(self):
        """GetFeatureMeansOutput(itkScalarImageToRunLengthFeaturesFilterISS2 self) -> itkDataObjectDecoratorVCUCD"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetFeatureMeansOutput(self)


    def GetFeatureStandardDeviationsOutput(self):
        """GetFeatureStandardDeviationsOutput(itkScalarImageToRunLengthFeaturesFilterISS2 self) -> itkDataObjectDecoratorVCUCD"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetFeatureStandardDeviationsOutput(self)


    def SetInput(self, arg0):
        """SetInput(itkScalarImageToRunLengthFeaturesFilterISS2 self, itkImageSS2 arg0)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetInput(self, arg0)


    def GetInput(self):
        """GetInput(itkScalarImageToRunLengthFeaturesFilterISS2 self) -> itkImageSS2"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetInput(self)


    def GetFeatureMeans(self):
        """
        GetFeatureMeans(itkScalarImageToRunLengthFeaturesFilterISS2 self) -> itkVectorContainerUCD_Pointer const &

        Return the feature
        means and deviations. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetFeatureMeans(self)


    def GetFeatureStandardDeviations(self):
        """GetFeatureStandardDeviations(itkScalarImageToRunLengthFeaturesFilterISS2 self) -> itkVectorContainerUCD_Pointer const &"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetFeatureStandardDeviations(self)


    def SetRequestedFeatures(self, _arg):
        """
        SetRequestedFeatures(itkScalarImageToRunLengthFeaturesFilterISS2 self, itkVectorContainerUCSS _arg)

        Set the
        desired feature set. Optional, for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetRequestedFeatures(self, _arg)


    def GetRequestedFeatures(self):
        """GetRequestedFeatures(itkScalarImageToRunLengthFeaturesFilterISS2 self) -> itkVectorContainerUCSS"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetRequestedFeatures(self)


    def SetOffsets(self, _arg):
        """
        SetOffsets(itkScalarImageToRunLengthFeaturesFilterISS2 self, itkVectorContainerUCO2 _arg)

        Set the offsets over
        which the co-occurrence pairs will be computed. Optional; for default
        value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetOffsets(self, _arg)


    def GetOffsets(self):
        """GetOffsets(itkScalarImageToRunLengthFeaturesFilterISS2 self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetOffsets(self)


    def SetNumberOfBinsPerAxis(self, arg0):
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthFeaturesFilterISS2 self, unsigned int arg0)

        Set number
        of histogram bins along each axis. Optional; for default value see
        above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetNumberOfBinsPerAxis(self, arg0)


    def SetPixelValueMinMax(self, min, max):
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthFeaturesFilterISS2 self, short min, short max)

        Set the min and
        max (inclusive) pixel value that will be used for feature
        calculations. Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetPixelValueMinMax(self, min, max)


    def SetDistanceValueMinMax(self, min, max):
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthFeaturesFilterISS2 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used for feature
        calculations. Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetDistanceValueMinMax(self, min, max)


    def SetMaskImage(self, arg0):
        """
        SetMaskImage(itkScalarImageToRunLengthFeaturesFilterISS2 self, itkImageSS2 arg0)

        Connects the mask
        image for which the histogram is going to be computed. Optional; for
        default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetMaskImage(self, arg0)


    def GetMaskImage(self):
        """GetMaskImage(itkScalarImageToRunLengthFeaturesFilterISS2 self) -> itkImageSS2"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetMaskImage(self)


    def SetInsidePixelValue(self, InsidePixelValue):
        """
        SetInsidePixelValue(itkScalarImageToRunLengthFeaturesFilterISS2 self, short InsidePixelValue)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetInsidePixelValue(self, InsidePixelValue)


    def GetFastCalculations(self):
        """GetFastCalculations(itkScalarImageToRunLengthFeaturesFilterISS2 self) -> bool"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetFastCalculations(self)


    def SetFastCalculations(self, _arg):
        """SetFastCalculations(itkScalarImageToRunLengthFeaturesFilterISS2 self, bool const _arg)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetFastCalculations(self, _arg)


    def FastCalculationsOn(self):
        """FastCalculationsOn(itkScalarImageToRunLengthFeaturesFilterISS2 self)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_FastCalculationsOn(self)


    def FastCalculationsOff(self):
        """FastCalculationsOff(itkScalarImageToRunLengthFeaturesFilterISS2 self)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_FastCalculationsOff(self)

    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterISS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthFeaturesFilterISS2"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkScalarImageToRunLengthFeaturesFilterISS2 self) -> itkScalarImageToRunLengthFeaturesFilterISS2"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterISS2

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthFeaturesFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthFeaturesFilterISS2.Clone = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_Clone, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.GetFeatureMeansOutput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetFeatureMeansOutput, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.GetFeatureStandardDeviationsOutput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetFeatureStandardDeviationsOutput, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.SetInput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetInput, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.GetInput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetInput, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.GetFeatureMeans = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetFeatureMeans, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.GetFeatureStandardDeviations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetFeatureStandardDeviations, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.SetRequestedFeatures = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetRequestedFeatures, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.GetRequestedFeatures = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetRequestedFeatures, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetOffsets, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetOffsets, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetPixelValueMinMax, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetDistanceValueMinMax, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetMaskImage, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetMaskImage, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetInsidePixelValue, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.GetFastCalculations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetFastCalculations, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.SetFastCalculations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_SetFastCalculations, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.FastCalculationsOn = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_FastCalculationsOn, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.FastCalculationsOff = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_FastCalculationsOff, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2.GetPointer = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_GetPointer, None, itkScalarImageToRunLengthFeaturesFilterISS2)
itkScalarImageToRunLengthFeaturesFilterISS2_swigregister = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_swigregister
itkScalarImageToRunLengthFeaturesFilterISS2_swigregister(itkScalarImageToRunLengthFeaturesFilterISS2)

def itkScalarImageToRunLengthFeaturesFilterISS2___New_orig__():
    """itkScalarImageToRunLengthFeaturesFilterISS2___New_orig__() -> itkScalarImageToRunLengthFeaturesFilterISS2_Pointer"""
    return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2___New_orig__()

def itkScalarImageToRunLengthFeaturesFilterISS2_cast(obj):
    """itkScalarImageToRunLengthFeaturesFilterISS2_cast(itkLightObject obj) -> itkScalarImageToRunLengthFeaturesFilterISS2"""
    return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS2_cast(obj)

class itkScalarImageToRunLengthFeaturesFilterISS3(ITKCommonBasePython.itkProcessObject):
    """


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthFeaturesFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkScalarImageToRunLengthFeaturesFilterISS3_Pointer"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkScalarImageToRunLengthFeaturesFilterISS3 self) -> itkScalarImageToRunLengthFeaturesFilterISS3_Pointer"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_Clone(self)


    def GetFeatureMeansOutput(self):
        """GetFeatureMeansOutput(itkScalarImageToRunLengthFeaturesFilterISS3 self) -> itkDataObjectDecoratorVCUCD"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetFeatureMeansOutput(self)


    def GetFeatureStandardDeviationsOutput(self):
        """GetFeatureStandardDeviationsOutput(itkScalarImageToRunLengthFeaturesFilterISS3 self) -> itkDataObjectDecoratorVCUCD"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetFeatureStandardDeviationsOutput(self)


    def SetInput(self, arg0):
        """SetInput(itkScalarImageToRunLengthFeaturesFilterISS3 self, itkImageSS3 arg0)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetInput(self, arg0)


    def GetInput(self):
        """GetInput(itkScalarImageToRunLengthFeaturesFilterISS3 self) -> itkImageSS3"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetInput(self)


    def GetFeatureMeans(self):
        """
        GetFeatureMeans(itkScalarImageToRunLengthFeaturesFilterISS3 self) -> itkVectorContainerUCD_Pointer const &

        Return the feature
        means and deviations. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetFeatureMeans(self)


    def GetFeatureStandardDeviations(self):
        """GetFeatureStandardDeviations(itkScalarImageToRunLengthFeaturesFilterISS3 self) -> itkVectorContainerUCD_Pointer const &"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetFeatureStandardDeviations(self)


    def SetRequestedFeatures(self, _arg):
        """
        SetRequestedFeatures(itkScalarImageToRunLengthFeaturesFilterISS3 self, itkVectorContainerUCSS _arg)

        Set the
        desired feature set. Optional, for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetRequestedFeatures(self, _arg)


    def GetRequestedFeatures(self):
        """GetRequestedFeatures(itkScalarImageToRunLengthFeaturesFilterISS3 self) -> itkVectorContainerUCSS"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetRequestedFeatures(self)


    def SetOffsets(self, _arg):
        """
        SetOffsets(itkScalarImageToRunLengthFeaturesFilterISS3 self, itkVectorContainerUCO3 _arg)

        Set the offsets over
        which the co-occurrence pairs will be computed. Optional; for default
        value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetOffsets(self, _arg)


    def GetOffsets(self):
        """GetOffsets(itkScalarImageToRunLengthFeaturesFilterISS3 self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetOffsets(self)


    def SetNumberOfBinsPerAxis(self, arg0):
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthFeaturesFilterISS3 self, unsigned int arg0)

        Set number
        of histogram bins along each axis. Optional; for default value see
        above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetNumberOfBinsPerAxis(self, arg0)


    def SetPixelValueMinMax(self, min, max):
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthFeaturesFilterISS3 self, short min, short max)

        Set the min and
        max (inclusive) pixel value that will be used for feature
        calculations. Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetPixelValueMinMax(self, min, max)


    def SetDistanceValueMinMax(self, min, max):
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthFeaturesFilterISS3 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used for feature
        calculations. Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetDistanceValueMinMax(self, min, max)


    def SetMaskImage(self, arg0):
        """
        SetMaskImage(itkScalarImageToRunLengthFeaturesFilterISS3 self, itkImageSS3 arg0)

        Connects the mask
        image for which the histogram is going to be computed. Optional; for
        default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetMaskImage(self, arg0)


    def GetMaskImage(self):
        """GetMaskImage(itkScalarImageToRunLengthFeaturesFilterISS3 self) -> itkImageSS3"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetMaskImage(self)


    def SetInsidePixelValue(self, InsidePixelValue):
        """
        SetInsidePixelValue(itkScalarImageToRunLengthFeaturesFilterISS3 self, short InsidePixelValue)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetInsidePixelValue(self, InsidePixelValue)


    def GetFastCalculations(self):
        """GetFastCalculations(itkScalarImageToRunLengthFeaturesFilterISS3 self) -> bool"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetFastCalculations(self)


    def SetFastCalculations(self, _arg):
        """SetFastCalculations(itkScalarImageToRunLengthFeaturesFilterISS3 self, bool const _arg)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetFastCalculations(self, _arg)


    def FastCalculationsOn(self):
        """FastCalculationsOn(itkScalarImageToRunLengthFeaturesFilterISS3 self)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_FastCalculationsOn(self)


    def FastCalculationsOff(self):
        """FastCalculationsOff(itkScalarImageToRunLengthFeaturesFilterISS3 self)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_FastCalculationsOff(self)

    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterISS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthFeaturesFilterISS3"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkScalarImageToRunLengthFeaturesFilterISS3 self) -> itkScalarImageToRunLengthFeaturesFilterISS3"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterISS3

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthFeaturesFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthFeaturesFilterISS3.Clone = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_Clone, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.GetFeatureMeansOutput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetFeatureMeansOutput, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.GetFeatureStandardDeviationsOutput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetFeatureStandardDeviationsOutput, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.SetInput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetInput, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.GetInput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetInput, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.GetFeatureMeans = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetFeatureMeans, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.GetFeatureStandardDeviations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetFeatureStandardDeviations, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.SetRequestedFeatures = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetRequestedFeatures, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.GetRequestedFeatures = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetRequestedFeatures, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetOffsets, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetOffsets, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetPixelValueMinMax, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetDistanceValueMinMax, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetMaskImage, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetMaskImage, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetInsidePixelValue, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.GetFastCalculations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetFastCalculations, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.SetFastCalculations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_SetFastCalculations, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.FastCalculationsOn = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_FastCalculationsOn, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.FastCalculationsOff = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_FastCalculationsOff, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3.GetPointer = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_GetPointer, None, itkScalarImageToRunLengthFeaturesFilterISS3)
itkScalarImageToRunLengthFeaturesFilterISS3_swigregister = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_swigregister
itkScalarImageToRunLengthFeaturesFilterISS3_swigregister(itkScalarImageToRunLengthFeaturesFilterISS3)

def itkScalarImageToRunLengthFeaturesFilterISS3___New_orig__():
    """itkScalarImageToRunLengthFeaturesFilterISS3___New_orig__() -> itkScalarImageToRunLengthFeaturesFilterISS3_Pointer"""
    return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3___New_orig__()

def itkScalarImageToRunLengthFeaturesFilterISS3_cast(obj):
    """itkScalarImageToRunLengthFeaturesFilterISS3_cast(itkLightObject obj) -> itkScalarImageToRunLengthFeaturesFilterISS3"""
    return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterISS3_cast(obj)

class itkScalarImageToRunLengthFeaturesFilterIUC2(ITKCommonBasePython.itkProcessObject):
    """


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthFeaturesFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkScalarImageToRunLengthFeaturesFilterIUC2_Pointer"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkScalarImageToRunLengthFeaturesFilterIUC2 self) -> itkScalarImageToRunLengthFeaturesFilterIUC2_Pointer"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_Clone(self)


    def GetFeatureMeansOutput(self):
        """GetFeatureMeansOutput(itkScalarImageToRunLengthFeaturesFilterIUC2 self) -> itkDataObjectDecoratorVCUCD"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetFeatureMeansOutput(self)


    def GetFeatureStandardDeviationsOutput(self):
        """GetFeatureStandardDeviationsOutput(itkScalarImageToRunLengthFeaturesFilterIUC2 self) -> itkDataObjectDecoratorVCUCD"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetFeatureStandardDeviationsOutput(self)


    def SetInput(self, arg0):
        """SetInput(itkScalarImageToRunLengthFeaturesFilterIUC2 self, itkImageUC2 arg0)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetInput(self, arg0)


    def GetInput(self):
        """GetInput(itkScalarImageToRunLengthFeaturesFilterIUC2 self) -> itkImageUC2"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetInput(self)


    def GetFeatureMeans(self):
        """
        GetFeatureMeans(itkScalarImageToRunLengthFeaturesFilterIUC2 self) -> itkVectorContainerUCD_Pointer const &

        Return the feature
        means and deviations. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetFeatureMeans(self)


    def GetFeatureStandardDeviations(self):
        """GetFeatureStandardDeviations(itkScalarImageToRunLengthFeaturesFilterIUC2 self) -> itkVectorContainerUCD_Pointer const &"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetFeatureStandardDeviations(self)


    def SetRequestedFeatures(self, _arg):
        """
        SetRequestedFeatures(itkScalarImageToRunLengthFeaturesFilterIUC2 self, itkVectorContainerUCSS _arg)

        Set the
        desired feature set. Optional, for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetRequestedFeatures(self, _arg)


    def GetRequestedFeatures(self):
        """GetRequestedFeatures(itkScalarImageToRunLengthFeaturesFilterIUC2 self) -> itkVectorContainerUCSS"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetRequestedFeatures(self)


    def SetOffsets(self, _arg):
        """
        SetOffsets(itkScalarImageToRunLengthFeaturesFilterIUC2 self, itkVectorContainerUCO2 _arg)

        Set the offsets over
        which the co-occurrence pairs will be computed. Optional; for default
        value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetOffsets(self, _arg)


    def GetOffsets(self):
        """GetOffsets(itkScalarImageToRunLengthFeaturesFilterIUC2 self) -> itkVectorContainerUCO2"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetOffsets(self)


    def SetNumberOfBinsPerAxis(self, arg0):
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthFeaturesFilterIUC2 self, unsigned int arg0)

        Set number
        of histogram bins along each axis. Optional; for default value see
        above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetNumberOfBinsPerAxis(self, arg0)


    def SetPixelValueMinMax(self, min, max):
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthFeaturesFilterIUC2 self, unsigned char min, unsigned char max)

        Set the min and
        max (inclusive) pixel value that will be used for feature
        calculations. Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetPixelValueMinMax(self, min, max)


    def SetDistanceValueMinMax(self, min, max):
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthFeaturesFilterIUC2 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used for feature
        calculations. Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetDistanceValueMinMax(self, min, max)


    def SetMaskImage(self, arg0):
        """
        SetMaskImage(itkScalarImageToRunLengthFeaturesFilterIUC2 self, itkImageUC2 arg0)

        Connects the mask
        image for which the histogram is going to be computed. Optional; for
        default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetMaskImage(self, arg0)


    def GetMaskImage(self):
        """GetMaskImage(itkScalarImageToRunLengthFeaturesFilterIUC2 self) -> itkImageUC2"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetMaskImage(self)


    def SetInsidePixelValue(self, InsidePixelValue):
        """
        SetInsidePixelValue(itkScalarImageToRunLengthFeaturesFilterIUC2 self, unsigned char InsidePixelValue)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetInsidePixelValue(self, InsidePixelValue)


    def GetFastCalculations(self):
        """GetFastCalculations(itkScalarImageToRunLengthFeaturesFilterIUC2 self) -> bool"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetFastCalculations(self)


    def SetFastCalculations(self, _arg):
        """SetFastCalculations(itkScalarImageToRunLengthFeaturesFilterIUC2 self, bool const _arg)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetFastCalculations(self, _arg)


    def FastCalculationsOn(self):
        """FastCalculationsOn(itkScalarImageToRunLengthFeaturesFilterIUC2 self)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_FastCalculationsOn(self)


    def FastCalculationsOff(self):
        """FastCalculationsOff(itkScalarImageToRunLengthFeaturesFilterIUC2 self)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_FastCalculationsOff(self)

    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterIUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthFeaturesFilterIUC2"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkScalarImageToRunLengthFeaturesFilterIUC2 self) -> itkScalarImageToRunLengthFeaturesFilterIUC2"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterIUC2

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthFeaturesFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthFeaturesFilterIUC2.Clone = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_Clone, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.GetFeatureMeansOutput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetFeatureMeansOutput, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.GetFeatureStandardDeviationsOutput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetFeatureStandardDeviationsOutput, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.SetInput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetInput, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.GetInput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetInput, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.GetFeatureMeans = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetFeatureMeans, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.GetFeatureStandardDeviations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetFeatureStandardDeviations, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.SetRequestedFeatures = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetRequestedFeatures, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.GetRequestedFeatures = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetRequestedFeatures, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetOffsets, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetOffsets, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetPixelValueMinMax, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetDistanceValueMinMax, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetMaskImage, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetMaskImage, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetInsidePixelValue, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.GetFastCalculations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetFastCalculations, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.SetFastCalculations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_SetFastCalculations, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.FastCalculationsOn = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_FastCalculationsOn, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.FastCalculationsOff = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_FastCalculationsOff, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2.GetPointer = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_GetPointer, None, itkScalarImageToRunLengthFeaturesFilterIUC2)
itkScalarImageToRunLengthFeaturesFilterIUC2_swigregister = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_swigregister
itkScalarImageToRunLengthFeaturesFilterIUC2_swigregister(itkScalarImageToRunLengthFeaturesFilterIUC2)

def itkScalarImageToRunLengthFeaturesFilterIUC2___New_orig__():
    """itkScalarImageToRunLengthFeaturesFilterIUC2___New_orig__() -> itkScalarImageToRunLengthFeaturesFilterIUC2_Pointer"""
    return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2___New_orig__()

def itkScalarImageToRunLengthFeaturesFilterIUC2_cast(obj):
    """itkScalarImageToRunLengthFeaturesFilterIUC2_cast(itkLightObject obj) -> itkScalarImageToRunLengthFeaturesFilterIUC2"""
    return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC2_cast(obj)

class itkScalarImageToRunLengthFeaturesFilterIUC3(ITKCommonBasePython.itkProcessObject):
    """


    This class computes run length descriptions from an image.

    By default, run length features are computed for each spatial
    direction and then averaged afterward, so it is possible to access the
    standard deviations of the texture features. These values give a clue
    as to texture anisotropy. However, doing this is much more work,
    because it involved computing one for each offset given. To compute a
    single matrix using the first offset, call FastCalculationsOn(). If
    this is called, then the texture standard deviations will not be
    computed (and will be set to zero), but texture computation will be
    much faster.

    This class is templated over the input image type.

    Template Parameters: The image type, and the type of histogram
    frequency container. If you are using a large number of bins per axis,
    a sparse frequency container may be advisable. The default is to use a
    dense frequency container.

    Inputs and parameters: An image

    A mask defining the region over which texture features will be
    calculated. (Optional)

    The pixel value that defines the "inside" of the mask. (Optional,
    defaults to 1 if a mask is set.)

    The set of features to be calculated. These features are defined in
    the HistogramToRunLengthFeaturesFilter class.

    The number of intensity bins. (Optional, defaults to 256.)

    The set of directions (offsets) to average across. (Optional, defaults
    to {(-1, 0), (-1, -1), (0, -1), (1, -1)} for 2D images and scales
    analogously for ND images.)

    The pixel intensity range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of the pixel type.)

    The distance range over which the features will be calculated.
    (Optional, defaults to the full dynamic range of double type.)

    In general, the default parameter values should be sufficient.

    Outputs: (1) The average value of each feature. (2) The standard
    deviation in the values of each feature.

    Print references: M. M. Galloway. Texture analysis using gray level
    run lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison

    C++ includes: itkScalarImageToRunLengthFeaturesFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkScalarImageToRunLengthFeaturesFilterIUC3_Pointer"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkScalarImageToRunLengthFeaturesFilterIUC3 self) -> itkScalarImageToRunLengthFeaturesFilterIUC3_Pointer"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_Clone(self)


    def GetFeatureMeansOutput(self):
        """GetFeatureMeansOutput(itkScalarImageToRunLengthFeaturesFilterIUC3 self) -> itkDataObjectDecoratorVCUCD"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetFeatureMeansOutput(self)


    def GetFeatureStandardDeviationsOutput(self):
        """GetFeatureStandardDeviationsOutput(itkScalarImageToRunLengthFeaturesFilterIUC3 self) -> itkDataObjectDecoratorVCUCD"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetFeatureStandardDeviationsOutput(self)


    def SetInput(self, arg0):
        """SetInput(itkScalarImageToRunLengthFeaturesFilterIUC3 self, itkImageUC3 arg0)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetInput(self, arg0)


    def GetInput(self):
        """GetInput(itkScalarImageToRunLengthFeaturesFilterIUC3 self) -> itkImageUC3"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetInput(self)


    def GetFeatureMeans(self):
        """
        GetFeatureMeans(itkScalarImageToRunLengthFeaturesFilterIUC3 self) -> itkVectorContainerUCD_Pointer const &

        Return the feature
        means and deviations. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetFeatureMeans(self)


    def GetFeatureStandardDeviations(self):
        """GetFeatureStandardDeviations(itkScalarImageToRunLengthFeaturesFilterIUC3 self) -> itkVectorContainerUCD_Pointer const &"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetFeatureStandardDeviations(self)


    def SetRequestedFeatures(self, _arg):
        """
        SetRequestedFeatures(itkScalarImageToRunLengthFeaturesFilterIUC3 self, itkVectorContainerUCSS _arg)

        Set the
        desired feature set. Optional, for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetRequestedFeatures(self, _arg)


    def GetRequestedFeatures(self):
        """GetRequestedFeatures(itkScalarImageToRunLengthFeaturesFilterIUC3 self) -> itkVectorContainerUCSS"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetRequestedFeatures(self)


    def SetOffsets(self, _arg):
        """
        SetOffsets(itkScalarImageToRunLengthFeaturesFilterIUC3 self, itkVectorContainerUCO3 _arg)

        Set the offsets over
        which the co-occurrence pairs will be computed. Optional; for default
        value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetOffsets(self, _arg)


    def GetOffsets(self):
        """GetOffsets(itkScalarImageToRunLengthFeaturesFilterIUC3 self) -> itkVectorContainerUCO3"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetOffsets(self)


    def SetNumberOfBinsPerAxis(self, arg0):
        """
        SetNumberOfBinsPerAxis(itkScalarImageToRunLengthFeaturesFilterIUC3 self, unsigned int arg0)

        Set number
        of histogram bins along each axis. Optional; for default value see
        above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetNumberOfBinsPerAxis(self, arg0)


    def SetPixelValueMinMax(self, min, max):
        """
        SetPixelValueMinMax(itkScalarImageToRunLengthFeaturesFilterIUC3 self, unsigned char min, unsigned char max)

        Set the min and
        max (inclusive) pixel value that will be used for feature
        calculations. Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetPixelValueMinMax(self, min, max)


    def SetDistanceValueMinMax(self, min, max):
        """
        SetDistanceValueMinMax(itkScalarImageToRunLengthFeaturesFilterIUC3 self, double min, double max)

        Set the min
        and max (inclusive) pixel value that will be used for feature
        calculations. Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetDistanceValueMinMax(self, min, max)


    def SetMaskImage(self, arg0):
        """
        SetMaskImage(itkScalarImageToRunLengthFeaturesFilterIUC3 self, itkImageUC3 arg0)

        Connects the mask
        image for which the histogram is going to be computed. Optional; for
        default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetMaskImage(self, arg0)


    def GetMaskImage(self):
        """GetMaskImage(itkScalarImageToRunLengthFeaturesFilterIUC3 self) -> itkImageUC3"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetMaskImage(self)


    def SetInsidePixelValue(self, InsidePixelValue):
        """
        SetInsidePixelValue(itkScalarImageToRunLengthFeaturesFilterIUC3 self, unsigned char InsidePixelValue)

        Set the pixel
        value of the mask that should be considered "inside" the object.
        Optional; for default value see above. 
        """
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetInsidePixelValue(self, InsidePixelValue)


    def GetFastCalculations(self):
        """GetFastCalculations(itkScalarImageToRunLengthFeaturesFilterIUC3 self) -> bool"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetFastCalculations(self)


    def SetFastCalculations(self, _arg):
        """SetFastCalculations(itkScalarImageToRunLengthFeaturesFilterIUC3 self, bool const _arg)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetFastCalculations(self, _arg)


    def FastCalculationsOn(self):
        """FastCalculationsOn(itkScalarImageToRunLengthFeaturesFilterIUC3 self)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_FastCalculationsOn(self)


    def FastCalculationsOff(self):
        """FastCalculationsOff(itkScalarImageToRunLengthFeaturesFilterIUC3 self)"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_FastCalculationsOff(self)

    __swig_destroy__ = _itkScalarImageToRunLengthFeaturesFilterPython.delete_itkScalarImageToRunLengthFeaturesFilterIUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkScalarImageToRunLengthFeaturesFilterIUC3"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_cast(obj)

    cast = staticmethod(cast)

    def GetPointer(self):
        """GetPointer(itkScalarImageToRunLengthFeaturesFilterIUC3 self) -> itkScalarImageToRunLengthFeaturesFilterIUC3"""
        return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetPointer(self)


    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthFeaturesFilterIUC3

        Create a new object of the class itkScalarImageToRunLengthFeaturesFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthFeaturesFilterIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthFeaturesFilterIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarImageToRunLengthFeaturesFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarImageToRunLengthFeaturesFilterIUC3.Clone = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_Clone, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.GetFeatureMeansOutput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetFeatureMeansOutput, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.GetFeatureStandardDeviationsOutput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetFeatureStandardDeviationsOutput, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.SetInput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetInput, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.GetInput = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetInput, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.GetFeatureMeans = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetFeatureMeans, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.GetFeatureStandardDeviations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetFeatureStandardDeviations, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.SetRequestedFeatures = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetRequestedFeatures, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.GetRequestedFeatures = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetRequestedFeatures, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.SetOffsets = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetOffsets, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.GetOffsets = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetOffsets, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.SetNumberOfBinsPerAxis = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetNumberOfBinsPerAxis, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.SetPixelValueMinMax = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetPixelValueMinMax, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.SetDistanceValueMinMax = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetDistanceValueMinMax, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.SetMaskImage = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetMaskImage, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.GetMaskImage = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetMaskImage, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.SetInsidePixelValue = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetInsidePixelValue, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.GetFastCalculations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetFastCalculations, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.SetFastCalculations = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_SetFastCalculations, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.FastCalculationsOn = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_FastCalculationsOn, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.FastCalculationsOff = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_FastCalculationsOff, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3.GetPointer = new_instancemethod(_itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_GetPointer, None, itkScalarImageToRunLengthFeaturesFilterIUC3)
itkScalarImageToRunLengthFeaturesFilterIUC3_swigregister = _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_swigregister
itkScalarImageToRunLengthFeaturesFilterIUC3_swigregister(itkScalarImageToRunLengthFeaturesFilterIUC3)

def itkScalarImageToRunLengthFeaturesFilterIUC3___New_orig__():
    """itkScalarImageToRunLengthFeaturesFilterIUC3___New_orig__() -> itkScalarImageToRunLengthFeaturesFilterIUC3_Pointer"""
    return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3___New_orig__()

def itkScalarImageToRunLengthFeaturesFilterIUC3_cast(obj):
    """itkScalarImageToRunLengthFeaturesFilterIUC3_cast(itkLightObject obj) -> itkScalarImageToRunLengthFeaturesFilterIUC3"""
    return _itkScalarImageToRunLengthFeaturesFilterPython.itkScalarImageToRunLengthFeaturesFilterIUC3_cast(obj)



