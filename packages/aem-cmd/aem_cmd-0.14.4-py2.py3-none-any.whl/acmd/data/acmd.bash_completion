# bash completion for AEM command line tools
have acmd &&
_acmd()
{
    # Raw commands are commands that should be part of a jcr tool.

    local JCR_COMMANDS="ls cat find search setprop"
    local JCR_PATH_COMMANDS="ls cat find"
    local PKG_COMMANDS="download build install"
    local BUNDLES_COMMANDS="stop start"
    local GROUPS_COMMANDS="adduser"
    local USERS_COMMANDS="setprop"
    local FILE_COMMANDS="upload import execute"

    local cur
    local IFS=$'\n'
    COMPREPLY=()
    COMP_WORDBREAKS=" \"'><=;|&("

    cur="${COMP_WORDS[COMP_CWORD]}"

    local program=None
    local tool=None
    local cmd=None
    local arg0=None
    local arg1=None

    local complete=None

    for ((i=0; i < ${#COMP_WORDS[@]}; i++)); do
        word="${COMP_WORDS[i]}"
        next="${COMP_WORDS[((i+1))]}"

        if [[ "$word" == "-s" ]]; then
            complete=option
            option=$word
            ((i++))
            word="${COMP_WORDS[i]}"
            echo "option=$word" >> /tmp/acmd_complete.log
        elif [[ "$word" == --* ]]; then
            if [[ "$next" == "=" ]]; then
                complete=option
                option=$word
                ((i++))
                ((i++))
                word="${COMP_WORDS[i]}"
                echo "option=$word" >> /tmp/acmd_complete.log
            else
                # Ignore long form options without =.
                echo "unary option $word" >> /tmp/acmd_complete.log
            fi
        else
            if [[ "$word" == "acmd" ]]; then
                program="acmd"
                echo "program=$program" >> /tmp/acmd_complete.log
            elif [[ "$program" != "None" && "$tool" == "None" ]]; then
                if [[ "${JCR_COMMANDS}" =~ "$word" ]]; then
                    tool=jcr
                    cmd=$word
                    complete=tool
                elif [[ "$word" == "groovy" ]]; then
                    tool=groovy
                    cmd=execute
                    complete=arg0
                else
                    tool=$word
                    complete=tool
                fi

                echo "tool=$tool" >> /tmp/acmd_complete.log
                echo "cmd=$cmd" >> /tmp/acmd_complete.log
            elif [[ "$program" != "None" && "$tool" != "None" && "$cmd" == "None" ]]; then
                cmd=$word
                complete=cmd
                echo "cmd=$cmd" >> /tmp/acmd_complete.log
            elif [[ "$program" != "None" && "$tool" != "None" && "$cmd" != "None" && "$arg0" == "None" ]]; then
                complete=arg0
                arg0=$word
                echo "arg0=$arg0" >> /tmp/acmd_complete.log
            else
                complete=arg1
                arg1=$word
            fi
        fi
    done
    echo "complete=$complete" >> /tmp/acmd_complete.log

    if [[ ${complete} == "tool" ]] ; then
        tools=`acmd help --compact _tools`
        COMPREPLY=( $(compgen -W "${tools}" -- "${cur}" ) )
        return 0
    elif [[ ${complete} == "cmd" ]] ; then
        commands=`acmd help --compact ${tool}`
        echo "Completing command ${cur}" >> /tmp/acmd_complete.log
        COMPREPLY=( $(compgen -W "${commands}" -- "${cur}" ) )
        return 0
    elif [[ ${complete} == "option" ]] ; then
        if [[ ${option} == "-s" || ${option} == "--server" ]]; then
            echo "Completing server=$option" >> /tmp/acmd_complete.log
            servers=`acmd help --compact _servers`
            COMPREPLY=( $(compgen -W "${servers}" -- "${word}" ) )
        fi
        return 0
    elif [[ ${complete} == "arg0" ]]; then
        if [[ "${tool}" == "packages" && "${PKG_COMMANDS}" =~ "${cmd}" ]] ; then
            pkgs=`acmd packages list --compact`
            COMPREPLY=( $(compgen -W "${pkgs}" -- ${arg0}) )
        elif [[ "${tool}" == "bundles" && "${BUNDLES_COMMANDS}" =~ "${cmd}" ]] ; then
            bundles=`acmd bundles list --compact`
            COMPREPLY=( $(compgen -W "${bundles}" -- ${arg0}) )
        elif [[ "${tool}" == "groups" && "${GROUPS_COMMANDS}" =~ "${cmd}" ]]; then
            groups=`acmd groups list --compact`
            COMPREPLY=( $(compgen -W "${groups}" -- ${arg0}) )
        elif [[ "${tool}" == "users" && "${USERS_COMMANDS}" =~ "${cmd}" ]]; then
            users=`acmd users list --compact`
            COMPREPLY=( $(compgen -W "${users}" -- ${arg0}) )
        elif [[ "${JCR_PATH_COMMANDS}" =~ "$cmd" || "$cmd" == "activate" ]]; then
            echo "Completing jcr path $arg0" >> /tmp/acmd_complete.log
            if [[ $arg0 == *"/" ]]; then
                dir=${arg0}
            else
                dir=`dirname ${arg0}`
            fi

            dirs=`acmd ls --fullpath ${dir}`
            # For some stupid reason I can't get rid of the spaces!
            compopt -o nospace &>/dev/null
            COMPREPLY=( $(compgen -W "${dirs}" -S '/' ${arg0}) )
        elif [[ "${FILE_COMMANDS}" =~ "$cmd" ]]; then
            echo "Completing file path $arg0" >> /tmp/acmd_complete.log
            files=("${arg0}*")
            compopt -o nospace &>/dev/null
            _filedir

        else
            echo "Completing arg0 $arg0" >> /tmp/acmd_complete.log
        fi
        return 0
    elif [[ ${complete} == "arg1" ]]; then
        if [[ "${tool}" == "groups" && "${cmd}" == "adduser" ]]; then
            users=`acmd users list --compact`
            COMPREPLY=( $(compgen -W "${users}" -- ${arg1}) )
        fi
    fi
}
complete -F _acmd acmd
