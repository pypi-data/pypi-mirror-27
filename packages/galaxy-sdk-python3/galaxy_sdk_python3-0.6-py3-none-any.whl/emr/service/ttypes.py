#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import rpc.errors.ttypes
import rpc.common.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class InstanceGroupRole:
  MASTER = 1
  CONTROL = 2
  CORE = 3
  TASK = 4

  _VALUES_TO_NAMES = {
    1: "MASTER",
    2: "CONTROL",
    3: "CORE",
    4: "TASK",
  }

  _NAMES_TO_VALUES = {
    "MASTER": 1,
    "CONTROL": 2,
    "CORE": 3,
    "TASK": 4,
  }

class JobActionOnFailure:
  TERMINATE_JOB = 1
  TERMINATE_CLUSTER = 2
  CANCEL_AND_WAIT = 3
  CON = 4

  _VALUES_TO_NAMES = {
    1: "TERMINATE_JOB",
    2: "TERMINATE_CLUSTER",
    3: "CANCEL_AND_WAIT",
    4: "CON",
  }

  _NAMES_TO_VALUES = {
    "TERMINATE_JOB": 1,
    "TERMINATE_CLUSTER": 2,
    "CANCEL_AND_WAIT": 3,
    "CON": 4,
  }

class StateCode:
  C_INITED = 0
  C_PROCESSING = 1
  C_STARTING = 2
  C_BOOSTRAPPING = 3
  C_RUNNING = 4
  C_WAITING = 5
  C_TERMINATING = 6
  C_COMPLETED = 7
  C_TERMINATED = 8
  C_FAILED = 9
  G_INITED = 100
  G_PROCESSING = 101
  G_STARTING = 102
  G_RUNNING = 103
  G_RESIZING = 104
  G_TERMINATING = 105
  G_TERMINATED = 106
  I_INITED = 200
  I_PROCESSING = 201
  I_STARTING = 202
  I_RUNNING = 203
  I_TERMINATING = 204
  I_TERMINATED = 205
  J_INITED = 300
  J_PROCESSING = 301
  J_SUBMITTED = 302
  J_RUNNGIN = 303
  J_FINISHED = 304
  J_KILLED = 305
  J_FAILED = 306

  _VALUES_TO_NAMES = {
    0: "C_INITED",
    1: "C_PROCESSING",
    2: "C_STARTING",
    3: "C_BOOSTRAPPING",
    4: "C_RUNNING",
    5: "C_WAITING",
    6: "C_TERMINATING",
    7: "C_COMPLETED",
    8: "C_TERMINATED",
    9: "C_FAILED",
    100: "G_INITED",
    101: "G_PROCESSING",
    102: "G_STARTING",
    103: "G_RUNNING",
    104: "G_RESIZING",
    105: "G_TERMINATING",
    106: "G_TERMINATED",
    200: "I_INITED",
    201: "I_PROCESSING",
    202: "I_STARTING",
    203: "I_RUNNING",
    204: "I_TERMINATING",
    205: "I_TERMINATED",
    300: "J_INITED",
    301: "J_PROCESSING",
    302: "J_SUBMITTED",
    303: "J_RUNNGIN",
    304: "J_FINISHED",
    305: "J_KILLED",
    306: "J_FAILED",
  }

  _NAMES_TO_VALUES = {
    "C_INITED": 0,
    "C_PROCESSING": 1,
    "C_STARTING": 2,
    "C_BOOSTRAPPING": 3,
    "C_RUNNING": 4,
    "C_WAITING": 5,
    "C_TERMINATING": 6,
    "C_COMPLETED": 7,
    "C_TERMINATED": 8,
    "C_FAILED": 9,
    "G_INITED": 100,
    "G_PROCESSING": 101,
    "G_STARTING": 102,
    "G_RUNNING": 103,
    "G_RESIZING": 104,
    "G_TERMINATING": 105,
    "G_TERMINATED": 106,
    "I_INITED": 200,
    "I_PROCESSING": 201,
    "I_STARTING": 202,
    "I_RUNNING": 203,
    "I_TERMINATING": 204,
    "I_TERMINATED": 205,
    "J_INITED": 300,
    "J_PROCESSING": 301,
    "J_SUBMITTED": 302,
    "J_RUNNGIN": 303,
    "J_FINISHED": 304,
    "J_KILLED": 305,
    "J_FAILED": 306,
  }


class Timeline:
  """
  Attributes:
   - creationTime
   - readyTime
   - endTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'creationTime', None, 0, ), # 1
    (2, TType.I32, 'readyTime', None, 0, ), # 2
    (3, TType.I32, 'endTime', None, 0, ), # 3
  )

  def __init__(self, creationTime=thrift_spec[1][4], readyTime=thrift_spec[2][4], endTime=thrift_spec[3][4],):
    self.creationTime = creationTime
    self.readyTime = readyTime
    self.endTime = endTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.creationTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.readyTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.endTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Timeline')
    if self.creationTime is not None:
      oprot.writeFieldBegin('creationTime', TType.I32, 1)
      oprot.writeI32(self.creationTime)
      oprot.writeFieldEnd()
    if self.readyTime is not None:
      oprot.writeFieldBegin('readyTime', TType.I32, 2)
      oprot.writeI32(self.readyTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I32, 3)
      oprot.writeI32(self.endTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Status:
  """
  Attributes:
   - state
   - stateChangeReason
   - timeline
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'state', None, None, ), # 1
    (2, TType.STRING, 'stateChangeReason', None, None, ), # 2
    (3, TType.STRUCT, 'timeline', (Timeline, Timeline.thrift_spec), None, ), # 3
  )

  def __init__(self, state=None, stateChangeReason=None, timeline=None,):
    self.state = state
    self.stateChangeReason = stateChangeReason
    self.timeline = timeline

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.stateChangeReason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.timeline = Timeline()
          self.timeline.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Status')
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 1)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.stateChangeReason is not None:
      oprot.writeFieldBegin('stateChangeReason', TType.STRING, 2)
      oprot.writeString(self.stateChangeReason)
      oprot.writeFieldEnd()
    if self.timeline is not None:
      oprot.writeFieldBegin('timeline', TType.STRUCT, 3)
      self.timeline.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InstanceTypeInfo:
  """
  Attributes:
   - name
   - cpu
   - ram
   - disk
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.I32, 'cpu', None, None, ), # 2
    (3, TType.I32, 'ram', None, None, ), # 3
    (4, TType.I32, 'disk', None, None, ), # 4
  )

  def __init__(self, name=None, cpu=None, ram=None, disk=None,):
    self.name = name
    self.cpu = cpu
    self.ram = ram
    self.disk = disk

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cpu = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.ram = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.disk = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InstanceTypeInfo')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.cpu is not None:
      oprot.writeFieldBegin('cpu', TType.I32, 2)
      oprot.writeI32(self.cpu)
      oprot.writeFieldEnd()
    if self.ram is not None:
      oprot.writeFieldBegin('ram', TType.I32, 3)
      oprot.writeI32(self.ram)
      oprot.writeFieldEnd()
    if self.disk is not None:
      oprot.writeFieldBegin('disk', TType.I32, 4)
      oprot.writeI32(self.disk)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EMRUser:
  """
  Attributes:
   - developerId: xiaomi developer ID (different from xiaomi id)
   - clusterIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'developerId', None, None, ), # 1
    (2, TType.LIST, 'clusterIds', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, developerId=None, clusterIds=None,):
    self.developerId = developerId
    self.clusterIds = clusterIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.developerId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.clusterIds = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in range(_size0):
            _elem5 = iprot.readString();
            self.clusterIds.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EMRUser')
    if self.developerId is not None:
      oprot.writeFieldBegin('developerId', TType.STRING, 1)
      oprot.writeString(self.developerId)
      oprot.writeFieldEnd()
    if self.clusterIds is not None:
      oprot.writeFieldBegin('clusterIds', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.clusterIds))
      for iter6 in self.clusterIds:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.developerId is None:
      raise TProtocol.TProtocolException(message='Required field developerId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddInstanceGroupRequest:
  """
  Attributes:
   - name
   - clusterId
   - role
   - instanceType
   - requestedInstanceCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'clusterId', None, None, ), # 2
    (3, TType.I32, 'role', None, None, ), # 3
    (4, TType.STRING, 'instanceType', None, None, ), # 4
    (5, TType.I32, 'requestedInstanceCount', None, None, ), # 5
  )

  def __init__(self, name=None, clusterId=None, role=None, instanceType=None, requestedInstanceCount=None,):
    self.name = name
    self.clusterId = clusterId
    self.role = role
    self.instanceType = instanceType
    self.requestedInstanceCount = requestedInstanceCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clusterId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.role = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.instanceType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.requestedInstanceCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddInstanceGroupRequest')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.clusterId is not None:
      oprot.writeFieldBegin('clusterId', TType.STRING, 2)
      oprot.writeString(self.clusterId)
      oprot.writeFieldEnd()
    if self.role is not None:
      oprot.writeFieldBegin('role', TType.I32, 3)
      oprot.writeI32(self.role)
      oprot.writeFieldEnd()
    if self.instanceType is not None:
      oprot.writeFieldBegin('instanceType', TType.STRING, 4)
      oprot.writeString(self.instanceType)
      oprot.writeFieldEnd()
    if self.requestedInstanceCount is not None:
      oprot.writeFieldBegin('requestedInstanceCount', TType.I32, 5)
      oprot.writeI32(self.requestedInstanceCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddInstanceGroupResponse:
  """
  Attributes:
   - instanceGroupId
   - name
   - clusterId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'instanceGroupId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'clusterId', None, None, ), # 3
  )

  def __init__(self, instanceGroupId=None, name=None, clusterId=None,):
    self.instanceGroupId = instanceGroupId
    self.name = name
    self.clusterId = clusterId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.instanceGroupId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.clusterId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddInstanceGroupResponse')
    if self.instanceGroupId is not None:
      oprot.writeFieldBegin('instanceGroupId', TType.STRING, 1)
      oprot.writeString(self.instanceGroupId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.clusterId is not None:
      oprot.writeFieldBegin('clusterId', TType.STRING, 3)
      oprot.writeString(self.clusterId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.instanceGroupId is None:
      raise TProtocol.TProtocolException(message='Required field instanceGroupId is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.clusterId is None:
      raise TProtocol.TProtocolException(message='Required field clusterId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubmitJobRequest:
  """
  Attributes:
   - name
   - clusterId
   - jar
   - jarMainClass
   - jarArgs
   - jarProperties
   - actionOnFailure
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'clusterId', None, None, ), # 2
    (3, TType.STRING, 'jar', None, None, ), # 3
    (4, TType.STRING, 'jarMainClass', None, None, ), # 4
    (5, TType.LIST, 'jarArgs', (TType.STRING,None), None, ), # 5
    (6, TType.MAP, 'jarProperties', (TType.STRING,None,TType.STRING,None), None, ), # 6
    (7, TType.I32, 'actionOnFailure', None, None, ), # 7
  )

  def __init__(self, name=None, clusterId=None, jar=None, jarMainClass=None, jarArgs=None, jarProperties=None, actionOnFailure=None,):
    self.name = name
    self.clusterId = clusterId
    self.jar = jar
    self.jarMainClass = jarMainClass
    self.jarArgs = jarArgs
    self.jarProperties = jarProperties
    self.actionOnFailure = actionOnFailure

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clusterId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jar = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.jarMainClass = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.jarArgs = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in range(_size7):
            _elem12 = iprot.readString();
            self.jarArgs.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.jarProperties = {}
          (_ktype14, _vtype15, _size13 ) = iprot.readMapBegin()
          for _i17 in range(_size13):
            _key18 = iprot.readString();
            _val19 = iprot.readString();
            self.jarProperties[_key18] = _val19
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.actionOnFailure = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubmitJobRequest')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.clusterId is not None:
      oprot.writeFieldBegin('clusterId', TType.STRING, 2)
      oprot.writeString(self.clusterId)
      oprot.writeFieldEnd()
    if self.jar is not None:
      oprot.writeFieldBegin('jar', TType.STRING, 3)
      oprot.writeString(self.jar)
      oprot.writeFieldEnd()
    if self.jarMainClass is not None:
      oprot.writeFieldBegin('jarMainClass', TType.STRING, 4)
      oprot.writeString(self.jarMainClass)
      oprot.writeFieldEnd()
    if self.jarArgs is not None:
      oprot.writeFieldBegin('jarArgs', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.jarArgs))
      for iter20 in self.jarArgs:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jarProperties is not None:
      oprot.writeFieldBegin('jarProperties', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.jarProperties))
      for kiter21,viter22 in list(self.jarProperties.items()):
        oprot.writeString(kiter21)
        oprot.writeString(viter22)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.actionOnFailure is not None:
      oprot.writeFieldBegin('actionOnFailure', TType.I32, 7)
      oprot.writeI32(self.actionOnFailure)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubmitJobResponse:
  """
  Attributes:
   - jobId
   - name
   - clusterId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'clusterId', None, None, ), # 3
  )

  def __init__(self, jobId=None, name=None, clusterId=None,):
    self.jobId = jobId
    self.name = name
    self.clusterId = clusterId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.clusterId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubmitJobResponse')
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 1)
      oprot.writeString(self.jobId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.clusterId is not None:
      oprot.writeFieldBegin('clusterId', TType.STRING, 3)
      oprot.writeString(self.clusterId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.jobId is None:
      raise TProtocol.TProtocolException(message='Required field jobId is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.clusterId is None:
      raise TProtocol.TProtocolException(message='Required field clusterId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CreateClusterRequest:
  """
  Attributes:
   - name
   - autoTerminate
   - terminationProtected
   - region
   - purpose
   - keyPair
   - addInstanceGroupRequests
   - submitJobRequests
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.BOOL, 'autoTerminate', None, False, ), # 2
    (3, TType.BOOL, 'terminationProtected', None, True, ), # 3
    (4, TType.STRING, 'region', None, None, ), # 4
    (5, TType.STRING, 'purpose', None, None, ), # 5
    (6, TType.STRING, 'keyPair', None, None, ), # 6
    (7, TType.LIST, 'addInstanceGroupRequests', (TType.STRUCT,(AddInstanceGroupRequest, AddInstanceGroupRequest.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'submitJobRequests', (TType.STRUCT,(SubmitJobRequest, SubmitJobRequest.thrift_spec)), None, ), # 8
  )

  def __init__(self, name=None, autoTerminate=thrift_spec[2][4], terminationProtected=thrift_spec[3][4], region=None, purpose=None, keyPair=None, addInstanceGroupRequests=None, submitJobRequests=None,):
    self.name = name
    self.autoTerminate = autoTerminate
    self.terminationProtected = terminationProtected
    self.region = region
    self.purpose = purpose
    self.keyPair = keyPair
    self.addInstanceGroupRequests = addInstanceGroupRequests
    self.submitJobRequests = submitJobRequests

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.autoTerminate = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.terminationProtected = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.region = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.purpose = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.keyPair = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.addInstanceGroupRequests = []
          (_etype26, _size23) = iprot.readListBegin()
          for _i27 in range(_size23):
            _elem28 = AddInstanceGroupRequest()
            _elem28.read(iprot)
            self.addInstanceGroupRequests.append(_elem28)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.submitJobRequests = []
          (_etype32, _size29) = iprot.readListBegin()
          for _i33 in range(_size29):
            _elem34 = SubmitJobRequest()
            _elem34.read(iprot)
            self.submitJobRequests.append(_elem34)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CreateClusterRequest')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.autoTerminate is not None:
      oprot.writeFieldBegin('autoTerminate', TType.BOOL, 2)
      oprot.writeBool(self.autoTerminate)
      oprot.writeFieldEnd()
    if self.terminationProtected is not None:
      oprot.writeFieldBegin('terminationProtected', TType.BOOL, 3)
      oprot.writeBool(self.terminationProtected)
      oprot.writeFieldEnd()
    if self.region is not None:
      oprot.writeFieldBegin('region', TType.STRING, 4)
      oprot.writeString(self.region)
      oprot.writeFieldEnd()
    if self.purpose is not None:
      oprot.writeFieldBegin('purpose', TType.STRING, 5)
      oprot.writeString(self.purpose)
      oprot.writeFieldEnd()
    if self.keyPair is not None:
      oprot.writeFieldBegin('keyPair', TType.STRING, 6)
      oprot.writeString(self.keyPair)
      oprot.writeFieldEnd()
    if self.addInstanceGroupRequests is not None:
      oprot.writeFieldBegin('addInstanceGroupRequests', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.addInstanceGroupRequests))
      for iter35 in self.addInstanceGroupRequests:
        iter35.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.submitJobRequests is not None:
      oprot.writeFieldBegin('submitJobRequests', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.submitJobRequests))
      for iter36 in self.submitJobRequests:
        iter36.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CreateClusterResponse:
  """
  Attributes:
   - clusterId
   - name
   - addInstanceGroupResponses
   - submitJobResponses
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clusterId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.LIST, 'addInstanceGroupResponses', (TType.STRUCT,(AddInstanceGroupResponse, AddInstanceGroupResponse.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'submitJobResponses', (TType.STRUCT,(SubmitJobResponse, SubmitJobResponse.thrift_spec)), None, ), # 4
  )

  def __init__(self, clusterId=None, name=None, addInstanceGroupResponses=None, submitJobResponses=None,):
    self.clusterId = clusterId
    self.name = name
    self.addInstanceGroupResponses = addInstanceGroupResponses
    self.submitJobResponses = submitJobResponses

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clusterId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.addInstanceGroupResponses = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in range(_size37):
            _elem42 = AddInstanceGroupResponse()
            _elem42.read(iprot)
            self.addInstanceGroupResponses.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.submitJobResponses = []
          (_etype46, _size43) = iprot.readListBegin()
          for _i47 in range(_size43):
            _elem48 = SubmitJobResponse()
            _elem48.read(iprot)
            self.submitJobResponses.append(_elem48)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CreateClusterResponse')
    if self.clusterId is not None:
      oprot.writeFieldBegin('clusterId', TType.STRING, 1)
      oprot.writeString(self.clusterId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.addInstanceGroupResponses is not None:
      oprot.writeFieldBegin('addInstanceGroupResponses', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.addInstanceGroupResponses))
      for iter49 in self.addInstanceGroupResponses:
        iter49.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.submitJobResponses is not None:
      oprot.writeFieldBegin('submitJobResponses', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.submitJobResponses))
      for iter50 in self.submitJobResponses:
        iter50.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.clusterId is None:
      raise TProtocol.TProtocolException(message='Required field clusterId is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TerminateClusterRequest:
  """
  Attributes:
   - clusterId
   - force: true  force stop, all task stop immediately
  false wait tasks finish and stop
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clusterId', None, None, ), # 1
    (2, TType.BOOL, 'force', None, None, ), # 2
  )

  def __init__(self, clusterId=None, force=None,):
    self.clusterId = clusterId
    self.force = force

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clusterId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.force = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TerminateClusterRequest')
    if self.clusterId is not None:
      oprot.writeFieldBegin('clusterId', TType.STRING, 1)
      oprot.writeString(self.clusterId)
      oprot.writeFieldEnd()
    if self.force is not None:
      oprot.writeFieldBegin('force', TType.BOOL, 2)
      oprot.writeBool(self.force)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.clusterId is None:
      raise TProtocol.TProtocolException(message='Required field clusterId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ModifyInstanceGroupRequest:
  """
  Attributes:
   - instanceGroupId
   - requestedInstanceCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'instanceGroupId', None, None, ), # 1
    (2, TType.I32, 'requestedInstanceCount', None, None, ), # 2
  )

  def __init__(self, instanceGroupId=None, requestedInstanceCount=None,):
    self.instanceGroupId = instanceGroupId
    self.requestedInstanceCount = requestedInstanceCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.instanceGroupId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.requestedInstanceCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ModifyInstanceGroupRequest')
    if self.instanceGroupId is not None:
      oprot.writeFieldBegin('instanceGroupId', TType.STRING, 1)
      oprot.writeString(self.instanceGroupId)
      oprot.writeFieldEnd()
    if self.requestedInstanceCount is not None:
      oprot.writeFieldBegin('requestedInstanceCount', TType.I32, 2)
      oprot.writeI32(self.requestedInstanceCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.instanceGroupId is None:
      raise TProtocol.TProtocolException(message='Required field instanceGroupId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ModifyInstanceGroupResponse:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ModifyInstanceGroupResponse')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KillJobRequest:
  """
  Attributes:
   - jobId
   - clusterId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobId', None, None, ), # 1
    (2, TType.STRING, 'clusterId', None, None, ), # 2
  )

  def __init__(self, jobId=None, clusterId=None,):
    self.jobId = jobId
    self.clusterId = clusterId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clusterId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KillJobRequest')
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 1)
      oprot.writeString(self.jobId)
      oprot.writeFieldEnd()
    if self.clusterId is not None:
      oprot.writeFieldBegin('clusterId', TType.STRING, 2)
      oprot.writeString(self.clusterId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.jobId is None:
      raise TProtocol.TProtocolException(message='Required field jobId is unset!')
    if self.clusterId is None:
      raise TProtocol.TProtocolException(message='Required field clusterId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InstanceGroupDetail:
  """
  Attributes:
   - groupId
   - name
   - role
   - instanceType
   - requestedInstanceCount
   - runningInstanceCount
   - instanceStatus
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'groupId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'role', None, None, ), # 3
    (4, TType.STRING, 'instanceType', None, None, ), # 4
    (5, TType.I32, 'requestedInstanceCount', None, None, ), # 5
    (6, TType.I32, 'runningInstanceCount', None, None, ), # 6
    (7, TType.STRUCT, 'instanceStatus', (Status, Status.thrift_spec), None, ), # 7
  )

  def __init__(self, groupId=None, name=None, role=None, instanceType=None, requestedInstanceCount=None, runningInstanceCount=None, instanceStatus=None,):
    self.groupId = groupId
    self.name = name
    self.role = role
    self.instanceType = instanceType
    self.requestedInstanceCount = requestedInstanceCount
    self.runningInstanceCount = runningInstanceCount
    self.instanceStatus = instanceStatus

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.groupId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.role = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.instanceType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.requestedInstanceCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.runningInstanceCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.instanceStatus = Status()
          self.instanceStatus.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InstanceGroupDetail')
    if self.groupId is not None:
      oprot.writeFieldBegin('groupId', TType.STRING, 1)
      oprot.writeString(self.groupId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.role is not None:
      oprot.writeFieldBegin('role', TType.I32, 3)
      oprot.writeI32(self.role)
      oprot.writeFieldEnd()
    if self.instanceType is not None:
      oprot.writeFieldBegin('instanceType', TType.STRING, 4)
      oprot.writeString(self.instanceType)
      oprot.writeFieldEnd()
    if self.requestedInstanceCount is not None:
      oprot.writeFieldBegin('requestedInstanceCount', TType.I32, 5)
      oprot.writeI32(self.requestedInstanceCount)
      oprot.writeFieldEnd()
    if self.runningInstanceCount is not None:
      oprot.writeFieldBegin('runningInstanceCount', TType.I32, 6)
      oprot.writeI32(self.runningInstanceCount)
      oprot.writeFieldEnd()
    if self.instanceStatus is not None:
      oprot.writeFieldBegin('instanceStatus', TType.STRUCT, 7)
      self.instanceStatus.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.groupId is None:
      raise TProtocol.TProtocolException(message='Required field groupId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InstanceDetail:
  """
  Attributes:
   - instanceId
   - osInstanceId
   - name
   - instanceType
   - privateIpAddress
   - publicIpAddress
   - privateDnsName
   - publicDnsName
   - instanceStatus
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'instanceId', None, None, ), # 1
    (2, TType.STRING, 'osInstanceId', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'instanceType', None, None, ), # 4
    (5, TType.STRING, 'privateIpAddress', None, None, ), # 5
    (6, TType.STRING, 'publicIpAddress', None, None, ), # 6
    (7, TType.STRING, 'privateDnsName', None, None, ), # 7
    (8, TType.STRING, 'publicDnsName', None, None, ), # 8
    (9, TType.STRUCT, 'instanceStatus', (Status, Status.thrift_spec), None, ), # 9
  )

  def __init__(self, instanceId=None, osInstanceId=None, name=None, instanceType=None, privateIpAddress=None, publicIpAddress=None, privateDnsName=None, publicDnsName=None, instanceStatus=None,):
    self.instanceId = instanceId
    self.osInstanceId = osInstanceId
    self.name = name
    self.instanceType = instanceType
    self.privateIpAddress = privateIpAddress
    self.publicIpAddress = publicIpAddress
    self.privateDnsName = privateDnsName
    self.publicDnsName = publicDnsName
    self.instanceStatus = instanceStatus

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.instanceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.osInstanceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.instanceType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.privateIpAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.publicIpAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.privateDnsName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.publicDnsName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.instanceStatus = Status()
          self.instanceStatus.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InstanceDetail')
    if self.instanceId is not None:
      oprot.writeFieldBegin('instanceId', TType.STRING, 1)
      oprot.writeString(self.instanceId)
      oprot.writeFieldEnd()
    if self.osInstanceId is not None:
      oprot.writeFieldBegin('osInstanceId', TType.STRING, 2)
      oprot.writeString(self.osInstanceId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.instanceType is not None:
      oprot.writeFieldBegin('instanceType', TType.STRING, 4)
      oprot.writeString(self.instanceType)
      oprot.writeFieldEnd()
    if self.privateIpAddress is not None:
      oprot.writeFieldBegin('privateIpAddress', TType.STRING, 5)
      oprot.writeString(self.privateIpAddress)
      oprot.writeFieldEnd()
    if self.publicIpAddress is not None:
      oprot.writeFieldBegin('publicIpAddress', TType.STRING, 6)
      oprot.writeString(self.publicIpAddress)
      oprot.writeFieldEnd()
    if self.privateDnsName is not None:
      oprot.writeFieldBegin('privateDnsName', TType.STRING, 7)
      oprot.writeString(self.privateDnsName)
      oprot.writeFieldEnd()
    if self.publicDnsName is not None:
      oprot.writeFieldBegin('publicDnsName', TType.STRING, 8)
      oprot.writeString(self.publicDnsName)
      oprot.writeFieldEnd()
    if self.instanceStatus is not None:
      oprot.writeFieldBegin('instanceStatus', TType.STRUCT, 9)
      self.instanceStatus.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.instanceId is None:
      raise TProtocol.TProtocolException(message='Required field instanceId is unset!')
    if self.osInstanceId is None:
      raise TProtocol.TProtocolException(message='Required field osInstanceId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class JobDetail:
  """
  Attributes:
   - jobId
   - name
   - jar
   - jarMainClass
   - jarArgs
   - jarProperties
   - jobStatus
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'jobId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'jar', None, None, ), # 3
    (4, TType.STRING, 'jarMainClass', None, None, ), # 4
    (5, TType.LIST, 'jarArgs', (TType.STRING,None), None, ), # 5
    (6, TType.MAP, 'jarProperties', (TType.STRING,None,TType.STRING,None), None, ), # 6
    (7, TType.STRUCT, 'jobStatus', (Status, Status.thrift_spec), None, ), # 7
  )

  def __init__(self, jobId=None, name=None, jar=None, jarMainClass=None, jarArgs=None, jarProperties=None, jobStatus=None,):
    self.jobId = jobId
    self.name = name
    self.jar = jar
    self.jarMainClass = jarMainClass
    self.jarArgs = jarArgs
    self.jarProperties = jarProperties
    self.jobStatus = jobStatus

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.jobId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.jar = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.jarMainClass = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.jarArgs = []
          (_etype54, _size51) = iprot.readListBegin()
          for _i55 in range(_size51):
            _elem56 = iprot.readString();
            self.jarArgs.append(_elem56)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.jarProperties = {}
          (_ktype58, _vtype59, _size57 ) = iprot.readMapBegin()
          for _i61 in range(_size57):
            _key62 = iprot.readString();
            _val63 = iprot.readString();
            self.jarProperties[_key62] = _val63
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.jobStatus = Status()
          self.jobStatus.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('JobDetail')
    if self.jobId is not None:
      oprot.writeFieldBegin('jobId', TType.STRING, 1)
      oprot.writeString(self.jobId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.jar is not None:
      oprot.writeFieldBegin('jar', TType.STRING, 3)
      oprot.writeString(self.jar)
      oprot.writeFieldEnd()
    if self.jarMainClass is not None:
      oprot.writeFieldBegin('jarMainClass', TType.STRING, 4)
      oprot.writeString(self.jarMainClass)
      oprot.writeFieldEnd()
    if self.jarArgs is not None:
      oprot.writeFieldBegin('jarArgs', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.jarArgs))
      for iter64 in self.jarArgs:
        oprot.writeString(iter64)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jarProperties is not None:
      oprot.writeFieldBegin('jarProperties', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.jarProperties))
      for kiter65,viter66 in list(self.jarProperties.items()):
        oprot.writeString(kiter65)
        oprot.writeString(viter66)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.jobStatus is not None:
      oprot.writeFieldBegin('jobStatus', TType.STRUCT, 7)
      self.jobStatus.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.jobId is None:
      raise TProtocol.TProtocolException(message='Required field jobId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClusterDetail:
  """
  Attributes:
   - clusterId
   - name
   - region
   - purpose
   - keyPair
   - autoTerminate
   - terminationProtected
   - instanceGroups
   - masterPublicDnsName
   - clusterStatus
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clusterId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'region', None, None, ), # 3
    (4, TType.STRING, 'purpose', None, None, ), # 4
    (5, TType.STRING, 'keyPair', None, None, ), # 5
    (6, TType.BOOL, 'autoTerminate', None, None, ), # 6
    (7, TType.BOOL, 'terminationProtected', None, None, ), # 7
    (8, TType.LIST, 'instanceGroups', (TType.STRUCT,(InstanceGroupDetail, InstanceGroupDetail.thrift_spec)), None, ), # 8
    (9, TType.STRING, 'masterPublicDnsName', None, None, ), # 9
    (10, TType.STRUCT, 'clusterStatus', (Status, Status.thrift_spec), None, ), # 10
  )

  def __init__(self, clusterId=None, name=None, region=None, purpose=None, keyPair=None, autoTerminate=None, terminationProtected=None, instanceGroups=None, masterPublicDnsName=None, clusterStatus=None,):
    self.clusterId = clusterId
    self.name = name
    self.region = region
    self.purpose = purpose
    self.keyPair = keyPair
    self.autoTerminate = autoTerminate
    self.terminationProtected = terminationProtected
    self.instanceGroups = instanceGroups
    self.masterPublicDnsName = masterPublicDnsName
    self.clusterStatus = clusterStatus

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clusterId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.region = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.purpose = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.keyPair = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.autoTerminate = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.terminationProtected = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.instanceGroups = []
          (_etype70, _size67) = iprot.readListBegin()
          for _i71 in range(_size67):
            _elem72 = InstanceGroupDetail()
            _elem72.read(iprot)
            self.instanceGroups.append(_elem72)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.masterPublicDnsName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.clusterStatus = Status()
          self.clusterStatus.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClusterDetail')
    if self.clusterId is not None:
      oprot.writeFieldBegin('clusterId', TType.STRING, 1)
      oprot.writeString(self.clusterId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.region is not None:
      oprot.writeFieldBegin('region', TType.STRING, 3)
      oprot.writeString(self.region)
      oprot.writeFieldEnd()
    if self.purpose is not None:
      oprot.writeFieldBegin('purpose', TType.STRING, 4)
      oprot.writeString(self.purpose)
      oprot.writeFieldEnd()
    if self.keyPair is not None:
      oprot.writeFieldBegin('keyPair', TType.STRING, 5)
      oprot.writeString(self.keyPair)
      oprot.writeFieldEnd()
    if self.autoTerminate is not None:
      oprot.writeFieldBegin('autoTerminate', TType.BOOL, 6)
      oprot.writeBool(self.autoTerminate)
      oprot.writeFieldEnd()
    if self.terminationProtected is not None:
      oprot.writeFieldBegin('terminationProtected', TType.BOOL, 7)
      oprot.writeBool(self.terminationProtected)
      oprot.writeFieldEnd()
    if self.instanceGroups is not None:
      oprot.writeFieldBegin('instanceGroups', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.instanceGroups))
      for iter73 in self.instanceGroups:
        iter73.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.masterPublicDnsName is not None:
      oprot.writeFieldBegin('masterPublicDnsName', TType.STRING, 9)
      oprot.writeString(self.masterPublicDnsName)
      oprot.writeFieldEnd()
    if self.clusterStatus is not None:
      oprot.writeFieldBegin('clusterStatus', TType.STRUCT, 10)
      self.clusterStatus.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.clusterId is None:
      raise TProtocol.TProtocolException(message='Required field clusterId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SetConfigRequest:
  """
  Attributes:
   - cluster
   - config
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cluster', None, None, ), # 1
    (2, TType.STRING, 'config', None, None, ), # 2
  )

  def __init__(self, cluster=None, config=None,):
    self.cluster = cluster
    self.config = config

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cluster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.config = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SetConfigRequest')
    if self.cluster is not None:
      oprot.writeFieldBegin('cluster', TType.STRING, 1)
      oprot.writeString(self.cluster)
      oprot.writeFieldEnd()
    if self.config is not None:
      oprot.writeFieldBegin('config', TType.STRING, 2)
      oprot.writeString(self.config)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SetConfigResponse:
  """
  Attributes:
   - succeed
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'succeed', None, None, ), # 1
  )

  def __init__(self, succeed=None,):
    self.succeed = succeed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.succeed = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SetConfigResponse')
    if self.succeed is not None:
      oprot.writeFieldBegin('succeed', TType.BOOL, 1)
      oprot.writeBool(self.succeed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StartServiceRequest:
  """
  Attributes:
   - cluster
   - services
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cluster', None, None, ), # 1
    (2, TType.LIST, 'services', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, cluster=None, services=None,):
    self.cluster = cluster
    self.services = services

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cluster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.services = []
          (_etype77, _size74) = iprot.readListBegin()
          for _i78 in range(_size74):
            _elem79 = iprot.readString();
            self.services.append(_elem79)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StartServiceRequest')
    if self.cluster is not None:
      oprot.writeFieldBegin('cluster', TType.STRING, 1)
      oprot.writeString(self.cluster)
      oprot.writeFieldEnd()
    if self.services is not None:
      oprot.writeFieldBegin('services', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.services))
      for iter80 in self.services:
        oprot.writeString(iter80)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StartServiceResponse:
  """
  Attributes:
   - succeed
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'succeed', None, None, ), # 1
  )

  def __init__(self, succeed=None,):
    self.succeed = succeed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.succeed = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StartServiceResponse')
    if self.succeed is not None:
      oprot.writeFieldBegin('succeed', TType.BOOL, 1)
      oprot.writeBool(self.succeed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StopServiceRequest:
  """
  Attributes:
   - cluster
   - services
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cluster', None, None, ), # 1
    (2, TType.LIST, 'services', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, cluster=None, services=None,):
    self.cluster = cluster
    self.services = services

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cluster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.services = []
          (_etype84, _size81) = iprot.readListBegin()
          for _i85 in range(_size81):
            _elem86 = iprot.readString();
            self.services.append(_elem86)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StopServiceRequest')
    if self.cluster is not None:
      oprot.writeFieldBegin('cluster', TType.STRING, 1)
      oprot.writeString(self.cluster)
      oprot.writeFieldEnd()
    if self.services is not None:
      oprot.writeFieldBegin('services', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.services))
      for iter87 in self.services:
        oprot.writeString(iter87)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StopServiceResponse:
  """
  Attributes:
   - succeed
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'succeed', None, None, ), # 1
  )

  def __init__(self, succeed=None,):
    self.succeed = succeed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.succeed = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StopServiceResponse')
    if self.succeed is not None:
      oprot.writeFieldBegin('succeed', TType.BOOL, 1)
      oprot.writeBool(self.succeed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClusterState:
  """
  Attributes:
   - ready
   - timeline
   - hostReady
   - serviceReady
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'ready', None, None, ), # 1
    (2, TType.STRUCT, 'timeline', (Timeline, Timeline.thrift_spec), None, ), # 2
    (3, TType.BOOL, 'hostReady', None, None, ), # 3
    (4, TType.BOOL, 'serviceReady', None, None, ), # 4
  )

  def __init__(self, ready=None, timeline=None, hostReady=None, serviceReady=None,):
    self.ready = ready
    self.timeline = timeline
    self.hostReady = hostReady
    self.serviceReady = serviceReady

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.ready = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.timeline = Timeline()
          self.timeline.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.hostReady = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.serviceReady = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClusterState')
    if self.ready is not None:
      oprot.writeFieldBegin('ready', TType.BOOL, 1)
      oprot.writeBool(self.ready)
      oprot.writeFieldEnd()
    if self.timeline is not None:
      oprot.writeFieldBegin('timeline', TType.STRUCT, 2)
      self.timeline.write(oprot)
      oprot.writeFieldEnd()
    if self.hostReady is not None:
      oprot.writeFieldBegin('hostReady', TType.BOOL, 3)
      oprot.writeBool(self.hostReady)
      oprot.writeFieldEnd()
    if self.serviceReady is not None:
      oprot.writeFieldBegin('serviceReady', TType.BOOL, 4)
      oprot.writeBool(self.serviceReady)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.items()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
