#!/usr/bin/env python
# -*- coding: utf-8 -*-
# File: {FILE_NAME}
# Author: {AUTHOR_NAME}
"""{PROJECT_NAME}

Usage:
    {PROJECT_NAME} [--config=CONFIG]
    {PROJECT_NAME} (-h | --help)
    {PROJECT_NAME} --version

Options:
    -h --help               Show help info.
    --version               Show version.
    --config=CONFIG         Set database config. [default: deploy]
"""
import arrow
import logging

from chanconfig import Config
from docopt import docopt
from logging.config import dictConfig
from orm.database import DBSessionMaker, DBSession

from {PROJECT_NAME}.constant import CONFIGS
from {PROJECT_NAME}.models.{PROJECT_NAME}_statistics import {CLASS_NAME}Statistics


LOGGER = logging.getLogger(__name__)


def initialize_logger(config):
    """initial logger config

    Args:
        config: a dict for logging config
    """
    dictConfig(config._dict)
    LOGGER.info('Initialize logger')


def create_session_maker(config):
    """Create session maker with given config

    Args:
        config: a dict for Config

    Return:
        ``sqlalchemy.DBSessionMaker``
    """
    return DBSessionMaker(**config)


def read_arguments():
    """Read arguments from stdin and config file

    Return:
        a dict of arguments
    """
    argv = docopt(__doc__, version='{PROJECT_NAME} V0.0.1')
    config = Config(*CONFIGS[argv['--config']])
    config.update(argv)
    return config


def create_statistics():
    """Create Statistics instance

    Return:
        a ``{CLASS_NAME}Statistics`` instance
    """
    return {CLASS_NAME}Statistics(
        start_time=arrow.now().format('YYYY-MM-DD HH:mm:ss'),
        finish_status=0
    )


def run(arguments, session):
    """Run main logic

    Args:
        arguments: a dict of arguments
        session: ``DBSession``
    """
    pass


def main():
    """Entrance
    """
    logging_config = Config(*CONFIGS['logging'])
    initialize_logger(logging_config)

    configs = read_arguments()
    statistics = create_statistics()

    session_maker = create_session_maker(configs.mysql)
    session_maker.connect()

    with DBSession(session_maker.session_maker) as session:
        try:
            run(configs, session)
        except Exception, e:
            LOGGER.exception(e)
            statistics.finish_status = 1

        statistics.finish_time = arrow.now().datetime.replace(tzinfo=None)
        {CLASS_NAME}Statistics.add(statistics, session)

    session_maker.save()
